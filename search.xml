<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Celery task.update_state</title>
    <url>/IT/Celery/Celery%20task.update_state.html</url>
    <content><![CDATA[<h1 id="Celery-task-update-state"><a href="#Celery-task-update-state" class="headerlink" title="Celery task.update_state"></a>Celery task.update_state</h1><p>环境: python2.7 + Celery 4.3.0</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>1、直接调用闭包函数update_task_progress（内部调用task.update_task）更新celery task state，运行正常；</p>
<p>2、启动新线程调用同一函数，出现报错信息:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread Thread-<span class="number">1</span>:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/lib64/python2.7/threading.py&quot;</span>, line <span class="number">812</span>, <span class="keyword">in</span> __bootstrap_inner</span><br><span class="line">    self.run()</span><br><span class="line">  File <span class="string">&quot;/var/lib/proj/utils/thread.py&quot;</span>, line <span class="number">36</span>, <span class="keyword">in</span> run</span><br><span class="line">    self.__fun(*self.__args, **self.__kwargs)</span><br><span class="line">  File <span class="string">&quot;/var/lib/proj/test/base.py&quot;</span>, line <span class="number">84</span>, <span class="keyword">in</span> progress_call_back</span><br><span class="line">    update_task_progress(task, percentage, desc, finished, failed, total)</span><br><span class="line">  File <span class="string">&quot;/var/lib/proj/utils/error.py&quot;</span>, line <span class="number">200</span>, <span class="keyword">in</span> update_task_progress</span><br><span class="line">    task.update_state(state = <span class="string">&#x27;PROGRESS&#x27;</span>, meta=&#123;<span class="string">&#x27;percentage&#x27;</span>: percentage, <span class="string">&#x27;desc&#x27;</span>:task_desc, <span class="string">&#x27;finished&#x27;</span>: finished, <span class="string">&#x27;failed&#x27;</span>: failed, <span class="string">&#x27;total&#x27;</span>: total&#125;)</span><br><span class="line">  File <span class="string">&quot;/var/lib/proj/env/lib64/python2.7/site-packages/celery-4.3.0-py2.7.egg/celery/app/task.py&quot;</span>, line <span class="number">937</span>, <span class="keyword">in</span> update_state</span><br><span class="line">    self.backend.store_result(task_id, meta, state, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/var/lib/proj/env/lib64/python2.7/site-packages/celery-4.3.0-py2.7.egg/celery/backends/rpc.py&quot;</span>, line <span class="number">202</span>, <span class="keyword">in</span> store_result</span><br><span class="line">    routing_key, correlation_id = self.destination_for(task_id, request)</span><br><span class="line">  File <span class="string">&quot;/var/lib/proj/env/lib64/python2.7/site-packages/celery-4.3.0-py2.7.egg/celery/backends/rpc.py&quot;</span>, line <span class="number">182</span>, <span class="keyword">in</span> destination_for</span><br><span class="line">    <span class="string">&#x27;RPC backend missing task request for &#123;0!r&#125;&#x27;</span>.<span class="built_in">format</span>(task_id))</span><br><span class="line">RuntimeError: RPC backend missing task request <span class="keyword">for</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="一、问题定位"><a href="#一、问题定位" class="headerlink" title="一、问题定位"></a>一、问题定位</h2><p>追踪问题代码，首先定位到celery/backends/rpc.py Exception的抛出点:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destination_for</span>(<span class="params">self, task_id, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get the destination for result by task id.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Tuple[str, str]: tuple of ``(reply_to, correlation_id)``.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Backends didn&#x27;t always receive the `request`, so we must still</span></span><br><span class="line">        <span class="comment"># support old code that relies on current_task.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request = request <span class="keyword">or</span> current_task.request</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(</span><br><span class="line">                <span class="string">&#x27;RPC backend missing task request for &#123;0!r&#125;&#x27;</span>.<span class="built_in">format</span>(task_id))</span><br><span class="line">        <span class="keyword">return</span> request.reply_to, request.correlation_id <span class="keyword">or</span> task_id</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>此处捕获到了AttributeError，说明current_task中没有属性request，且根据报错信息，task_id为None。</p>
<p>根据异常日志继续向上追溯destination_for的调用者，在同一文件中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">def store_result(self, task_id, result, state,</span><br><span class="line">                     traceback=None, request=None, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;Send task return value and state.&quot;&quot;&quot;</span><br><span class="line">        routing_key, correlation_id = self.destination_for(task_id, request)</span><br><span class="line">        if not routing_key:</span><br><span class="line">            return</span><br><span class="line">        with self.app.amqp.producer_pool.acquire(block=True) as producer:</span><br><span class="line">            producer.publish(</span><br><span class="line">                self._to_result(task_id, state, result, traceback, request),</span><br><span class="line">                exchange=self.exchange,</span><br><span class="line">                routing_key=routing_key,</span><br><span class="line">                correlation_id=correlation_id,</span><br><span class="line">                serializer=self.serializer,</span><br><span class="line">                retry=True, retry_policy=self.retry_policy,</span><br><span class="line">                declare=self.on_reply_declare(task_id),</span><br><span class="line">                delivery_mode=self.delivery_mode,</span><br><span class="line">            )</span><br><span class="line">        return result</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>继续向上追溯，到达celery/app/task.py，update_state的源码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">def update_state(self, task_id=None, state=None, meta=None, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;Update task state.</span><br><span class="line"></span><br><span class="line">        Arguments:</span><br><span class="line">            task_id (str): Id of the task to update.</span><br><span class="line">                Defaults to the id of the current task.</span><br><span class="line">            state (str): New state.</span><br><span class="line">            meta (Dict): State meta-data.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if task_id is None:</span><br><span class="line">            task_id = self.request.id</span><br><span class="line">        self.backend.store_result(task_id, meta, state, request=self.request, **kwargs)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/01/06/npmHTvEw3GOWNit.png" alt="image-20210104201257230"></p>
<p>添加日志如上图，观察self、self.request和self.request.id的值，发现self.request和self.request.id都是None：</p>
<p><img src="https://i.loli.net/2021/01/06/TphePK8UnbvutRV.png" alt="image-20210104201415387"></p>
<p>同样的方法追踪current_task的值，发现current_task为None。</p>
<h2 id="二、current-task分析"><a href="#二、current-task分析" class="headerlink" title="二、current_task分析"></a>二、current_task分析</h2><p>找到current_task的定义位置，在celery/_state.py  line 144：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">#: Proxy to current task.</span><br><span class="line">current_task = Proxy(get_current_task)  </span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>先看get_current_task的定义，celery/_state.py line 123：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">def get_current_task():</span><br><span class="line">    &quot;&quot;&quot;Currently executing task.&quot;&quot;&quot;</span><br><span class="line">    return _task_stack.top</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>继续看_task_stack的定义，celery/_state.py line 75：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">_task_stack = LocalStack()</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>LocalStack：栈，线程隔离</p>
<p>全局搜索_task_stack，发现在celery/app/tasks.py line 388，class Task中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">def __call__(self, *args, **kwargs):</span><br><span class="line">        _task_stack.push(self)</span><br><span class="line">        self.push_request(args=args, kwargs=kwargs)</span><br><span class="line">        try:</span><br><span class="line">            return self.run(*args, **kwargs)</span><br><span class="line">        finally:</span><br><span class="line">            self.pop_request()</span><br><span class="line">            _task_stack.pop()</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>综上来看，task在被调用的时候，Task对象（self）压入栈，current_task为栈顶元素，且_task_stack栈为线程隔离的，所以在新线程中调用的时候，会发现current_task为None。</p>
<h2 id="三、思考"><a href="#三、思考" class="headerlink" title="三、思考"></a>三、思考</h2><h3 id="1、使用LocalStack的原因："><a href="#1、使用LocalStack的原因：" class="headerlink" title="1、使用LocalStack的原因："></a>1、使用LocalStack的原因：</h3><ul>
<li>线程安全，防止多线程情景下task取值相互干扰，保证每个线程内部current_task的正确性。</li>
<li>使用LocalStack封装Local：同一线程内，可能存在多个task。</li>
</ul>
<h3 id="2、使用LocalProxy的原因："><a href="#2、使用LocalProxy的原因：" class="headerlink" title="2、使用LocalProxy的原因："></a>2、使用LocalProxy的原因：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">from celery.utils.threads import LocalStack</span><br><span class="line">from celery.local import Proxy</span><br><span class="line">from celery._state import get_current_task, _task_stack</span><br><span class="line">from celery import current_task</span><br><span class="line"></span><br><span class="line">def get_task():</span><br><span class="line">	return _task_stack.top</span><br><span class="line"></span><br><span class="line">_task_stack.push(12)</span><br><span class="line">_task_stack.push(34)</span><br><span class="line"></span><br><span class="line">a = get_task()</span><br><span class="line"># a为34, 且赋值后不会再改变</span><br><span class="line">print(a) # 34</span><br><span class="line"></span><br><span class="line">_task_stack.push(45)</span><br><span class="line">print(a) # 34, 没有变化</span><br><span class="line"></span><br><span class="line">a_proxy = Proxy(get_task)</span><br><span class="line">print(a_proxy) # 45</span><br><span class="line"></span><br><span class="line">_task_stack.push(&#x27;asd&#x27;)</span><br><span class="line">print(a_proxy) # &#x27;asd&#x27;,被更新了</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，相对于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">current_task = get_current_task()</span><br></pre></td></tr></table></figure>

<p>Proxy实现了动态更新的效果，确保每次访问current_task的时候，都是当前在执行的task。否则，访问了错误的task可能会导致程序异常。</p>
<p>但是，为什么不每次调用get_current_task？</p>
<p><a href="https://github.com/celery/celery/issues/5100">参考，官方回答: Task state can not be updated from within a thread when using RPC</a></p>
<p><a href="https://blog.csdn.net/JENREY/article/details/86615508">参考一: LocalStack的使用及详解</a></p>
<p><a href="https://hustyichi.github.io/2018/08/22/LocalProxy-in-flask/">参考二: Local,LocalStack,LocalProxy深入解析</a></p>
<p><a href="https://www.jianshu.com/p/3f38b777a621">参考四: LocalProxy解析及使用原因</a></p>
<p><a href="https://www.lagou.com/lgeduarticle/74823.html">参考五: Flask的上下文机制：Local/LocalProxy</a></p>
<p><a href="https://cizixs.com/2017/01/13/flask-insight-context/">参考六: Flask的上下文机制: 为什么使用LocalStack和LocalProxy</a></p>
<p><a href="https://segmentfault.com/q/1010000006826944">参考七: Celery local.proxy的一段注释</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Celery</category>
      </categories>
      <tags>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件-middleware</title>
    <url>/IT/Django/%E4%B8%AD%E9%97%B4%E4%BB%B6-middleware.html</url>
    <content><![CDATA[<h1 id="Django-middleware分析"><a href="#Django-middleware分析" class="headerlink" title="Django-middleware分析"></a>Django-middleware分析</h1><h2 id="一、middleware加载过程-源码分析"><a href="#一、middleware加载过程-源码分析" class="headerlink" title="一、middleware加载过程-源码分析"></a>一、middleware加载过程-源码分析</h2><p>django/core/handlers/wsgi.py， line 122:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span>(<span class="params">base.BaseHandler</span>):</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>追蹤load_middleware, 在django/core/handlers/base.py, line 23, class BaseHandler:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Populate middleware lists from settings.MIDDLEWARE.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Must be called after the environment is fixed (see __call__ in subclasses).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._view_middleware = []</span><br><span class="line">        self._template_response_middleware = []</span><br><span class="line">        self._exception_middleware = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 函数定义可以参考下文</span></span><br><span class="line">        <span class="comment"># 忽略异常情况，此处可以简单的看作：handler=self._get_response</span></span><br><span class="line">        handler = convert_exception_to_response(self._get_response)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># note: 此处以倒序处理MIDDREWARE</span></span><br><span class="line">        <span class="keyword">for</span> middleware_path <span class="keyword">in</span> <span class="built_in">reversed</span>(settings.MIDDLEWARE):</span><br><span class="line">            <span class="comment"># 导入middleware</span></span><br><span class="line">            middleware = import_string(middleware_path)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 参考下文贴出的MiddlewareMixin源码</span></span><br><span class="line">                <span class="comment"># 实例化一个MiddlewareMixin对象, 该对象的get_response属性设置为handler</span></span><br><span class="line">                mw_instance = middleware(handler)</span><br><span class="line">            <span class="keyword">except</span> MiddlewareNotUsed <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">str</span>(exc):</span><br><span class="line">                        logger.debug(<span class="string">&#x27;MiddlewareNotUsed(%r): %s&#x27;</span>, middleware_path, exc)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logger.debug(<span class="string">&#x27;MiddlewareNotUsed: %r&#x27;</span>, middleware_path)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> mw_instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                    <span class="string">&#x27;Middleware factory %s returned None.&#x27;</span> % middleware_path</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw_instance, <span class="string">&#x27;process_view&#x27;</span>):</span><br><span class="line">                self._view_middleware.insert(<span class="number">0</span>, mw_instance.process_view)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw_instance, <span class="string">&#x27;process_template_response&#x27;</span>):</span><br><span class="line">                self._template_response_middleware.append(mw_instance.process_template_response)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw_instance, <span class="string">&#x27;process_exception&#x27;</span>):</span><br><span class="line">                self._exception_middleware.append(mw_instance.process_exception)</span><br><span class="line"></span><br><span class="line">           	<span class="comment"># handler更新为一个MiddlewareMixin对象</span></span><br><span class="line">            <span class="comment"># 以函数形式调用该对象（例mw_instance(request)）的时候，实际调用了mw_instance.__call__方法</span></span><br><span class="line">            handler = convert_exception_to_response(mw_instance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># We only assign to this when initialization is complete as it is used</span></span><br><span class="line">        <span class="comment"># as a flag for initialization being complete.</span></span><br><span class="line">        self._middleware_chain = handler</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>convert_exception_to_response的声明在django/core/handlers/exception.py, line 18, 可以看到该函数实际是封装了异常处理:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_exception_to_response</span>(<span class="params">get_response</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Wrap the given get_response callable in exception-to-response conversion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    All exceptions will be converted. All known 4xx exceptions (Http404,</span></span><br><span class="line"><span class="string">    PermissionDenied, MultiPartParserError, SuspiciousOperation) will be</span></span><br><span class="line"><span class="string">    converted to the appropriate response, and all other exceptions will be</span></span><br><span class="line"><span class="string">    converted to 500 responses.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This decorator is automatically applied to all middleware to ensure that</span></span><br><span class="line"><span class="string">    no middleware leaks an exception and that the next middleware in the stack</span></span><br><span class="line"><span class="string">    can rely on getting a response instead of an exception.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">get_response</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = get_response(request)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = response_for_exception(request, exc)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>django中的middleware会从一个MiddlewareMixin继承，关于MiddlewareMixin的定义在django/utils/deprecation.py, line 85:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, get_response=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;process_request&#x27;</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        response = response <span class="keyword">or</span> self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;process_response&#x27;</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="二、middleware加载过程-代码运行分析"><a href="#二、middleware加载过程-代码运行分析" class="headerlink" title="二、middleware加载过程-代码运行分析"></a>二、middleware加载过程-代码运行分析</h2><p>假设定义setting.MIDDLEWARE定义为[A, B, C]，那么上面过程可以描述为：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handler = wrapped(self._get_response)  <span class="comment"># BaseHandler._get_response</span></span><br><span class="line"><span class="keyword">for</span> M <span class="keyword">in</span> [C, B, A]:</span><br><span class="line">    <span class="keyword">import</span> A</span><br><span class="line">    m_instance = M(handler) <span class="comment"># m_instance.get_response = handler</span></span><br><span class="line">    handler = wrapped(m_instance) <span class="comment"># m_instance.__call__</span></span><br><span class="line">    </span><br><span class="line">self._middleware_chain = handler <span class="comment"># A.__call__</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>运行后的结果为：</p>
<p><strong>note: 为简化分析过程，此处忽略了异常情况</strong></p>
<p><strong>实际需考虑convert_exception_to_response，完整的A.get_response应该为convert_exception_to_response(B.<strong>call</strong>)</strong></p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C.get_response = BaseHandler._get_response</span><br><span class="line">B.get_response = C.__call__</span><br><span class="line">A.get_response = B.__call__</span><br><span class="line">self._middleware_chain = A.__call__</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="三、request处理过程-源码分析"><a href="#三、request处理过程-源码分析" class="headerlink" title="三、request处理过程-源码分析"></a>三、request处理过程-源码分析</h2><p>django/core/handlers/wsgi.py, line 133, class WSGIHandler:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span>(<span class="params">base.BaseHandler</span>):</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, environ, start_response</span>):</span></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取response</span></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">        status = <span class="string">&#x27;%d %s&#x27;</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">        response_headers = [</span><br><span class="line">            *response.items(),</span><br><span class="line">            *((<span class="string">&#x27;Set-Cookie&#x27;</span>, c.output(header=<span class="string">&#x27;&#x27;</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values()),</span><br><span class="line">        ]</span><br><span class="line">        start_response(status, response_headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">getattr</span>(response, <span class="string">&#x27;file_to_stream&#x27;</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> environ.get(<span class="string">&#x27;wsgi.file_wrapper&#x27;</span>):</span><br><span class="line">            <span class="comment"># If `wsgi.file_wrapper` is used the WSGI server does not call</span></span><br><span class="line">            <span class="comment"># .close on the response, but on the file wrapper. Patch it to use</span></span><br><span class="line">            <span class="comment"># response.close instead which takes care of closing all files.</span></span><br><span class="line">            response.file_to_stream.close = response.close</span><br><span class="line">            response = environ[<span class="string">&#x27;wsgi.file_wrapper&#x27;</span>](response.file_to_stream, response.block_size)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>追蹤, 在django/core/handlers/base.py, line 71, class BaseHandler:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">def get_response(self, request):</span><br><span class="line">        &quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</span><br><span class="line">        # Setup default url resolver for this thread</span><br><span class="line">        set_urlconf(settings.ROOT_URLCONF)</span><br><span class="line">        </span><br><span class="line">        # middleware依次处理</span><br><span class="line">        response = self._middleware_chain(request)</span><br><span class="line">        response._resource_closers.append(request.close)</span><br><span class="line">        if response.status_code &gt;= 400:</span><br><span class="line">            log_response(</span><br><span class="line">                &#x27;%s: %s&#x27;, response.reason_phrase, request.path,</span><br><span class="line">                response=response,</span><br><span class="line">                request=request,</span><br><span class="line">            )</span><br><span class="line">        return response</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>参考上文【middleware加载过程-代码运行分析】的例子，middleware处理过程可看作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">A.__call__(request):</span><br><span class="line">    response = None</span><br><span class="line">    if hasattr(self, &#x27;process_request&#x27;):</span><br><span class="line">        response = self.process_request(request)</span><br><span class="line">    # 替换</span><br><span class="line">    response = response or self.get_response(request)</span><br><span class="line">    if hasattr(self, &#x27;process_response&#x27;):</span><br><span class="line">        response = self.process_response(request, response)</span><br><span class="line">        return response</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>结合上文MiddlewareMixin.__call__的源码，此处实际是链式调用，依次调用</p>
<p>A.<strong>call</strong> -&gt; B.<strong>call</strong> -&gt; C.<strong>call</strong> -&gt; BaseHandler._get_response，即：</p>
<p>A.process_request –&gt; B.process_request –&gt; C.process_request –&gt; BaseHandler._get_response –&gt; BaseHandler._process_response – &gt; C.process_response –&gt; B.process_response –&gt; A.process_response</p>
<p>贴一下BaseHandler._get_response的源码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;python</span><br><span class="line">	def _get_response(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Resolve and call the view, then apply view, exception, and</span><br><span class="line">        template_response middleware. This method is everything that happens</span><br><span class="line">        inside the request/response middleware.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        response = None</span><br><span class="line"></span><br><span class="line">        if hasattr(request, &#x27;urlconf&#x27;):</span><br><span class="line">            urlconf = request.urlconf</span><br><span class="line">            set_urlconf(urlconf)</span><br><span class="line">            resolver = get_resolver(urlconf)</span><br><span class="line">        else:</span><br><span class="line">            resolver = get_resolver()</span><br><span class="line"></span><br><span class="line">        resolver_match = resolver.resolve(request.path_info)</span><br><span class="line">        callback, callback_args, callback_kwargs = resolver_match</span><br><span class="line">        request.resolver_match = resolver_match</span><br><span class="line"></span><br><span class="line">        # Apply view middleware</span><br><span class="line">        for middleware_method in self._view_middleware:</span><br><span class="line">            response = middleware_method(request, callback, callback_args, callback_kwargs)</span><br><span class="line">            if response:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">        if response is None:</span><br><span class="line">            wrapped_callback = self.make_view_atomic(callback)</span><br><span class="line">            try:</span><br><span class="line">                response = wrapped_callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                response = self.process_exception_by_middleware(e, request)</span><br><span class="line"></span><br><span class="line">        # Complain if the view returned None (a common error).</span><br><span class="line">        if response is None:</span><br><span class="line">            if isinstance(callback, types.FunctionType):    # FBV</span><br><span class="line">                view_name = callback.__name__</span><br><span class="line">            else:                                           # CBV</span><br><span class="line">                view_name = callback.__class__.__name__ + &#x27;.__call__&#x27;</span><br><span class="line"></span><br><span class="line">            raise ValueError(</span><br><span class="line">                &quot;The view %s.%s didn&#x27;t return an HttpResponse object. It &quot;</span><br><span class="line">                &quot;returned None instead.&quot; % (callback.__module__, view_name)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        # If the response supports deferred rendering, apply template</span><br><span class="line">        # response middleware and then render the response</span><br><span class="line">        elif hasattr(response, &#x27;render&#x27;) and callable(response.render):</span><br><span class="line">            for middleware_method in self._template_response_middleware:</span><br><span class="line">                response = middleware_method(request, response)</span><br><span class="line">                # Complain if the template response middleware returned None (a common error).</span><br><span class="line">                if response is None:</span><br><span class="line">                    raise ValueError(</span><br><span class="line">                        &quot;%s.process_template_response didn&#x27;t return an &quot;</span><br><span class="line">                        &quot;HttpResponse object. It returned None instead.&quot;</span><br><span class="line">                        % (middleware_method.__self__.__class__.__name__)</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                response = response.render()</span><br><span class="line">            except Exception as e:</span><br><span class="line">                response = self.process_exception_by_middleware(e, request)</span><br><span class="line"></span><br><span class="line">        return response</span><br></pre></td></tr></table></figure>

<p>可以看到url解析即在此处完成，此外还有视图和渲染等功能也在此处调用。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/Fe_cow/article/details/91344472">参考一: Django中间件详解</a></p>
<p><a href="https://www.runoob.com/django/django-middleware.html">参考二: Django中间件</a></p>
<p><a href="https://www.cnblogs.com/276815076/p/9593419.html">参考三: 自定义Django中间件</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>性能分析工具-silk</title>
    <url>/IT/Django/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-silk.html</url>
    <content><![CDATA[<h1 id="性能分析：Django-silk"><a href="#性能分析：Django-silk" class="headerlink" title="性能分析：Django-silk"></a>性能分析：Django-silk</h1><p><a href="https://www.jianshu.com/p/63a450d982cf">参考一: django-silk django性能测试工具</a></p>
<p><a href="https://blog.csdn.net/weixin_37590093/article/details/81535539">参考二: silk使用方法</a></p>
<p><a href="https://github.com/jazzband/django-silk">参考三: silk官方地址</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka-重平衡</title>
    <url>/IT/Kafka/Kafka-%E9%87%8D%E5%B9%B3%E8%A1%A1.html</url>
    <content><![CDATA[<h1 id="Kafka-重平衡"><a href="#Kafka-重平衡" class="headerlink" title="Kafka-重平衡"></a>Kafka-重平衡</h1><h2 id="重平衡"><a href="#重平衡" class="headerlink" title="重平衡"></a>重平衡</h2><p>对消费组内的消费者订阅分区进行重新分配的过程。</p>
<h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><ul>
<li>消费组内有新的消费者加入或者旧的消费者退出；</li>
<li>消费组内有消费者宕机下线，心跳超时；</li>
<li>消费组订阅的主题或者已订阅主题的分区信息发生变化；</li>
<li>消费组对应的GroupCoordinator节点发生变化。</li>
</ul>
<h2 id="三阶段"><a href="#三阶段" class="headerlink" title="三阶段"></a>三阶段</h2><h3 id="一、FIND-COORDINATOR，找到GroupCoordinator"><a href="#一、FIND-COORDINATOR，找到GroupCoordinator" class="headerlink" title="一、FIND_COORDINATOR，找到GroupCoordinator"></a>一、FIND_COORDINATOR，找到GroupCoordinator</h3><ul>
<li><p>如果消费者已经保存了对应的GroupCoordinator节点信息，直接进入下一阶段；</p>
</li>
<li><p>否则，向集群的某个节点发送FindCoordinatorRequest请求，查找对应的GroupCoordinator。</p>
<p>1、请求：发送到集群中负载最小的节点LeastLoadedNode：inFlightRequests中请求数最少的一个节点；</p>
<p>2、GroupCoordinator的计算方法：</p>
<p>​    1） 计算对应的分区号: Utils.abs(groupId.hashcode)%groupMetadataTopicCount，groupMetadataTopicCount为主题__consumer_offsets的分区个数，默认为50;</p>
<p>​    2）得到分区号后，该分区leader副本所在的broker节点即为GroupCoordinator节点。</p>
</li>
<li><p>组协调者选出分区分配策略</p>
</li>
<li><p>组协调者将选出的分区分配策略发送给leader消费者，leader消费者执行分配动作，分配结果发送给每个消费者。 </p>
</li>
</ul>
<h3 id="二、JOIN-GROUP，加入消费组"><a href="#二、JOIN-GROUP，加入消费组" class="headerlink" title="二、JOIN_GROUP，加入消费组"></a>二、JOIN_GROUP，加入消费组</h3><p>消费者发送JoinGroupRequest请求，请求体中携带该消费者自身能够支持的分区分配策略（取决于消费者客户端的配置）。</p>
<p>GroupCoordinator节点的动作：</p>
<ul>
<li><p>选出leader消费者：基本可以看作是按照消费者加入消费组的顺序进行选举；</p>
</li>
<li><p>选择分区分配策略：</p>
<p>1）收集每个消费者支持的分区分配策略，组成候选集；</p>
<p>2）进行投票，每个消费者从候选集中选出第一个自身支持的分配策略，进行投票；<em>note: 此处不会与消费者交互，由GroupCoordinator根据消费者请求中的分配策略进行统计</em></p>
<p>3）投票最多的策略被选为消费组的分区分配策略，如果有消费者不支持，则抛出异常。</p>
</li>
<li><p>发送JoinGroupResponse，leader消费者与普通消费者收到的响应存在不同：leader消费者收到的响应中包含消费组分配策略和订阅topics的信息。</p>
</li>
</ul>
<p>如果是消费者重新加入消费组，需要额外执行下面的动作：</p>
<ul>
<li>如果开启了位移自动提交，那么发送加入请求前需要先提交位移信息；</li>
<li>如果添加了自定义的再均衡监听器，在重新加入前实施自定义的规则逻辑；</li>
<li>成功加入前禁止心跳检测的运作。</li>
</ul>
<h3 id="三、SYNC-GROUP，同步消费组信息"><a href="#三、SYNC-GROUP，同步消费组信息" class="headerlink" title="三、SYNC_GROUP，同步消费组信息"></a>三、SYNC_GROUP，同步消费组信息</h3><ul>
<li>leader消费者根据分配策略进行具体的分区分配；</li>
<li>消费者向GroupCoordinator发送SyncGroupRequest请求：leader消费者的请求中携带了具体的分配方案；</li>
<li>GroupCoordinator发送SyncGroupResponse；</li>
<li>保存消费组的元数据信息：此时直接保存到GroupCoordinator节点所在的broker即可（因为该节点本身就是对应分区的leader副本所在节点）；</li>
</ul>
<h3 id="四、HEARTBEAT，消费者维持心跳"><a href="#四、HEARTBEAT，消费者维持心跳" class="headerlink" title="四、HEARTBEAT，消费者维持心跳"></a>四、HEARTBEAT，消费者维持心跳</h3><ul>
<li>消费者定期上报心跳消息。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="">参考一: 深入理解Kafka核心设计与实践原理 7.2.2再均衡的原理</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>MVCC与事务隔离</title>
    <url>/IT/MySQL/MVCC%E4%B8%8E%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB.html</url>
    <content><![CDATA[<h1 id="MVCC与事务隔离"><a href="#MVCC与事务隔离" class="headerlink" title="MVCC与事务隔离"></a>MVCC与事务隔离</h1><h2 id="一、ACID"><a href="#一、ACID" class="headerlink" title="一、ACID"></a>一、ACID</h2><p><strong>原子性（atomicity）</strong>：事务不可分割。表现为：一个事务中的所有操作，要么全部完成，要么全部不完成。</p>
<p><strong>一致性（consistency）</strong>：事务不破坏数据库的完整性，事务前后是从一种一致性状态过渡到另一种一致性状态。比如，银行数据库，事务开始前，所有用户账号储蓄总共为1000，事务结束后，所有用户账号储蓄和依旧为1000。</p>
<p><strong>隔离性（isolation）</strong>：事务并发执行时，相互间不影响，一种事务所做的修改对另一事务不可见。换言之，事务所看到的修改，一定是该事务开始前已经提交的修改。事务开始后或者未提交的修改统统不可见。</p>
<p><strong>持久性（durability）</strong>：事务成功执行后，对数据库的修改被持久保存下来。即使发生断电或系统崩溃，依然能恢复到事务成功执行后的状态。</p>
<h2 id="二、隔离级别"><a href="#二、隔离级别" class="headerlink" title="二、隔离级别"></a>二、隔离级别</h2><h3 id="（一）数据读取的问题"><a href="#（一）数据读取的问题" class="headerlink" title="（一）数据读取的问题"></a>（一）数据读取的问题</h3><p><strong>丢失修改</strong>：</p>
<p><strong>脏读</strong>：一个事务读到了另一个事务未提交的修改。</p>
<p><strong>不可重复读</strong>：事务执行过程中两次读取同一条记录，读到的数据不一致。</p>
<p><strong>幻读</strong>：事务按同样的查询条件读取数据，读到了之前未读取到的数据。</p>
<h3 id="（二）隔离级别"><a href="#（二）隔离级别" class="headerlink" title="（二）隔离级别"></a>（二）隔离级别</h3><p><strong>未提交读</strong>：读到了其他事务未提交的数据。</p>
<p><strong>提交读</strong>：解决了脏读问题，但是存在不可重复读、幻读。</p>
<p><strong>可重复读</strong>：解决了脏读、不可重复读，但是存在幻读。</p>
<p><strong>串行化</strong>：解决来脏读、不可重复读、幻读。</p>
<p><strong>note: MySQL的InnoDB引擎通过MVCC在可重复读的隔离级别上解决了幻读问题。</strong></p>
<h2 id="三、MVCC-Multi-version-Concurrency-Control"><a href="#三、MVCC-Multi-version-Concurrency-Control" class="headerlink" title="三、MVCC(Multi version Concurrency Control)"></a>三、MVCC(Multi version Concurrency Control)</h2><p>每行记录存在多个版本。</p>
<p>对一行数据修改时，生成一条回滚记录，通过回滚记录可以读取之前版本的值。</p>
<h3 id="行记录的结构"><a href="#行记录的结构" class="headerlink" title="行记录的结构"></a>行记录的结构</h3><p>每个数据行有三个隐藏列，分别是:</p>
<p>1）DB_ROW_ID：未指定主键时，使用row_id作为主键。（实际上情况比这复杂，唯一非空索引优先级高于row_id）</p>
<p>2）DB_TRX_ID：数据行的版本号，实际就是最后一次修改数据行的事务id。</p>
<p>3）DB_ROLL_PTR：回滚指针，指向前一条undo log。</p>
<p>每一次对记录的修改（update/insert/delete）都会生成一条undo log，同时更新数据行的DB_TRX_ID为当前事务id，DB_ROLL_PTR指向新生成的undo log。</p>
<p>通过DB_ROLL_PTR，对同一行数据的多次修改会形成一条undo log链，在对数据查询时，可以通过DB_ROLL_PTR回溯之前版本的数据。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313164922.png" alt="image-20210313164919363"></p>
<h3 id="事务视图：ReadView实现"><a href="#事务视图：ReadView实现" class="headerlink" title="事务视图：ReadView实现"></a>事务视图：ReadView实现</h3><p><strong>note: ReadView与view是两个不同的概念</strong></p>
<p>先看一下源码（branch-8.0，storage\innobase\include\read0types.h）中定义的变量：</p>
<p>（这里注意到m_low_limit_id的值实际是将给下一个事务分配的id）</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313222759.png" alt="image-20210313091651980"></p>
<p><em>关于m_up_limit_id和m_low_limit_id的取值问题</em></p>
<p><em>1）m_low_limit_id：当前系统已分配的最大事务id+1，即将给下一个事务分配的事务id</em></p>
<p><em>2）m_up_limit_id：m_ids中的最小值，如果m_ids为空，则取当前最大事务id+1，即与m_low_limit_id相同。</em></p>
<p>事务启动（<em><strong>note: 事务的启动时机</strong></em>）时，生成一个数组，记录当前正在活跃（即已经开始、但还未提交）的事务id。数组中最小的事务id作为低水位，最大值作为高水位。id小于低水位的，说明在事务启动前已经提交了；事务id大于 高水位的，一定是未提交的事务。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313222745.png" alt="image-20210313091336048"></p>
<p>于是对于数据版本中的事务trx_id，有如下三种情况：</p>
<p>1）trx_id&lt;m_up_limit_id，trx_id一定是构造ReadView前已提交的事务，可见；</p>
<p>2）trx_id&gt;=m_low_limit_id,trx_id是构造ReadView时未开始的事务，不可见；</p>
<p>3）m_up_limit_id &lt;= trx_id &lt; m_low_limit_id，进一步判断trx_id是否在m_ids数组中，如果在，则属于未提交事务，不可见，否则属于已提交事务，可见。</p>
<h3 id="隔离级别与MVCC"><a href="#隔离级别与MVCC" class="headerlink" title="隔离级别与MVCC"></a>隔离级别与MVCC</h3><p>InnoDB通过MVCC机制实现事务的隔离。</p>
<p>在合适的时机（取决于语句和隔离级别）时，生成ReadView视图，通过ReadView实现对数据的一致性读取。每次需要读取某行数据时，就通过ReadView与undo log链来读取出当前事务可见的最新数据。</p>
<p>不同的隔离级别下，ReadView的构造时机不同。</p>
<h4 id="RC-Read-Committed"><a href="#RC-Read-Committed" class="headerlink" title="RC(Read Committed)"></a>RC(Read Committed)</h4><p>每次执行select时都要生成一次新的ReadView，所以RC下，同一个事务内部两次select之间，可能读到新提交的数据，存在不可重复读和幻读问题。</p>
<h4 id="RR-Read-Repeated"><a href="#RR-Read-Repeated" class="headerlink" title="RR(Read Repeated)"></a>RR(Read Repeated)</h4><p>第一次执行读语句（即select）时生成ReadView，同一个事务内部的多次select使用同一个ReadView。由于视图一致，所以不会出现不可重复读和幻读问题。</p>
<p><em>但是事务开启的方式也会影响ReadView构造时机。</em></p>
<h4 id="RR-ReadView与事务开启的方式"><a href="#RR-ReadView与事务开启的方式" class="headerlink" title="RR: ReadView与事务开启的方式"></a>RR: ReadView与事务开启的方式</h4><p>开启事务的方式也会影响ReadView的构造时机:</p>
<p>1）Begin/Start transaction: 第一次读（select）数据时构造ReadView；</p>
<p>2）Start transaction with consistent snapshot：事务开启的时候就会构造ReadView。</p>
<p><strong><em>note: 对数据修改（update/insert/delete）时不会构造ReadView</em>。</strong></p>
<h3 id="ReadView、当前读与快照读"><a href="#ReadView、当前读与快照读" class="headerlink" title="ReadView、当前读与快照读"></a>ReadView、当前读与快照读</h3><p>1）当前读：数据更新语句（update/insert/delete）总是先读后写的，而且总是读最新的数据，称为’当前读’。</p>
<p>2）快照读：数据查询（select）在构造的ReadView进行读操作，称为’快照读‘。</p>
<p>对于当前读，总是通过加锁的方式实现并发控制。</p>
<p><em><strong>note: select语句加锁时（e.g. in share mode）也是当前读。</strong></em></p>
<h2 id="四、MVCC与索引"><a href="#四、MVCC与索引" class="headerlink" title="四、MVCC与索引"></a>四、MVCC与索引</h2><p><em>问题引入：前文讲到，MVCC通过ReadView来构造一致性视图，而实际上，每次要读某行数据时，都是通过事务id和undo log动态计算出当前事务可见的最新数据。那么，索引里的数据总是最新的吗？每个事务读数据时还能否使用索引呢？如果能，又该如何使用？</em></p>
<p>对于InnoDB而言，索引可以分为主键索引和非主键索引两类，或者说是聚簇索引和非聚簇索引两类。</p>
<p>先看数据结构：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313164722.png" alt="image-20210313164655746"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313164724.png" alt="image-20210313164717853"></p>
<p>对于非聚簇索引页，max_trx_id表示更新过此页面的最大事务id。</p>
<p>delete bit是删除标志位。（<em><strong>只从网上查到，未能确认该字段格式等信息</strong></em>）</p>
<h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>使用主键索引查询数据的时候，由于叶子节点保存了完整的数据行信息，可以根据db_trx_id和db_roll_ptr读取出该事务可见的最新数据。</p>
<h3 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h3><p>对于非聚簇索引，情况如下：</p>
<p>1）max_trx_id &lt; m_up_limit_id，可见；否则需要进一步取db_trx_id进行可见性判断；</p>
<p>2）利用索引下推优化。判断该行记录是否满足查询条件，以减少回表（查聚簇索引）次数；</p>
<p>3）满足ICP条件，查询聚簇索引，利用db_trx_id和db_roll_ptr构造视图。</p>
<h2 id="五、争论"><a href="#五、争论" class="headerlink" title="五、争论"></a>五、争论</h2><h3 id="（一）MVCC幻读问题"><a href="#（一）MVCC幻读问题" class="headerlink" title="（一）MVCC幻读问题"></a>（一）MVCC幻读问题</h3><p><em>问题：MVCC存在幻读问题</em></p>
<p><strong>解释</strong></p>
<p>实际更确切的描述是：MVCC机制下，快照读解决了幻读问题，但是当前读会存在幻读问题。</p>
<p>一段网络原文（见参考七）：</p>
<blockquote>
<h2 id="快照读–只针对Select操作"><a href="#快照读–只针对Select操作" class="headerlink" title="快照读–只针对Select操作"></a>快照读–只针对Select操作</h2><p>MVCC的机制。快照读不会产生幻读。因为ReadView生成后就不会发生变化</p>
<h2 id="当前读–针对数据修改操作"><a href="#当前读–针对数据修改操作" class="headerlink" title="当前读–针对数据修改操作"></a>当前读–针对数据修改操作</h2><p>每次执行都会读取最新的记录。（假设要update一条记录，但是在另一个事务中已经delete掉这条数据并且commit了，如果update就会产生冲突，所以在update的时候需要知道最新的数据。）</p>
<p>结论：<strong>MVCC的机制会使Select语句的快照读避免幻读，但是对于当前读的操作依然会出现幻读。</strong> </p>
<p>例子：假如A事务正在查询id&lt;10的所有数据，只存在id为1~7的数据，8、9并不存在，此时B事务向数据库插入id为8的数据，那么事务A就会出现幻读现象，本来是不存在id为8的数据的，但是像出现幻觉一样读取到了，这就是幻读。</p>
<p>解决办法：加上next-key锁（也就是行锁+gap锁），gap锁会锁着id为8、9的两个位置，阻止事务A读取数据的时候，事务B向数据库插入数据，这样就避免幻读了。</p>
<p>结论：</p>
<ul>
<li>在快照读情况下，MySQL通过mvcc来避免幻读。</li>
<li>在当前读情况下，MySQL通过next-key来避免幻读</li>
</ul>
</blockquote>
<h3 id="（二）MySQL-在RR隔离级别下的幻读问题"><a href="#（二）MySQL-在RR隔离级别下的幻读问题" class="headerlink" title="（二）MySQL 在RR隔离级别下的幻读问题"></a>（二）MySQL 在RR隔离级别下的幻读问题</h3><p>引用网络图片（图源参考九）：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210324191537.png" alt="MySQL RR幻读问题"></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>​    RR出现幻读的原因是，session1对新插入的行进行了修改操作，导致对应行记录的trx_id被修改为session1的事务id，于是第二次读取时直接读取了最新的记录。</p>
<h3 id="（三）总结"><a href="#（三）总结" class="headerlink" title="（三）总结"></a>（三）总结</h3><p>综合上面两点，当前读下，MySQL RR其实没有完全解决幻读。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://mysql.taobao.org/monthly/2015/12/01/">参考一: MySQL · 引擎特性 · InnoDB 事务子系统介绍</a></p>
<p><a href="https://www.zhihu.com/question/27674363/answer/38034982">参考二: MVCC和覆盖索引查询</a></p>
<p><a href="https://chenjiayang.me/2019/06/22/mysql-innodb-mvcc/">参考三: MySQL InnoDB MVCC 机制的原理及实现(提到一个争论点，尽管该争论点实际并不存在争论)</a></p>
<p><a href="https://juejin.cn/post/6844903778026536968">参考四: 五分钟搞清楚 MVCC 机制(语句执行分析和案例)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/66791480">参考五: 一文理解Mysql MVCC</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html">参考六: InnoDB Multi-Versioning</a></p>
<p><a href="https://www.zhihu.com/question/334408495">参考七: 既然MySQL中InnoDB使用MVCC，为什么REPEATABLE-READ不能消除幻读？</a></p>
<p><a href="https://chenguoji.com/2019/05/21/mysql-dao-di-shi-zen-me-jie-jue-huan-du-de/">参考八: MySQL 到底是怎么解决幻读的？(提到一个github讨论)</a></p>
<p><a href="http://mysql.taobao.org/monthly/2017/06/07/">参考九: 数据库内核月报: MySQL · 源码分析 · InnoDB Repeatable Read隔离级别之大不同</a></p>
<p><a href="https://bugs.mysql.com/bug.php?id=63870">参考十: MySQL RR下的幻读是不是Bug</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-表删除</title>
    <url>/IT/MySQL/MySQL-%E8%A1%A8%E5%88%A0%E9%99%A4.html</url>
    <content><![CDATA[<h1 id="MySQL-删除表"><a href="#MySQL-删除表" class="headerlink" title="MySQL-删除表"></a>MySQL-删除表</h1><p>MySQL删除表三种操作：</p>
<ul>
<li>delete</li>
<li>truncate</li>
<li>drop</li>
</ul>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul>
<li>逐行删除，可以添加过滤条件（where）</li>
<li>删除过程生成undo日志记录</li>
<li>删除后，磁盘空间不释放</li>
<li>不影响表结构</li>
</ul>
<h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><ul>
<li>清空表内数据，无法应用过滤条件</li>
<li>不影响表结构</li>
</ul>
<h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><ul>
<li>删除整张表，包括表结构</li>
</ul>
<h2 id="删除方式对比"><a href="#删除方式对比" class="headerlink" title="删除方式对比"></a>删除方式对比</h2><table>
<thead>
<tr>
<th></th>
<th>truncate</th>
<th>delete</th>
<th>drop</th>
</tr>
</thead>
<tbody><tr>
<td>执行过程</td>
<td>DDl,不走事务，不记录undo log，不触发trigger</td>
<td>DML,事务，记录redo和undo log，支持where，触发trigger</td>
<td>DDL,不走事务</td>
</tr>
<tr>
<td>auto_increment</td>
<td>重置auto_increment</td>
<td>不影响auto_increment(v8.0之前auto_increment保存在内存中，重启MySQL后会影响到auto_increment)</td>
<td>–</td>
</tr>
<tr>
<td>磁盘空间</td>
<td>立即删除</td>
<td>只标记为删除，不做实际删除（被标记的磁盘空间可以被复用）</td>
<td>立即删除</td>
</tr>
<tr>
<td>表结构</td>
<td>无影响</td>
<td>无影响</td>
<td>删除表结构</td>
</tr>
</tbody></table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/270331768">参考一: MySQL 的 delete、truncate、drop 有什么区别?</a></p>
<p><a href="https://www.jishuchi.com/read/mysql-interview/2807">参考二: MySQL drop,delete与truncate的区别</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安装</title>
    <url>/IT/MySQL/MySQL%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<h1 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h1><p>一、安装<a href="https://dev.mysql.com/downloads/repo/yum/">mysql80.rpm</a></p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -i mysql80-community-release-el8-1.noarch.rpm</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>二、yum安装</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用操作</title>
    <url>/IT/MySQL/MySQL%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<hr>
<p>title: “MySQL常用操作”<br>isCJKLanguage: true<br>date: 2021-08-03 11:09:10<br>categories: </p>
<ul>
<li>IT</li>
<li>MySQL<br>tags: </li>
<li>MySQL</li>
</ul>
<hr>
<h1 id="MySQL常用操作"><a href="#MySQL常用操作" class="headerlink" title="MySQL常用操作"></a>MySQL常用操作</h1><ul>
<li><p>查看数据库和表</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>查看表结构</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc table_name;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>查看表上的索引信息</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show index from table_name;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>查看执行计划</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain sql_stat;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>添加列</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table table_name add column column_name varchar(10);</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>添加索引</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table ttt add index idx_t1(name, num);</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>查看和修改事务隔离级别</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@global.transaction_isolation;</span><br><span class="line">select @@session.transaction_isolation;</span><br><span class="line"></span><br><span class="line">set global|session transaction isolation level REPEATABLE READ|READ COMMITTED|READ UNCOMMITTED|SERIALIZABLE;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><a href="https://dev.mysql.com/doc/refman/8.0/en/set-transaction.html">官网文档: 13.3.7 SET TRANSACTION 语句</a></p>
</li>
<li><p>查看建表语句</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table table_name;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>查看版本</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &quot;%version%&quot;;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日志-Redo Log与Binlog</title>
    <url>/IT/MySQL/MySQL%E6%97%A5%E5%BF%97-Redo%20Log%E4%B8%8EBinlog.html</url>
    <content><![CDATA[<h1 id="MySQL日志系统-Redo-Log与Binlog"><a href="#MySQL日志系统-Redo-Log与Binlog" class="headerlink" title="MySQL日志系统-Redo Log与Binlog"></a>MySQL日志系统-Redo Log与Binlog</h1><h2 id="一、Bin-Log"><a href="#一、Bin-Log" class="headerlink" title="一、Bin Log"></a>一、Bin Log</h2><p>Bin Log是MySQl服务层的日志。</p>
<h2 id="二、Redo-Log"><a href="#二、Redo-Log" class="headerlink" title="二、Redo Log"></a>二、Redo Log</h2><h3 id="1、为什么要有redo-log？"><a href="#1、为什么要有redo-log？" class="headerlink" title="1、为什么要有redo log？"></a>1、为什么要有redo log？</h3><p>网上资料都会提到一点：redo log是追加写入。</p>
<blockquote>
<p>MySQL为了减少磁盘的随机IO，因此不会直接更新磁盘数据，而是先更新内存中的数据页，等到合适的时机再对数据页刷盘。而又为了防止MySQL或系统崩溃宕机等问题，又引入了redo log，为crash提供重做恢复机制。</p>
</blockquote>
<p>往往还会提到一点：</p>
<blockquote>
<p>redo log是追加写入，性能要高于数据页的随机写。</p>
</blockquote>
<p>但是产生了一个疑问是：<em>对于某个数据页（mysql数据页默认16K）而言，一般而言最多需要四寻址即可定位到磁盘位置（Linux逻辑块大小一般4K，即需要寻址四次），之后都是顺序写入。而反观redo log，写入的时候，必然也要定位到磁盘位置，然后进行写入，并不能看出明显的性能优势，那么，网上说的redo log追加写入性能高到底是为什么呢？</em></p>
<p>解答：</p>
<p><em>1）设想，一次update/delete/insert可能会影响很多个数据页，而对于每个数据页都需要写回磁盘，而每个数据页的写回，都需要至少一次（通常是16K/4K=4次）的寻道-旋转-传输，这必然大大损耗性能。再看redo log，它记录的是每个数据页的修改，而一页redo log上，可以记录多个数据页的修改，因此需要写回的redo log数据页远少于数据页，这也就大大减少了IO次数（猜想这也是追加写入由于随即写入的原因）。</em></p>
<p><em>2）数据页可能只被修改了一小部分，但仍然需要写回整页，这增加了不必要的传输字节数。而redo log只记录了数据页的修改，写回的也只是记录下的修改部分，传输量少于数据页。</em></p>
<h3 id="2、关于redo-log"><a href="#2、关于redo-log" class="headerlink" title="2、关于redo log"></a>2、关于redo log</h3><p>1）redo log记录了数据页的修改；它记录的是“数据页pageN上，偏移量offset处写入n个字节”，引用网络图片：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210319125039.png" alt="redo log通用日志类型"></p>
<p>2）redo log是InnoDB特有的日志。</p>
<h3 id="3、两阶段提交"><a href="#3、两阶段提交" class="headerlink" title="3、两阶段提交"></a>3、两阶段提交</h3><h4 id="更新语句执行流程"><a href="#更新语句执行流程" class="headerlink" title="更新语句执行流程"></a>更新语句执行流程</h4><p>a.查找对应的记录，找到对应的数据页，如果数据页在内存中，将更新写入内存中的数据页，否则先从磁盘读入数据页后再进行更新；</p>
<p>b.更新内存中的数据页后暂不写回，而是等待合适的时机再进行刷盘。此时要记录redo log，redo log写入到内存中的缓冲区(log buffer);</p>
<p>c.执行“commit”，发起提交，磁盘写redo log，然后生成bin log写入磁盘。</p>
<p><em>note: 此时的磁盘写redo log不一定真的写回了磁盘，可能只是写入到了操作系统的页缓存中。</em></p>
<h4 id="事务提交和日志刷盘"><a href="#事务提交和日志刷盘" class="headerlink" title="事务提交和日志刷盘"></a>事务提交和日志刷盘</h4><p>两阶段提交：事务提交时执行的动作：</p>
<ul>
<li><p>a. 将内存中的redo log写回磁盘，并标记为‘prepare’；</p>
</li>
<li><p>b. 生成binlog写入磁盘；</p>
</li>
<li><p>c. 更新对应的redo log为‘commit’。</p>
<p><em>每条更新语句都会生成redo log记录，但是只有执行commit的时候才会主动进行redo log落盘。但是此处是有可能出现被动刷盘的（内存不足等情况）。</em></p>
</li>
</ul>
<h5 id="innodb-flush-log-at-trx-commit"><a href="#innodb-flush-log-at-trx-commit" class="headerlink" title="innodb_flush_log_at_trx_commit"></a>innodb_flush_log_at_trx_commit</h5><ul>
<li>取值为0：每秒写入到os cache并flush到磁盘，此时commit指令与redo log落盘无关；</li>
<li>取值为1：每次commit写入os cache并flush到磁盘；</li>
<li>取值为2：每次commit写入os cache，每秒进行一次flush disk动作。</li>
</ul>
<h5 id="sync-binlog"><a href="#sync-binlog" class="headerlink" title="sync_binlog"></a>sync_binlog</h5><ul>
<li>取值为0：由OS控制flush到磁盘的时机；</li>
<li>取值为N：每写入N条记录flush一次磁盘。</li>
</ul>
<h4 id="崩溃恢复"><a href="#崩溃恢复" class="headerlink" title="崩溃恢复"></a>崩溃恢复</h4><ul>
<li><p>a. 读取redo log并应用，如果redo标识为’commit‘，进行提交；</p>
</li>
<li><p>b. 如果redo log标识为’prepare‘，需要读取binlog：</p>
<ul>
<li><p>aa. 如果binlog存在且完整，提交事务；</p>
</li>
<li><p>bb. 否则，回滚事务。</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20211102101742.webp" alt="redo log与undo log"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/intro/100020801">参考一: 极客时间 MySQL45讲: 第一和十五讲</a></p>
<p><a href="http://mysql.taobao.org/monthly/2020/02/01/">参考二: 数据库内核月报: MySQL · 引擎特性 · 庖丁解InnoDB之REDO LOG</a></p>
<p><a href="http://mysql.taobao.org/monthly/2015/05/01/">参考三: 数据库内核月报: MySQL · 引擎特性 · InnoDB redo log漫游</a></p>
<p><a href="http://mysql.taobao.org/monthly/2015/06/01/">参考四: 数据库内核月报: MySQL · 引擎特性 · InnoDB 崩溃恢复过程</a></p>
<p><a href="https://gsmtoday.github.io/2019/02/08/how-update-executes-in-mysql/">参考五: 一条更新语句在MySQL是怎么执行的</a></p>
<p><a href="https://juejin.cn/post/6895265596985114638">参考六: Innodb引擎 · 基础模块篇(三) · 详解redo log存储结构</a></p>
<p><a href="https://segmentfault.com/a/1190000017888478">浅析MySQL事务中的redo与undo</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Using where与ICP</title>
    <url>/IT/MySQL/Using%20where%E4%B8%8EICP.html</url>
    <content><![CDATA[<h1 id="MySQL-Using-where与ICP"><a href="#MySQL-Using-where与ICP" class="headerlink" title="MySQL-Using where与ICP"></a>MySQL-Using where与ICP</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>引用自官网：</p>
<blockquote>
<ul>
<li><p><code>Using index condition</code> (JSON property: <code>using_index_condition</code>)</p>
<p>Tables are read by accessing index tuples and testing them first to determine whether to read full table rows. In this way, index information is used to defer (“push down”) reading full table rows unless it is necessary. See <a href="https://dev.mysql.com/doc/refman/8.0/en/index-condition-pushdown-optimization.html">Section 8.2.1.6, “Index Condition Pushdown Optimization”</a>.</p>
</li>
<li><p>A <code>WHERE</code> clause is used to restrict which rows to match against the next table or send to the client. Unless you specifically intend to fetch or examine all rows from the table, you may have something wrong in your query if the <code>Extra</code> value is not <code>Using where</code> and the table join type is <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#jointype_all"><code>ALL</code></a> or <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#jointype_index"><code>index</code></a>.</p>
<p><code>Using where</code> has no direct counterpart in JSON-formatted output; the <code>attached_condition</code> property contains any <code>WHERE</code> condition used.</p>
</li>
</ul>
</blockquote>
<p>Using index condition表示使用了ICP。ICP(Index Condition push)是MySQL5.6引入的一项优化，是将where条件中可以使用索引字段的部分条件下放到存储引擎层，由引擎层在访问索引时进行过滤，这样可以减少回表次数以及引擎层与MySQL服务器间的交互数据量。</p>
<p>Using where用于限制需要发送的结果集。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>Using where是否表示引擎层取数据后在服务层根据where做了过滤？</li>
<li>仅根据索引过滤时是否会显示Using where？</li>
</ul>
<h2 id="出现的场景"><a href="#出现的场景" class="headerlink" title="出现的场景"></a>出现的场景</h2><p>建表</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table ttt(</span><br><span class="line">	id int auto_increment primary key,</span><br><span class="line">	name varchar(10),</span><br><span class="line">	num int,</span><br><span class="line">	descript varchar(30)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>分别在name，num以及（name, num）列上创建索引，索引结构如图：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210805163401.png" alt="image-20210805163354585"></p>
<p>表中数据如图：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210805163801.png" alt="image-20210805163801217"></p>
<h3 id="测试一：等值查询"><a href="#测试一：等值查询" class="headerlink" title="测试一：等值查询"></a>测试一：等值查询</h3><p>执行语句及输出：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select num from ttt where num=12\G</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: ttt</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ref</span><br><span class="line">possible_keys: idx_t1,idx_tx3</span><br><span class="line">          key: idx_tx3</span><br><span class="line">      key_len: 5</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="测试二：范围查询"><a href="#测试二：范围查询" class="headerlink" title="测试二：范围查询"></a>测试二：范围查询</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select num from ttt where num&gt;12\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: ttt</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: range</span><br><span class="line">possible_keys: idx_t1,idx_tx3</span><br><span class="line">          key: idx_tx3</span><br><span class="line">      key_len: 5</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 2</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where; Using index</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; explain select num from ttt where num&gt;=12\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: ttt</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: range</span><br><span class="line">possible_keys: idx_t1,idx_tx3</span><br><span class="line">          key: idx_tx3</span><br><span class="line">      key_len: 5</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where; Using index</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="测试三：范围查询（满足ICP使用条件）"><a href="#测试三：范围查询（满足ICP使用条件）" class="headerlink" title="测试三：范围查询（满足ICP使用条件）"></a>测试三：范围查询（满足ICP使用条件）</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from ttt force index(idx_tx3) where num&gt;=12\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: ttt</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: range</span><br><span class="line">possible_keys: idx_tx3</span><br><span class="line">          key: idx_tx3</span><br><span class="line">      key_len: 5</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 3</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using index condition</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="测试四：范围查询（全表扫描）"><a href="#测试四：范围查询（全表扫描）" class="headerlink" title="测试四：范围查询（全表扫描）"></a>测试四：范围查询（全表扫描）</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from ttt where num&gt;=12\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: ttt</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: idx_tx3</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 4</span><br><span class="line">     filtered: 75.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>Using where表示对数据进行了过滤；</li>
<li>满足ICP条件时，显示Using index condition，需要服务层过滤时显示Using where。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/kerrycode/p/9909093.html">[1] MySQL 执行计划中Extra(Using where,Using index,Using index condition,Using index,Using where)的浅析</a></p>
<p><a href="https://www.jianshu.com/p/89ec04641e72">[2] 转发: SQL中的where条件，在数据库中提取与应用浅析</a></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/index-condition-pushdown-optimization.html">[3] 官网文档: index-condition-pushdown-optimization</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>事务</title>
    <url>/IT/MySQL/%E4%BA%8B%E5%8A%A1.html</url>
    <content><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="innodb查询事务"><a href="#innodb查询事务" class="headerlink" title="innodb查询事务"></a>innodb查询事务</h2><p>通过information_schema.trx表查询当前活跃的事务：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trx_id <span class="keyword">from</span> information_schema.innodb_trx;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="开启事务的方式"><a href="#开启事务的方式" class="headerlink" title="开启事务的方式"></a>开启事务的方式</h2><p>1）auto commit; 隐式启动事务，由mysql自动提交；</p>
<p>2）begin；</p>
<p>3）start transaction;</p>
<p>4）start transaction with consistent snapshot;</p>
<p>5）start transaction read only;</p>
<p>6）start transaction/start transaction read write;</p>
<h2 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h2><p>1）显示提交；</p>
<p>2）隐式提交：开启一条事务后，不执行commit动作，再次显式开启一条新事务时，上一条事务会被隐式提交。</p>
<p>如图，session2显示开启一条事务，在session1查到事务id: 54875，此时session2再次执行begin，发现上一条事务已经被提交。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313175724.png" alt="image-20210313175552472"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313175726.png" alt="image-20210313175720753"></p>
<h2 id="事务ID与分配时机"><a href="#事务ID与分配时机" class="headerlink" title="事务ID与分配时机"></a>事务ID与分配时机</h2><h3 id="事务ID"><a href="#事务ID" class="headerlink" title="事务ID"></a>事务ID</h3><h4 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h4><p>开启事务后，查询事务ID，发现：</p>
<p>1）同一个session，前后两条只执行select语句的事务，ID相同；</p>
<p>2）分别执行只读事务和读写事务，发现事务ID风格迥然不同，如图，分别为只读事务id 284353550547608和读写事务id 54877。</p>
<p>3）如果一个事务开启后，首先执行select语句，查到的事务id类似上文只读事务id，同一个事务内再执行一次update/insert/delete语句，事务id发生变化；</p>
<p>4）事务开启后，首先执行数据更新语句，后执行select语句，事务id不变。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210313222814.png" alt="image-20210313180313818"></p>
<h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>mysql5.7开始，只为读写事务分配事务ID，只读事务得ID默认为0。只有需要输出事务ID时才会由trx_get_id_for_print计算出一个事务ID。（见参考一）</p>
<h3 id="事务ID的分配时机"><a href="#事务ID的分配时机" class="headerlink" title="事务ID的分配时机"></a>事务ID的分配时机</h3><p>1）执行begin/start transaction后，并不会为事务分配ID。</p>
<p>直到执行第一条数据查询语句（select/update/insert/delete）的时候才会实际分配ID；</p>
<p>2）start transatcion with consistent snapshot：该语句执行后立即分配ID。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://mysql.taobao.org/monthly/2015/12/01/">参考一: MySQL · 引擎特性 · InnoDB 事务子系统介绍</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>secure_link</title>
    <url>/IT/Nginx/secure_link.html</url>
    <content><![CDATA[<h1 id="secure-link"><a href="#secure-link" class="headerlink" title="secure_link"></a>secure_link</h1><p>python</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">future = datetime.datetime.now() + datetime.timedelta(minutes=<span class="number">5</span>)</span><br><span class="line">url = <span class="string">&quot;/securedir/file.txt&quot;</span></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.mktime(future.timetuple()))</span><br><span class="line">security = base64.b64encode(hashlib.md5( secret ).digest()).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">data = <span class="built_in">str</span>(url) + <span class="string">&quot;?st=&quot;</span> + <span class="built_in">str</span>(security) + <span class="string">&quot;&amp;e=&quot;</span> + <span class="built_in">str</span>(timestamp)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python垃圾回收机制</title>
    <url>/IT/Python/Python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html</url>
    <content><![CDATA[<h1 id="Python-垃圾回收机制"><a href="#Python-垃圾回收机制" class="headerlink" title="Python-垃圾回收机制"></a>Python-垃圾回收机制</h1><p>Python 使用引用计数的方式管理内存，为了解决循环引用的问题又引入了标记-清除和分代回收机制。</p>
<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Python为每个对象都维护了一个引用计数器：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    _PyObject_HEAD_EXTRA</span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    PyTypeObject *ob_type;</span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>程序运行过程中更新ob_refcnt的值，引用计数降为0的时候释放对象（如果还对象内部持有对其他对象的引用，则还需要递减这些对象的引用计数）(cpython/Include/object.h line 439)：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> _Py_DECREF(</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Py_REF_DEBUG</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> lineno,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    PyObject *op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Py_REF_DEBUG</span></span><br><span class="line">    _Py_RefTotal--;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (--op-&gt;ob_refcnt != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Py_REF_DEBUG</span></span><br><span class="line">        <span class="keyword">if</span> (op-&gt;ob_refcnt &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            _Py_NegativeRefcount(filename, lineno, op);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        _Py_Dealloc(op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p>
<ul>
<li>简单</li>
<li>实时性好，可以立即释放无用对象，且分摊了垃圾收集的时间</li>
</ul>
<p>缺点：</p>
<ul>
<li>循环引用问题</li>
<li>成本：假如一个容器对象内部持有大量其他对象的引用，那么释放该容器的时候需要遍历容器内部所有对象，处理其引用计数</li>
</ul>
<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>看一段示例代码：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">l1 = []</span><br><span class="line">l2 = []</span><br><span class="line"></span><br><span class="line">l1.append(l2)</span><br><span class="line">l2.append(l1)</span><br><span class="line"></span><br><span class="line">sys.getrefcount(l1) <span class="comment"># 输出3，比预期多一</span></span><br><span class="line">sys.getrefcount(l2) <span class="comment"># 输出3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> l1</span><br><span class="line">sys.getrefcount(l2[<span class="number">0</span>]) <span class="comment"># 输出2</span></span><br><span class="line">sys.getrefcount(l2)    <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>解释：为什么getrefcount显示的引用是3，而不是2：</p>
<blockquote>
<p><code>sys.``getrefcount</code>(<em>object</em>)</p>
<p>返回 <em>object</em> 的引用计数。返回的计数通常比预期的多一，因为它包括了作为 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.getrefcount"><code>getrefcount()</code></a> 参数的这一次（临时）引用。</p>
</blockquote>
<p>示例中l1与l2相互引用，在执行del l1后，预期的l2引用计数应当是1，但结果显示仍旧是2（getrefcount的输出减一才是此刻实际的引用计数）。</p>
<p>原因：del l1会将l1对象的引用计数减一，但减一后，引用计数为1，对象不会被销毁，因而不会递减它所持有的其他对象的引用计数，于是l2的引用计数依然是2。这就是循环引用问题。</p>
<h2 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h2><p>Python使用标记-清除算法来解决循环引用问题。</p>
<p>主要过程（cpython/Modules/gcmodule.c line 1069 deduce_unreachable）：</p>
<blockquote>
<ol>
<li>Copy all reference counts to a different field (gc_prev is used to hold</li>
</ol>
<p>  this copy to save memory).</p>
<ol start="2">
<li>Traverse all objects in “base” and visit all referred objects using</li>
</ol>
<p>  “tp_traverse” and for every visited object, subtract 1 to the reference</p>
<p>  count (the one that we copied in the previous step). After this step, all</p>
<p>  objects that can be reached directly from outside must have strictly positive</p>
<p>  reference count, while all unreachable objects must have a count of exactly 0.</p>
<ol start="3">
<li>Identify all unreachable objects (the ones with 0 reference count) and move</li>
</ol>
<p>  them to the “unreachable” list. This step also needs to move back to “base” all</p>
<p>  objects that were initially marked as unreachable but are referred transitively</p>
<p>  by the reachable objects (the ones with strictly positive reference count).</p>
</blockquote>
<ul>
<li><p>1、将链表中每个对象的引用数复制到gc_ref字段；</p>
</li>
<li><p>2、遍历链表中的对象，将当前对象内部引用的对象的计数减一。这一步执行后，依然存在外部变量引用的对象计数大于0，而只在其他对象内部引用的对象计数等于0；</p>
</li>
<li><p>3、识别出不可达对象（引用计数等于0），移到不可达链表中。被可达对象持有引用的对象也要从不可达链表中移除。</p>
<p>网络图片：</p>
<p><img src="https://pic2.zhimg.com/v2-d7314ead6b303f08a91687577c045585_r.jpg" alt="preview"></p>
</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>每次进行标记-清除回收对象的时候，都会暂停整个应用程序，因此，标记-清除检测的频率设置就变得十分重要，也正因此，又引入了分代回收机制。</p>
<h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>分代回收建立于标记-清除的基础之上。空间换时间。</p>
<p>分代回收的目的是对垃圾回收检测的频率进行控制。</p>
<p>Python中分为三代：从0代到3代，扫描间隔越来越长。</p>
<p>每次扫描某代的时候，比其更年轻的代也会被扫描。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.python.org/zh-cn/3/c-api/intro.html#objects-types-and-reference-counts">[1] 官网文档: 对象、类型和引用计数</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/83251959">[2] Python垃圾回收机制！非常实用</a></p>
<p><a href="https://www.jianshu.com/p/1e375fb40506">[3] [整理]Python垃圾回收机制–完美讲解!</a></p>
<p><a href="https://devguide.python.org/garbage_collector">[4] Python Developer’s Guide: Design of CPython’s Garbage Collector</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1509068">[5] Python 进阶：浅析「垃圾回收机制」</a></p>
<p><a href="https://www.cnblogs.com/traditional/p/13698244.html">[6]《深度剖析CPython解释器》28. Python内存管理与垃圾回收(第二部分)：源码解密Python中的垃圾回收机制</a></p>
<p><a href="https://wklken.me/posts/2015/09/29/python-source-gc.html">[7] Python 源码阅读 - 垃圾回收机制</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>magic method</title>
    <url>/IT/Python/magic%20method.html</url>
    <content><![CDATA[<h1 id="Magic-method"><a href="#Magic-method" class="headerlink" title="Magic method"></a>Magic method</h1><h2 id="del"><a href="#del" class="headerlink" title="_del_"></a>_<em>del</em>_</h2><p>__del__类似于析构函数，在对象销毁时调用</p>
<h3 id="e-g-1"><a href="#e-g-1" class="headerlink" title="e.g. 1:"></a>e.g. 1:</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;asd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="comment"># 会打印出asd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    a = A()</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line"><span class="comment"># 也会打印出asd, 因为a作为局部变量, 函数结束时被销毁</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>note: __del__被不是在调用del a时被调用，而是对象销毁时调用。</p>
<h3 id="e-g-2"><a href="#e-g-2" class="headerlink" title="e.g. 2"></a>e.g. 2</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;asd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a <span class="comment"># 不打印asd, 因为b持有对该对象的引用, 该对象还没被销毁</span></span><br><span class="line"><span class="keyword">del</span> b <span class="comment"># 打印asd, 引用变为0, 销毁对象, __del__被调用</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="属性访问相关"><a href="#属性访问相关" class="headerlink" title="属性访问相关"></a>属性访问相关</h2><p>_<em>getitem</em>_</p>
<p>_<em>setitem</em>_</p>
<p>_<em>delitem</em>_</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.a = <span class="number">123</span></span><br><span class="line">        self.b = <span class="number">56</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self, item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, item, value</span>):</span></span><br><span class="line">        <span class="built_in">setattr</span>(self, item, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">delattr</span>(self, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.a)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"></span><br><span class="line">a.c = <span class="number">78</span></span><br><span class="line"><span class="built_in">print</span>(a.__dict__)</span><br><span class="line"><span class="built_in">print</span>(a.c)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;d&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(a.__dict__)</span><br><span class="line"><span class="built_in">print</span>(a.d)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a.d</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(a))</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="迭代器相关"><a href="#迭代器相关" class="headerlink" title="迭代器相关"></a>迭代器相关</h2><p>_<em>iter</em>_: 返回一个迭代器对象</p>
<p>_<em>next</em>_: 进行迭代操作</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> AIterator(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AIterator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, src</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.idx = <span class="number">0</span></span><br><span class="line">        self.src = src</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.idx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.idx &gt; <span class="built_in">len</span>(self.src.val):</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">return</span> self.src.val[self.idx-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&#x27;1234567&#x27;</span>)</span><br><span class="line">ai = <span class="built_in">iter</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ai))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ai))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ai))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><p>_<em>enter</em>_</p>
<p>_<em>exit</em>_</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1570579">Python学习【魔术方法】</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>metaclass</title>
    <url>/IT/Python/metaclass.html</url>
    <content><![CDATA[<h1 id="python元类–MetaClass"><a href="#python元类–MetaClass" class="headerlink" title="python元类–MetaClass"></a>python元类–MetaClass</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类是对实例的抽象，元类是对类的描述。</p>
<p>使用metaclass关键字指定类的元类。</p>
<p>元类的实例对应的就是类。</p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMetaClass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    meta = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(cls.__name__)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">dir</span>(cls))</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;SubTest&#x27;</span>:</span><br><span class="line">            nw = <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">getattr</span>(nw, <span class="string">&#x27;metaaa&#x27;</span>))</span><br><span class="line">        attrs[<span class="string">&#x27;metaaa&#x27;</span>] = <span class="string">&#x27;TestMetaClass&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;attrs::::::::\n&quot;</span>, attrs)</span><br><span class="line">        <span class="built_in">print</span>(bases)</span><br><span class="line">        <span class="built_in">object</span>.__call__</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=================&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;************init***********************&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;asd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">metaclass=TestMetaClass</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.a = <span class="number">123</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Test---init===&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTest</span>(<span class="params">Test</span>):</span></span><br><span class="line">    sub = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;++++++++++&quot;</span>)</span><br><span class="line">    t = Test()</span><br><span class="line">    <span class="built_in">print</span>(t.__module__)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(t))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(SubTest))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>运行结果：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TestMetaClass</span><br><span class="line">Test</span><br><span class="line">[<span class="string">&#x27;__abstractmethods__&#x27;</span>, <span class="string">&#x27;__base__&#x27;</span>, <span class="string">&#x27;__bases__&#x27;</span>, <span class="string">&#x27;__basicsize__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dictoffset__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__flags__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__instancecheck__&#x27;</span>, <span class="string">&#x27;__itemsize__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__mro__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__prepare__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasscheck__&#x27;</span>, <span class="string">&#x27;__subclasses__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__text_signature__&#x27;</span>, <span class="string">&#x27;__weakrefoffset__&#x27;</span>, <span class="string">&#x27;meta&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>]</span><br><span class="line">attrs::::::::</span><br><span class="line"> &#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>: <span class="string">&#x27;Test&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Test&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;<span class="keyword">function</span> Test.__init__ at 0x00000282B4633D30&gt;, <span class="string">&#x27;metaaa&#x27;</span>: <span class="string">&#x27;TestMetaClass&#x27;</span>&#125;</span><br><span class="line">()</span><br><span class="line">=================</span><br><span class="line">************init***********************</span><br><span class="line">(<span class="string">&#x27;Test&#x27;</span>, (), &#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>: <span class="string">&#x27;Test&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Test&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;<span class="keyword">function</span> Test.__init__ at 0x00000282B4633D30&gt;, <span class="string">&#x27;metaaa&#x27;</span>: <span class="string">&#x27;TestMetaClass&#x27;</span>&#125;)</span><br><span class="line">asd</span><br><span class="line">TestMetaClass</span><br><span class="line">SubTest</span><br><span class="line">[<span class="string">&#x27;__abstractmethods__&#x27;</span>, <span class="string">&#x27;__base__&#x27;</span>, <span class="string">&#x27;__bases__&#x27;</span>, <span class="string">&#x27;__basicsize__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dictoffset__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__flags__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__instancecheck__&#x27;</span>, <span class="string">&#x27;__itemsize__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__mro__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__prepare__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasscheck__&#x27;</span>, <span class="string">&#x27;__subclasses__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__text_signature__&#x27;</span>, <span class="string">&#x27;__weakrefoffset__&#x27;</span>, <span class="string">&#x27;meta&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>]</span><br><span class="line">TestMetaClass</span><br><span class="line">attrs::::::::</span><br><span class="line"> &#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>: <span class="string">&#x27;SubTest&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>: True, <span class="string">&#x27;metaaa&#x27;</span>: <span class="string">&#x27;TestMetaClass&#x27;</span>&#125;</span><br><span class="line">(&lt;class <span class="string">&#x27;__main__.Test&#x27;</span>&gt;,)</span><br><span class="line">=================</span><br><span class="line">************init***********************</span><br><span class="line">(<span class="string">&#x27;SubTest&#x27;</span>, (&lt;class <span class="string">&#x27;__main__.Test&#x27;</span>&gt;,), &#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>: <span class="string">&#x27;SubTest&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>: True, <span class="string">&#x27;metaaa&#x27;</span>: <span class="string">&#x27;TestMetaClass&#x27;</span>&#125;)</span><br><span class="line">asd</span><br><span class="line">++++++++++</span><br><span class="line">Test---init===</span><br><span class="line">__main__</span><br><span class="line">[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;metaaa&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;metaaa&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>]</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="一点细节"><a href="#一点细节" class="headerlink" title="[一点细节]"></a>[一点细节]</h2><p>参数attrs仅包含该类中定义的属性和方法，不包括从其父类中继承的属性和方法。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis编译安装-失败问题解决</title>
    <url>/IT/Questions/Redis%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html</url>
    <content><![CDATA[<h1 id="Redis编译失败问题解决"><a href="#Redis编译失败问题解决" class="headerlink" title="Redis编译失败问题解决"></a>Redis编译失败问题解决</h1><p>redis版本：6.0.5</p>
<p>gcc版本：4.8.5</p>
<p>操作系统：Centos7.6.1810</p>
<p>执行make指令编译redis源码，出错如下：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201121124730.png" alt="image-20201121124723576"></p>
<p>解决：</p>
<p>编译指令使用</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make CC=clang PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>编译成功。</p>
<h2 id="问题分析及参考："><a href="#问题分析及参考：" class="headerlink" title="问题分析及参考："></a>问题分析及参考：</h2><p><a href="https://www.zhangfangzhou.cn/centos7-devtoolset9-gcc.html">参考一: 问题原因及解决方法</a></p>
<p><a href="https://www.gitmemory.com/issue/antirez/redis/6286/516992555">参考二: 解决方法</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Questions</category>
      </categories>
      <tags>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title>c-windows</title>
    <url>/IT/Questions/c-windows.html</url>
    <content><![CDATA[<h1 id="Questions-1-C代码编译通过无法运行"><a href="#Questions-1-C代码编译通过无法运行" class="headerlink" title="Questions-1 C代码编译通过无法运行"></a>Questions-1 C代码编译通过无法运行</h1><ul>
<li><p>环境：</p>
<ul>
<li>win10 64位</li>
<li>gcc</li>
</ul>
</li>
<li><p>现象</p>
<ul>
<li>gcc编译c代码通过，运行时显示无法在libmingwex中找到_emutls_get_address。</li>
</ul>
</li>
<li><p>解决</p>
<ul>
<li>在mingw中移除mingw32-libmingwex-dev和mingw32-libmingwex-dll两个包。<img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200830090702.png" alt="image-20200830090655739"></li>
</ul>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Questions</category>
      </categories>
      <tags>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title>docker consul跨主机网络不通</title>
    <url>/IT/Questions/docker%20consul%E8%B7%A8%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8D%E9%80%9A.html</url>
    <content><![CDATA[<h1 id="docker-跨主机overlay不通问题排查"><a href="#docker-跨主机overlay不通问题排查" class="headerlink" title="docker 跨主机overlay不通问题排查"></a>docker 跨主机overlay不通问题排查</h1><p>搭建过程见<a href="..%5CDocker%5CDocker-consul%E8%B7%A8%E4%B8%BB%E6%9C%BAOverlay%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA.md">dokcer跨主机overlay网络搭建</a>，搭建完后发现网络不通，执行</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -u docker.service</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>输出如图，明显有error，打开/var/log/messages，进一步看到是hostname冲突，</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017192949.png" alt="image-20201017192949361"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017202730.png" alt="image-20201017202730128"></p>
<p>修改hostname，重启服务器及服务后，还是存在error,关闭firewalld，重启docker服务，输出正常，此时不同服务器上的container实例可以正常通信。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017202829.png" alt="image-20201017202829687"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Questions</category>
      </categories>
      <tags>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title>winexe阻塞问题</title>
    <url>/IT/Questions/winexe%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="winexe远程调用Start-Process阻塞问题排查"><a href="#winexe远程调用Start-Process阻塞问题排查" class="headerlink" title="winexe远程调用Start-Process阻塞问题排查"></a>winexe远程调用Start-Process阻塞问题排查</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>环境：Centos7.5，winexe1.1，windows server2008</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winexe --user=&#x27;admin/1234&#x27; &#x27;//10.10.10.10&#x27; &quot;powershell (Start-Process C:\test.bat -ArgumentList &#x27;test&#x27; -PassThru -Wait).ExitCode&quot;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>执行上述命令后shell无输出，敲击回车后显示输出；</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winexe --user=&#x27;admin/1234&#x27; &#x27;//10.10.10.10&#x27; &quot;cmd /c echo . | powershell (Start-Process C:\test.bat -ArgumentList &#x27;test&#x27; -PassThru -Wait).ExitCode&quot;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>[参考一: <a href="https://serverfault.com/questions/437504/why-does-psexec-hang-after-successfully-running-a-powershell-script">Why does PsExec hang after successfully running a powershell script?</a></p>
<p><a href="https://www.leeholmes.com/blog/2007/10/02/using-powershell-and-psexec-to-invoke-expressions-on-remote-computers/">参考二: Using PowerShell and PsExec to invoke expressions on remote computers</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Questions</category>
      </categories>
      <tags>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title>AOF重写</title>
    <url>/IT/Redis/AOF%E9%87%8D%E5%86%99.html</url>
    <content><![CDATA[<h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p><strong>note: 本文参考代码基于Redis 6.0</strong></p>
<h2 id="AOF写入"><a href="#AOF写入" class="headerlink" title="AOF写入"></a>AOF写入</h2><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><ul>
<li><p>appendonly：yes/no，是否开启AOF</p>
</li>
<li><p>appendfsync：everysec/always/no</p>
<p>AOF日志刷盘时机：每秒刷盘/每次写入立即刷盘/有操作系统控制</p>
</li>
<li><p>no-appendfsync-on-rewrite：yes/no</p>
<p>RDB生成或者AOF重写期间是否阻止主进程调用fsync</p>
</li>
<li><p>AOF重写的控制条件：</p>
<ul>
<li>auto-aof-rewrite-percentage 100</li>
<li>auto-aof-rewrite-min-size 64mb</li>
</ul>
</li>
<li><p>aof-load-truncated: yes/no, AOF日志不完整时的处置方式</p>
</li>
<li><p>aof-use-rdb-preamble： yes/no，是否开启RDB/AOF混合持久化</p>
</li>
</ul>
<h3 id="AOF缓冲区写入过程"><a href="#AOF缓冲区写入过程" class="headerlink" title="AOF缓冲区写入过程"></a>AOF缓冲区写入过程</h3><p>redisServer中定义了一个aof写入缓冲区：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sds aof_buf;      <span class="comment">/* AOF buffer, written before entering the event loop */</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>每次执行写命令时会将命令追加到这个缓冲区，调用链：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210509174559.png" alt="AOF缓冲区写入过程"></p>
<h3 id="AOF文件写入"><a href="#AOF文件写入" class="headerlink" title="AOF文件写入"></a>AOF文件写入</h3><p>AOF文件写入的时机：</p>
<ul>
<li>每次写命令执行时，该命令已经被写入AOF缓冲区，在beforeSleep（该函数会在主进程进入事件循环等待前被调用）中会将缓冲区内容写入文件（不一定会刷盘）；</li>
<li>如果写入AOF时发现有sync在处理中，或者上次AOF写入有错误，则会在serverCron中执行AOF文件写操作；</li>
<li>主进程或者文件描述符关闭前执行写入。</li>
</ul>
<h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2><h3 id="AOF重写的触发条件"><a href="#AOF重写的触发条件" class="headerlink" title="AOF重写的触发条件"></a>AOF重写的触发条件</h3><p>src/server.c line 1845, server_cron函数中，周期性检查是否满足AOF重写条件：</p>
<p>代码片段一：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Trigger an AOF rewrite if needed. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.aof_state == AOF_ON &amp;&amp;</span><br><span class="line">            !hasActiveChildProcess() &amp;&amp;</span><br><span class="line">            server.aof_rewrite_perc &amp;&amp;</span><br><span class="line">            server.aof_current_size &gt; server.aof_rewrite_min_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> base = server.aof_rewrite_base_size ?</span><br><span class="line">                server.aof_rewrite_base_size : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> growth = (server.aof_current_size*<span class="number">100</span>/base) - <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">if</span> (growth &gt;= server.aof_rewrite_perc) &#123;</span><br><span class="line">                serverLog(LL_NOTICE,<span class="string">&quot;Starting automatic rewriting of AOF on %lld%% growth&quot;</span>,growth);</span><br><span class="line">                rewriteAppendOnlyFileBackground();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>代码片段二:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Start a scheduled AOF rewrite if this was requested by the user while</span></span><br><span class="line"><span class="comment">     * a BGSAVE was in progress. */</span></span><br><span class="line">    <span class="keyword">if</span> (!hasActiveChildProcess() &amp;&amp;</span><br><span class="line">        server.aof_rewrite_scheduled)</span><br><span class="line">    &#123;</span><br><span class="line">        rewriteAppendOnlyFileBackground();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>根据上面两个片段，总结重写条件为:</p>
<ul>
<li><p>AOF被激活；</p>
</li>
<li><p>没有活跃的子进程（未进行RDB保存、AOF重写，或某些加载模块产生的子进程?）；</p>
</li>
<li><p>当前aof文件大于auto-aof-rewrite-min-size（默认64MB）；</p>
</li>
<li><p>上次重写AOF文件以来，文件大小增长大于auto-aof-rewrite-percentage（默认100%）;</p>
</li>
</ul>
<h3 id="AOF-重写缓冲区"><a href="#AOF-重写缓冲区" class="headerlink" title="AOF 重写缓冲区"></a>AOF 重写缓冲区</h3><h4 id="AOF重写缓冲区相关的数据结构"><a href="#AOF重写缓冲区相关的数据结构" class="headerlink" title="AOF重写缓冲区相关的数据结构"></a>AOF重写缓冲区相关的数据结构</h4><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AOF_RW_BUF_BLOCK_SIZE (1024*1024*10)    <span class="comment">/* 10 MB per block */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aofrwblock</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used, <span class="built_in">free</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[AOF_RW_BUF_BLOCK_SIZE];</span><br><span class="line">&#125; aofrwblock;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>server.h redisServer中定义了重写缓冲区：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> *aof_rewrite_buf_blocks;   <span class="comment">/* Hold changes during an AOF rewrite. */</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<h4 id="重写缓冲区大小限制"><a href="#重写缓冲区大小限制" class="headerlink" title="重写缓冲区大小限制"></a>重写缓冲区大小限制</h4><p>重写缓冲区是个链表，无大小限制。内存达到max-memory后会触发内存淘汰策略。</p>
<h4 id="重写缓冲区写入操作"><a href="#重写缓冲区写入操作" class="headerlink" title="重写缓冲区写入操作"></a>重写缓冲区写入操作</h4><p>aof.c line 184, feedAppendOnlyFile:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/* If a background append only file rewriting is in progress we want to</span></span><br><span class="line"><span class="comment">     * accumulate the differences between the child DB and the current one</span></span><br><span class="line"><span class="comment">     * in a buffer, so that when the child process will do its work we</span></span><br><span class="line"><span class="comment">     * can append the differences to the new append only file. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_child_pid != <span class="number">-1</span>)</span><br><span class="line">        aofRewriteBufferAppend((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf,sdslen(buf));</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>aof.c line 95, aofRewriteBufferAppend:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Append data to the AOF rewrite buffer, allocating new blocks if needed. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aofRewriteBufferAppend</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">long</span> len)</span> </span>&#123;</span><br><span class="line">    listNode *ln = listLast(server.aof_rewrite_buf_blocks);</span><br><span class="line">    aofrwblock *block = ln ? ln-&gt;value : <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len) &#123;</span><br><span class="line">        <span class="comment">/* If we already got at least an allocated block, try appending</span></span><br><span class="line"><span class="comment">         * at least some piece into it. */</span></span><br><span class="line">        <span class="keyword">if</span> (block) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> thislen = (block-&gt;<span class="built_in">free</span> &lt; len) ? block-&gt;<span class="built_in">free</span> : len;</span><br><span class="line">            <span class="keyword">if</span> (thislen) &#123;  <span class="comment">/* The current block is not already full. */</span></span><br><span class="line">                <span class="built_in">memcpy</span>(block-&gt;buf+block-&gt;used, s, thislen);</span><br><span class="line">                block-&gt;used += thislen;</span><br><span class="line">                block-&gt;<span class="built_in">free</span> -= thislen;</span><br><span class="line">                s += thislen;</span><br><span class="line">                len -= thislen;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len) &#123; <span class="comment">/* First block to allocate, or need another block. */</span></span><br><span class="line">            <span class="keyword">int</span> numblocks;</span><br><span class="line"></span><br><span class="line">            block = zmalloc(<span class="keyword">sizeof</span>(*block));</span><br><span class="line">            block-&gt;<span class="built_in">free</span> = AOF_RW_BUF_BLOCK_SIZE;</span><br><span class="line">            block-&gt;used = <span class="number">0</span>;</span><br><span class="line">            listAddNodeTail(server.aof_rewrite_buf_blocks,block);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Log every time we cross more 10 or 100 blocks, respectively</span></span><br><span class="line"><span class="comment">             * as a notice or warning. */</span></span><br><span class="line">            numblocks = listLength(server.aof_rewrite_buf_blocks);</span><br><span class="line">            <span class="keyword">if</span> (((numblocks+<span class="number">1</span>) % <span class="number">10</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> level = ((numblocks+<span class="number">1</span>) % <span class="number">100</span>) == <span class="number">0</span> ? LL_WARNING :</span><br><span class="line">                                                         LL_NOTICE;</span><br><span class="line">                serverLog(level,<span class="string">&quot;Background AOF buffer size: %lu MB&quot;</span>,</span><br><span class="line">                    aofRewriteBufferSize()/(<span class="number">1024</span>*<span class="number">1024</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Install a file event to send data to the rewrite child if there is</span></span><br><span class="line"><span class="comment">     * not one already. */</span></span><br><span class="line">    <span class="keyword">if</span> (aeGetFileEvents(server.el,server.aof_pipe_write_data_to_child) == <span class="number">0</span>) &#123;</span><br><span class="line">        aeCreateFileEvent(server.el, server.aof_pipe_write_data_to_child,</span><br><span class="line">            AE_WRITABLE, aofChildWriteDiffData, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>aof.c line 95, aofChildWriteDiffDatah：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Event handler used to send data to the child process doing the AOF</span></span><br><span class="line"><span class="comment"> * rewrite. We send pieces of our AOF differences buffer so that the final</span></span><br><span class="line"><span class="comment"> * write when the child finishes the rewrite will be small. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aofChildWriteDiffData</span><span class="params">(aeEventLoop *el, <span class="keyword">int</span> fd, <span class="keyword">void</span> *privdata, <span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line">    listNode *ln;</span><br><span class="line">    aofrwblock *block;</span><br><span class="line">    <span class="keyword">ssize_t</span> nwritten;</span><br><span class="line">    UNUSED(el);</span><br><span class="line">    UNUSED(fd);</span><br><span class="line">    UNUSED(privdata);</span><br><span class="line">    UNUSED(mask);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        ln = listFirst(server.aof_rewrite_buf_blocks);</span><br><span class="line">        block = ln ? ln-&gt;value : <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (server.aof_stop_sending_diff || !block) &#123;</span><br><span class="line">            aeDeleteFileEvent(server.el,server.aof_pipe_write_data_to_child,</span><br><span class="line">                              AE_WRITABLE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (block-&gt;used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            nwritten = write(server.aof_pipe_write_data_to_child,</span><br><span class="line">                             block-&gt;buf,block-&gt;used);</span><br><span class="line">            <span class="keyword">if</span> (nwritten &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            memmove(block-&gt;buf,block-&gt;buf+nwritten,block-&gt;used-nwritten);</span><br><span class="line">            block-&gt;used -= nwritten;</span><br><span class="line">            block-&gt;<span class="built_in">free</span> += nwritten;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (block-&gt;used == <span class="number">0</span>) listDelNode(server.aof_rewrite_buf_blocks,ln);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>AOF重写期间，主进程会复制AOF重写缓冲区（aof_rewrite_buf_blocks）的内容到aof_pipe_write_data_to_child，aof_pipe_write_data_to_child实际是一个pipe，用于父子进程通信。子进程会从pipe取数据追加到新生成的AOF文件。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/hezhiqiang1314/article/details/69396887">参考一: Redis之AOF重写及其实现原理</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-内存淘汰</title>
    <url>/IT/Redis/Redis-%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0.html</url>
    <content><![CDATA[<h1 id="Redis-内存淘汰"><a href="#Redis-内存淘汰" class="headerlink" title="Redis-内存淘汰"></a>Redis-内存淘汰</h1><p>Redis内存占用达到maxmemory之后，需要根据配置对内存数据进行淘汰。</p>
<h2 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h2><ul>
<li>noeviction: 不淘汰数据，对于写命令，返回error。</li>
<li>allkeys-random: 在所有数据里随机淘汰。</li>
<li>allkeys-lru: 使用lru算法，在所有数据里进行淘汰。</li>
<li>allkeys-lfu: 使用lfu算法，在所有数据里进行淘汰。</li>
<li>volatile-random: 设置了过期时间的数据里随机淘汰。</li>
<li>volatile-lru: 使用lru算法， 在设置了过期时间的数据里进行淘汰。</li>
<li>volatile-lfu: 使用lfu算法， 在设置了过期时间的数据里进行淘汰。</li>
<li>volatile-ttl: 在设置了过期时间的数据里，选择距离过期时最近的数据进行淘汰。</li>
</ul>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line">maxmemory-samples 5</span><br><span class="line">replica-ignore-maxmemory yes</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="检查时机"><a href="#检查时机" class="headerlink" title="检查时机"></a>检查时机</h2><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210516122723.png" alt="内存淘汰调用链"></p>
<p>如图所示，在每次执行命令的时候会检查当前已使用内存是否超过了maxmomery，如果超过了，则根据配置策略进行处理。</p>
<p><strong>note: 检查内存使用的时候，会将AOF缓冲区（包括重写缓冲区）和从节点缓冲区的大小排除掉，具体参考evict.c line 396 getMaxmemoryState()。</strong></p>
<p><strong>note: 默认情况下从节点不会进行数据淘汰，取决于配置项replica-ignore-maxmemory。</strong></p>
<p><strong>note: 主从复制缓冲区导致内存占用过多，进一步触发更多的数据淘汰，可能形成恶性循环。</strong></p>
<p>​</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据结构-dict</title>
    <url>/IT/Redis/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-dict.html</url>
    <content><![CDATA[<h1 id="Redis数据结构–dict"><a href="#Redis数据结构–dict" class="headerlink" title="Redis数据结构–dict"></a>Redis数据结构–dict</h1><p>关于dict的结构在src/dict.h，</p>
<p>dict:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">long</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>dictht:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class="line"><span class="comment"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>dictEntry:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">        <span class="keyword">double</span> d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>dictType:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> (*hashFunction)(<span class="keyword">const</span> <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="keyword">void</span> *(*keyDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="keyword">void</span> *(*valDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *obj);</span><br><span class="line">    <span class="keyword">int</span> (*keyCompare)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    <span class="keyword">void</span> (*keyDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="keyword">void</span> (*valDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *obj);</span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis源码分析</title>
    <url>/IT/Redis/Redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="Redis源码分析"><a href="#Redis源码分析" class="headerlink" title="Redis源码分析"></a>Redis源码分析</h1><p><a href="https://qiankunli.github.io/2019/04/20/redis_source.html">参考一: Redis源码分析</a></p>
<p><a href="http://zhangtielei.com/posts/blog-redis-how-to-start.html">参考二: Redis主流程分析</a></p>
<h2 id="Redis-main函数"><a href="#Redis-main函数" class="headerlink" title="Redis main函数"></a>Redis main函数</h2><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201008143805.png" alt="image-20201008143758323"></p>
<h2 id="Redis主流程分析"><a href="#Redis主流程分析" class="headerlink" title="Redis主流程分析"></a>Redis主流程分析</h2><p>每个成功建立的连接生成一个connection数据，connection数据结构定义: </p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct connection &#123;</span><br><span class="line">    ConnectionType *type;</span><br><span class="line">    ConnectionState state;</span><br><span class="line">    short int flags;</span><br><span class="line">    short int refs;</span><br><span class="line">    int last_errno;</span><br><span class="line">    void *private_data;</span><br><span class="line">    ConnectionCallbackFunc conn_handler;</span><br><span class="line">    ConnectionCallbackFunc write_handler;</span><br><span class="line">    ConnectionCallbackFunc read_handler;</span><br><span class="line">    int fd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ConnectionType</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> (*ae_handler)(struct aeEventLoop *el, <span class="keyword">int</span> fd, <span class="keyword">void</span> *clientData, <span class="keyword">int</span> mask);</span><br><span class="line">    <span class="keyword">int</span> (*connect)(struct connection *conn, <span class="keyword">const</span> <span class="keyword">char</span> *addr, <span class="keyword">int</span> port, <span class="keyword">const</span> <span class="keyword">char</span> *source_addr, ConnectionCallbackFunc connect_handler);</span><br><span class="line">    <span class="keyword">int</span> (*write)(struct connection *conn, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> data_len);</span><br><span class="line">    <span class="keyword">int</span> (*read)(struct connection *conn, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> buf_len);</span><br><span class="line">    <span class="keyword">void</span> (*close)(struct connection *conn);</span><br><span class="line">    <span class="keyword">int</span> (*accept)(struct connection *conn, ConnectionCallbackFunc accept_handler);</span><br><span class="line">    <span class="keyword">int</span> (*set_write_handler)(struct connection *conn, ConnectionCallbackFunc handler, <span class="keyword">int</span> barrier);</span><br><span class="line">    <span class="keyword">int</span> (*set_read_handler)(struct connection *conn, ConnectionCallbackFunc handler);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *(*get_last_error)(struct connection *conn);</span><br><span class="line">    <span class="keyword">int</span> (*blocking_connect)(struct connection *conn, <span class="keyword">const</span> <span class="keyword">char</span> *addr, <span class="keyword">int</span> port, <span class="keyword">long</span> <span class="keyword">long</span> timeout);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*sync_write)(struct connection *conn, <span class="keyword">char</span> *ptr, <span class="keyword">ssize_t</span> size, <span class="keyword">long</span> <span class="keyword">long</span> timeout);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*sync_read)(struct connection *conn, <span class="keyword">char</span> *ptr, <span class="keyword">ssize_t</span> size, <span class="keyword">long</span> <span class="keyword">long</span> timeout);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*sync_readline)(struct connection *conn, <span class="keyword">char</span> *ptr, <span class="keyword">ssize_t</span> size, <span class="keyword">long</span> <span class="keyword">long</span> timeout);</span><br><span class="line">&#125; ConnectionType;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef enum &#123;</span><br><span class="line">    CONN_STATE_NONE = 0,</span><br><span class="line">    CONN_STATE_CONNECTING,</span><br><span class="line">    CONN_STATE_ACCEPTING,</span><br><span class="line">    CONN_STATE_CONNECTED,</span><br><span class="line">    CONN_STATE_CLOSED,</span><br><span class="line">    CONN_STATE_ERROR</span><br><span class="line">&#125; ConnectionState;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>其中type字段的初始值被设置为</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ConnectionType CT_Socket = &#123;</span><br><span class="line">    .ae_handler = connSocketEventHandler,</span><br><span class="line">    .close = connSocketClose,</span><br><span class="line">    .write = connSocketWrite,</span><br><span class="line">    .read = connSocketRead,</span><br><span class="line">    .accept = connSocketAccept,</span><br><span class="line">    .connect = connSocketConnect,</span><br><span class="line">    .set_write_handler = connSocketSetWriteHandler,</span><br><span class="line">    .set_read_handler = connSocketSetReadHandler,</span><br><span class="line">    .get_last_error = connSocketGetLastError,</span><br><span class="line">    .blocking_connect = connSocketBlockingConnect,</span><br><span class="line">    .sync_write = connSocketSyncWrite,</span><br><span class="line">    .sync_read = connSocketSyncRead,</span><br><span class="line">    .sync_readline = connSocketSyncReadLine</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200920222038.png" alt="Redis处理主流程及调用关系"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>sdshdr</title>
    <url>/IT/Redis/sdshdr.html</url>
    <content><![CDATA[<h1 id="Redis底层数据类型1-–-sds"><a href="#Redis底层数据类型1-–-sds" class="headerlink" title="Redis底层数据类型1 – sds"></a>Redis底层数据类型1 – sds</h1><p>[top]</p>
<h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><p>sds-动态字符串</p>
<p>数据类型sdshdr_5/8/16/32/64。分别用8/16/32/64位表示字符串长度，其中sdshdr_5是一个特例。</p>
<p>数据类型定义：<br>`struct <strong>attribute</strong> ((<strong>packed</strong>)) sdshdr16 {</p>
<p>  uint16_t len; /* used */</p>
<p>  uint16_t alloc; /* excluding the header and null terminator */</p>
<p>  unsigned char flags; /* 3 lsb of type, 5 unused bits */</p>
<p>  char buf[];</p>
<p>};`</p>
<p>sdshdr_8/32/64格式与此相似，只是数据长度由16位变为8/32/64位。但是sdshdr_5的声明：<br>`struct <strong>attribute</strong> ((<strong>packed</strong>)) sdshdr5 {</p>
<p>  unsigned char flags; /* 3 lsb of type, and 5 msb of string length */</p>
<p>  char buf[];</p>
<p>};`</p>
<p>各字段含义：</p>
<ul>
<li><p>len: 字符串的长度（已使用空间）</p>
</li>
<li><p>alloc: 分配空间的总长度</p>
</li>
<li><p>flags: 低三位标识sds类型（sdshdr_5会用高五位表示字符串长度）</p>
</li>
<li><p>buf: 保存字符串</p>
<p>sdshdr实际占用的空间=alloc+1,最后一位额外空间为‘/0’。</p>
</li>
</ul>
<h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><p>《Redis设计与实现》一书中提到字符串长度不足39时使用embstr编码，大于39时使用sds编码，新版的redis将该该长度改为了44。（该值定义于object.c OBJ_ENCODING_EMBSTR_SIZE_LIMIT）</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44</span></span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>utils</title>
    <url>/IT/Redis/utils.html</url>
    <content><![CDATA[<h1 id="Utils-md"><a href="#Utils-md" class="headerlink" title="Utils.md"></a>Utils.md</h1><p>[TOC]</p>
<h2 id="string2ll"><a href="#string2ll" class="headerlink" title="string2ll"></a>string2ll</h2><p>&lt;utils.c/412Ln&gt;</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Convert to negative if needed, and do the final overflow check when</span></span><br><span class="line"><span class="comment">     * converting from unsigned long long to long long. */</span></span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt; ((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)(-(LLONG_MIN+<span class="number">1</span>))+<span class="number">1</span>)) <span class="comment">/* Overflow. */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">NULL</span>) *value = -v;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt; LLONG_MAX) <span class="comment">/* Overflow. */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">NULL</span>) *value = v;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>解析：为什么写成 (v &gt; ((unsigned long long)(-(LLONG_MIN+1))+1))？</p>
<p>此处的运算顺序：</p>
<ul>
<li><p>x = -(LLONG_MIN+1)，实际上，LLONG_MIN的大小：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> LLONG_MIN (-LLONG_MAX - 1LL)</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>直接-LLONG_MIN会发生溢出( |LLONG_MIN| &gt; LLONG_MAX)，所以先算LLONG_MIN+1，得到的值恰为LLONG_MAX = |LLONG_MIN| - 1</p>
</li>
<li><p>y = (ull)x，转换为unsigned long long</p>
</li>
<li><p>v &gt; (y+1)，转换为unsigned long long后此时不会溢出，(y+1) = LLONG_MAX+1 = |LLONG_MIN|</p>
</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python诊断工具</title>
    <url>/IT/Tools/Python%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7.html</url>
    <content><![CDATA[<h1 id="Python诊断工具"><a href="#Python诊断工具" class="headerlink" title="Python诊断工具"></a>Python诊断工具</h1><h2 id="一、pyrasite"><a href="#一、pyrasite" class="headerlink" title="一、pyrasite"></a>一、pyrasite</h2><p>使用pyrasite可以attach到正在运行的python进程上：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyrasite-shell &lt;PID&gt;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><em>使用时遇到一个问题: 尝试打印复杂变量时，有可能导致pyrasite异常退出，暂未找到原因，不过可以尝试做类型转换来绕过这个问题。</em></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="（一）阻塞"><a href="#（一）阻塞" class="headerlink" title="（一）阻塞"></a>（一）阻塞</h4><p>执行如下命令后无反应：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyrasite-shell 28414</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>原因可能是当前登陆用户与进程执行的用户不同，可以使用runuser命令以指定用户进行pyrasite-shell。</p>
<p>问题可见<a href="https://github.com/lmacken/pyrasite/issues/60">ipc.connect hang forever</a></p>
<h2 id="二、py-spy"><a href="#二、py-spy" class="headerlink" title="二、py-spy"></a>二、py-spy</h2><p>安装</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install py-spy</span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode</title>
    <url>/IT/Tools/VSCode.html</url>
    <content><![CDATA[<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><h2 id="watch窗口"><a href="#watch窗口" class="headerlink" title="watch窗口"></a>watch窗口</h2><p>显示数组</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*c.argv@c.argc</span><br></pre></td></tr></table></figure>
    </div>
</div>

<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*(robj(*)[10])c.argv</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><a href="https://github.com/Microsoft/vscode-cpptools/issues/172">参考一: VSCode数组显示</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode安装插件失败问题解决</title>
    <url>/IT/Tools/VSCode%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html</url>
    <content><![CDATA[<h1 id="VSCode插件安装失败问题解决"><a href="#VSCode插件安装失败问题解决" class="headerlink" title="VSCode插件安装失败问题解决"></a>VSCode插件安装失败问题解决</h1><p><a href="https://www.wandouip.com/t5i327165/">参考一: 离线安装vscode插件</a></p>
<p>1、安装C/C++ Extensions一直失败，报错</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Downloading package &#x27;C/C++ language components (Linux / x86_64)&#x27;  Failed. Retrying... Failed. Retrying... Failed. Retrying...Waiting 8 seconds... Failed. Retrying...Waiting 16 seconds... Failed. Retrying... Done!</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>解决: 手动下载后，VSIX安装。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode远程调试</title>
    <url>/IT/Tools/VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html</url>
    <content><![CDATA[<h1 id="VSCode远程调试"><a href="#VSCode远程调试" class="headerlink" title="VSCode远程调试"></a>VSCode远程调试</h1><p><a href="https://www.cnblogs.com/tinywan/p/11107397.html">参考一: Remote Development配置</a></p>
<p><a href="https://warmgrid.github.io/2019/05/21/remote-debug-in-vscode-insiders.html">参考二: 使用 VSCode 远程访问代码以及远程 GDB 调试</a></p>
<p><a href="https://vscode.readthedocs.io/en/latest/editor/debugging/">参考三: VSCode配置文档</a></p>
<p>[TOC]</p>
<h2 id="Remote-ssh配置文件"><a href="#Remote-ssh配置文件" class="headerlink" title="Remote ssh配置文件"></a>Remote ssh配置文件</h2><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host test-93.129</span><br><span class="line">  HostName test-93.129</span><br><span class="line">  Port 22</span><br><span class="line">  User root</span><br><span class="line">  IdentityFile C:\\Users\\user\\.ssh\\id_rsa</span><br><span class="line"></span><br><span class="line">Host 192.168.93.129</span><br><span class="line">  HostName 192.168.93.129</span><br><span class="line">  User root</span><br><span class="line">  IdentityFile C:\\Users\\user\\.ssh\\id_rsa</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="Redis远程调试-配置文件"><a href="#Redis远程调试-配置文件" class="headerlink" title="Redis远程调试-配置文件"></a>Redis远程调试-配置文件</h2><ul>
<li><p>tasks.json</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;label&quot;</span>: <span class="string">&quot;gcc&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;command&quot;</span>: <span class="string">&quot;make&quot;</span>,</span><br><span class="line">			</span><br><span class="line">			<span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;$gcc&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">&quot;group&quot;</span>: <span class="string">&quot;build&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>launch.json</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot; /root/awei/codes/redis/src/redis-server&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;gcc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pwa-chrome&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch Chrome against localhost&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;webRoot&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
</ul>
<h2 id="stfp远程同步配置样例"><a href="#stfp远程同步配置样例" class="headerlink" title="stfp远程同步配置样例"></a>stfp远程同步配置样例</h2><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test01&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;sftp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;10.10.10.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>: <span class="number">22</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;aaaaa&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;E:\\test01&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;remotePath&quot;</span>: <span class="string">&quot;/root/test01&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uploadOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;connectTimeout&quot;</span>:<span class="number">100000</span>,</span><br><span class="line">        <span class="attr">&quot;profiles&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;test-01&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;10.10.10.1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">&quot;test-02&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;10.10.10.2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test02&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;sftp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>: <span class="number">22</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;bbbbb&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;context&quot;</span>: <span class="string">&quot;E:\\test02&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;remotePath&quot;</span>: <span class="string">&quot;/root/test02&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uploadOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;connectTimeout&quot;</span>:<span class="number">100000</span>,</span><br><span class="line">        <span class="attr">&quot;profiles&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;test-03&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;10.10.20.1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">&quot;test-04&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;10.10.20.2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="VSCode远程调试配置实例一"><a href="#VSCode远程调试配置实例一" class="headerlink" title="VSCode远程调试配置实例一"></a>VSCode远程调试配置实例一</h2><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json:"></a>launch.json:</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) remote&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;&quot;, //调试时要运行的可执行文件,例如redis/src/redis-server</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;gcc&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;gdb.exe&quot;,</span><br><span class="line">            &quot;miDebuggerServerAddress&quot;: &quot;10.10.10.1&quot;,  </span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;  </span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;, // 配置名称，将会在启动配置的下拉菜单中显示  </span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,       // 配置类型，这里只能为cppdbg  </span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,    // 请求配置类型，可以为launch（启动）或attach（附加）  </span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,// 将要进行调试的程序的路径  </span><br><span class="line">            &quot;args&quot;: [],             // 程序调试时传递给程序的命令行参数，一般设为空即可  </span><br><span class="line">            &quot;stopAtEntry&quot;: false,   // 设为true时程序将暂停在程序入口处，一般设置为false  </span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, // 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录  </span><br><span class="line">            &quot;environment&quot;: [],  </span><br><span class="line">            &quot;externalConsole&quot;: true, // 调试时是否显示控制台窗口，一般设置为true显示控制台  </span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,  </span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin\\gdb32.exe&quot;, // miDebugger的路径，注意这里要与MinGw的路径对应  </span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;gcc&quot;, // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span><br><span class="line">            &quot;setupCommands&quot;: [  </span><br><span class="line">                &#123;   </span><br><span class="line">		    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,  </span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,  </span><br><span class="line">                    &quot;ignoreFailures&quot;: true  </span><br><span class="line">                &#125;  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Windows 上的 Bash 启动&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;输入程序名称，例如 $&#123;workspaceFolder&#125;/a.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,</span><br><span class="line">            &quot;pipeTransport&quot;: &#123;</span><br><span class="line">                &quot;debuggerPath&quot;: &quot;/usr/bin/gdb&quot;,</span><br><span class="line">                &quot;pipeProgram&quot;: &quot;$&#123;env:windir&#125;\\system32\\bash.exe&quot;,</span><br><span class="line">                &quot;pipeArgs&quot;: [&quot;-c&quot;],</span><br><span class="line">                &quot;pipeCwd&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(Windows) 启动&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppvsdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;输入程序名称，例如 $&#123;workspaceFolder&#125;/a.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">	&quot;tasks&quot;: [</span><br><span class="line">		&#123;</span><br><span class="line">			&quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">			&quot;label&quot;: &quot;gcc remote&quot;,</span><br><span class="line">			&quot;command&quot;: &quot;/usr/bin/gcc&quot;,</span><br><span class="line">			&quot;args&quot;: [</span><br><span class="line">				&quot;-g&quot;,</span><br><span class="line">				&quot;$&#123;file&#125;&quot;,</span><br><span class="line">				&quot;-o&quot;,</span><br><span class="line">				&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;&quot;</span><br><span class="line">			],</span><br><span class="line">			&quot;options&quot;: &#123;</span><br><span class="line">				&quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;problemMatcher&quot;: [</span><br><span class="line">				&quot;$gcc&quot;</span><br><span class="line">			],</span><br><span class="line">			&quot;group&quot;: &#123;</span><br><span class="line">				&quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">				&quot;isDefault&quot;: true</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		&#123;</span><br><span class="line">			&quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">			&quot;label&quot;: &quot;gcc&quot;,</span><br><span class="line">			&quot;command&quot;: &quot;D:\\awei-tools\\mingw\\bin\\gcc.exe&quot;,</span><br><span class="line">			&quot;args&quot;: [</span><br><span class="line">				&quot;-g&quot;,</span><br><span class="line">				&quot;$&#123;file&#125;&quot;,</span><br><span class="line">				&quot;-o&quot;,</span><br><span class="line">				&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">			],</span><br><span class="line">			&quot;options&quot;: &#123;</span><br><span class="line">				&quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;problemMatcher&quot;: [</span><br><span class="line">				&quot;$gcc&quot;</span><br><span class="line">			],</span><br><span class="line">			&quot;group&quot;: &#123;</span><br><span class="line">				&quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">				&quot;isDefault&quot;: true</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="VSCode远程调试配置实例二"><a href="#VSCode远程调试配置实例二" class="headerlink" title="VSCode远程调试配置实例二"></a>VSCode远程调试配置实例二</h2><h3 id="launch-json-1"><a href="#launch-json-1" class="headerlink" title="launch.json:"></a>launch.json:</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/src/redis-server&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;gcc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">   </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;LaunchGo&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;go&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mode&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;remotePath&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="number">5546</span>,</span><br><span class="line">            <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="comment">//&quot;env&quot;: &#123;</span></span><br><span class="line">            <span class="comment">//    &quot;GOPATH&quot;: &quot;E:/GoCode&quot;,</span></span><br><span class="line">            <span class="comment">//    &quot;GOROOT&quot;: &quot;C:/Program Files/Go&quot;</span></span><br><span class="line">            <span class="comment">//&#125;,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="comment">//&quot;showLog&quot;: true</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Django&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;D:\\codes\\demos\\django-test\\demo\\manage.py&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;runserver&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5000&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;env&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">&quot;envFile&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/.env&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;debugOptions&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;WaitOnAbnormalExit&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WaitOnNormalExit&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RedirectOutput&quot;</span>,</span><br><span class="line">                <span class="string">&quot;DjangoDebugging&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Python: 当前文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="tasks-json-1"><a href="#tasks-json-1" class="headerlink" title="tasks.json:"></a>tasks.json:</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">			<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;label&quot;</span>: <span class="string">&quot;gcc&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;command&quot;</span>: <span class="string">&quot;make&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;CC=clang&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;$gcc&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">&quot;group&quot;</span>: <span class="string">&quot;build&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;msbuild&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/property:GenerateFullPaths=true&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/t:build&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/consoleloggerparameters:NoSummary&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span>: <span class="string">&quot;silent&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: <span class="string">&quot;$msCompile&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CPU.html</url>
    <content><![CDATA[<h1 id="性能分析-CPU"><a href="#性能分析-CPU" class="headerlink" title="性能分析-CPU"></a>性能分析-CPU</h1><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><h3 id="负载"><a href="#负载" class="headerlink" title="负载"></a>负载</h3><p>负载反应了一定时间内活跃进程的数量。具体说是，一段时间内，处于可运行状态或不可中断状态的进程数量。贴一段man uptime原文:</p>
<blockquote>
<p>System load averages is the average number of processes that are either in a runnable or uninterruptable state.  A process in a runnable state is  either<br>       using the CPU or waiting to use the CPU.  A process in uninterruptable state is waiting for some I/O access, eg waiting for disk.  The averages are taken<br>       over the three time intervals.  Load averages are not normalized for the number of CPUs in a system, so a load average of 1 means a single CPU system  is<br>       loaded all the time while on a 4 CPU system it means it was idle 75% of the time.</p>
</blockquote>
<p>一般而言，负载大于逻辑核数时就说明出现过载了，但具体情况还要结合一段时间内的负载情况来进行分析。</p>
<h3 id="使用率"><a href="#使用率" class="headerlink" title="使用率"></a>使用率</h3><p>使用率反映了CPU时间的分配情况。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/75975041">参考一: Linux Load Averages：什么是平均负载？</a></p>
<p><a href="http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html">参考二: Linux Load Averages: Solving the Mystery</a></p>
<p><a href="http://linuxperf.com/?p=33">参考三: 理解 %IOWAIT (%WIO)</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-TC解析</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-TC%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="Linux流量控制工具-TC"><a href="#Linux流量控制工具-TC" class="headerlink" title="Linux流量控制工具-TC"></a>Linux流量控制工具-TC</h1><p><a href="https://tldp.org/HOWTO/Adv-Routing-HOWTO/lartc.qdisc.filters.html">参考一: TC</a></p>
<p><a href="https://tldp.org/HOWTO/Traffic-Control-HOWTO/components.html">参考二: TC文档</a></p>
<p> <a href="..%5C%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%5CLARTC-zh_CN.GB2312.pdf">参考三: TC中文手册</a> </p>
<p><a href="https://toutiao.io/posts/lpkg13/preview">参考四: Linux流量控制: QoS与ToS</a></p>
<p><a href="https://www.wsfnk.com/archives/882.html">参考五: TC实例</a></p>
<p><a href="https://tldp.org/HOWTO/Adv-Routing-HOWTO/index.html">参考六: HOWTO-Linux Advanced Routing &amp; Traffic Control HOWTO</a></p>
<h2 id="tc-noqueu"><a href="#tc-noqueu" class="headerlink" title="tc-noqueu"></a>tc-noqueu</h2><p><a href="http://linux-tc-notes.sourceforge.net/tc/doc/sch_noqueue.txt">tc-noqueue</a></p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The noqueue queuing discipline</span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line">Parameters.</span><br><span class="line">  None.</span><br><span class="line"></span><br><span class="line">Classes.  The noqueue queuing discipline does not have classes.</span><br><span class="line"></span><br><span class="line">Scheduling.  The noqueue queuing discipline has not have a scheduler.</span><br><span class="line"></span><br><span class="line">Policing.  The noqueue queuing discipline drops all packets queued onto</span><br><span class="line">it.</span><br><span class="line"></span><br><span class="line">Rate limiting.  The noqueue queuing discipline does not rate limit</span><br><span class="line">traffic.</span><br><span class="line"></span><br><span class="line">Classifier.  The noqueue queuing discipline does not classify packets.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Comments.</span><br><span class="line"></span><br><span class="line">- Although the noqueue queuing discipline does drop all packets</span><br><span class="line">  queued onto it, in practice that never happens.  Instead when</span><br><span class="line">  a packet is sent over a device it checks if it is using the</span><br><span class="line">  &quot;noqueue&quot; discipline.  If so the device sends the packet</span><br><span class="line">  immediately, or drops it if it can&#x27;t be sent.  Thus the</span><br><span class="line">  noqueue discipline really means &quot;don&#x27;t queue this packet&quot;.</span><br><span class="line"></span><br><span class="line">- noqueue is the queuing discipline that is used by default</span><br><span class="line">  for :virtual: devices, meaning it is the queuing discipline</span><br><span class="line">  installed when a virtual device is first created.  It is</span><br><span class="line">  also the queuing discipline used after you &quot;tc qdisc del&quot;</span><br><span class="line">  another queuing discipline from a virtual device.</span><br><span class="line">  </span><br><span class="line">- You can _not_ manually change a queuing discipline for a</span><br><span class="line">  device or class to noqueue using &quot;tc qdisc add noqueue&quot;.  You can</span><br><span class="line">  get around this for virtual devices by deleting their queuing</span><br><span class="line">  discipline.  It is not possible to assign the noqueue queuing</span><br><span class="line">  discipline to physical devices or classes.</span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-进程内存空间模型</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux-%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B.html</url>
    <content><![CDATA[<h1 id="Linux-进程内存空间模型"><a href="#Linux-进程内存空间模型" class="headerlink" title="Linux-进程内存空间模型"></a>Linux-进程内存空间模型</h1><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210523143122.png" alt="image-20210523143121112"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://buptjz.github.io/2014/04/23/processAndThreads">参考一: 进程、线程及其内存模型</a></p>
<p><a href="https://www.cnblogs.com/yanghong-hnu/p/4705755.html">参考二: [(深入理解计算机系统) bss段，data段、text段、堆(heap)和栈(stack)]</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>OS-CPU Cache</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/OS-CPU%20Cache.html</url>
    <content><![CDATA[<h1 id="OS-CPU-Cache"><a href="#OS-CPU-Cache" class="headerlink" title="OS - CPU Cache"></a>OS - CPU Cache</h1><p><a href="https://nieyong.github.io/wiki_cpu/CPU%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84-Cache.html">参考一: CPU体系架构-Cache</a></p>
<p><a href="https://www.findhao.net/easycoding/1694">参考二: Linux查看Cache</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/55917869">参考三: Flase Sharing</a></p>
<p><a href="https://juejin.cn/post/6844903841964507150">参考四: Flase Sharing example</a></p>
<p>Linux(CentOS 7.5)查看Cache大小:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getconf -a</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><img src="C:\Users\zhouguangwei01\AppData\Roaming\Typora\typora-user-images\image-20201219143728688.png" alt="image-20201219143728688"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>ip a命令输出解析</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ip%20a%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="ip-a命令输出解析"><a href="#ip-a命令输出解析" class="headerlink" title="ip a命令输出解析"></a>ip a命令输出解析</h1><p><a href="https://www.cnblogs.com/evan-liang/p/12271468.html">引用自Docker深入浅出系列</a></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017153830.png" alt="image-20201017153823551"></p>
<p><code>&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</code>这个配置串告诉我们：</p>
<blockquote>
<p>BROADCAST 该接口支持广播<br>MULTICAST 该接口支持多播<br>UP 网络接口已启用<br>LOWER_UP 网络电缆已插入，设备已连接至网络</p>
</blockquote>
<p><strong>其他配置信息:</strong></p>
<blockquote>
<p>mtu 1500 最大传输单位（数据包大小）为1,500字节<br>qdisc pfifo_fast 用于数据包排队<br>state UP 网络接口已启用<br>group default 接口组<br>qlen 1000 传输队列长度<br>link/ether 08:00:27:ba:0a:28 接口的 MAC（硬件）地址<br>brd ff:ff:ff:ff:ff:ff 广播地址<br>inet 192.168.100.12/24 绑定的IPv4 地址<br>brd 192.168.0.255 广播地址<br>scope global 全局有效<br>dynamic eth1 地址是动态分配的<br>valid_lft 143401sec IPv4 地址的有效使用期限<br>preferred_lft 143401sec IPv4 地址的首选生存期<br>inet6 fe80::a00:27ff:feba:a28/64 IPv6 地址<br>scope link 仅在此设备上有效<br>valid_lft forever IPv6 地址的有效使用期限<br>preferred_lft forever IPv6 地址的首选生存期</p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables解析</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/iptables%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://kuring.me/post/iptables/">参考一: iptables基本知识</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60172686">参考二: iptables添加SNAT/DNAT规则时自动生成映射表的分析</a></p>
<p><a href="https://blog.51cto.com/liubin/110394">参考三: iptables状态机制描述</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture">参考四: iptables解析及状态总结</a></p>
<h3 id="概念：chain、table、rule"><a href="#概念：chain、table、rule" class="headerlink" title="概念：chain、table、rule"></a>概念：chain、table、rule</h3><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200817195020.png" alt="iptables1"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200817195832.png" alt="iptables2"></p>
<h4 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h4><p>PREROUTNG:报文到达本机，路由决策之前</p>
<p>INPUT:报文到达本机，向协议栈上层传递</p>
<p>OUTPUT:报文从本机发出，路由决策之前</p>
<p>POSTROUTING：报文从本机发出，路由决策之后</p>
<p>FORWARD:经由本机转发</p>
<h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>对rule进行管理，存放相同功能的rule</p>
<p>filter:默认表，实现包过滤</p>
<p>nat:对包进行NAT</p>
<p>mangle:修改报文并封装</p>
<p>raw:标记数据包</p>
<h4 id="rule"><a href="#rule" class="headerlink" title="rule"></a>rule</h4><p>包含匹配条件和处理动作</p>
<p>source ip、destination ip、source port、destination port</p>
<p>accept、drop、reject、queue、dnat、snat、masquerade</p>
<h3 id="有状态的防火墙"><a href="#有状态的防火墙" class="headerlink" title="有状态的防火墙"></a>有状态的防火墙</h3><p>iptables可以实现有状态的防火墙。见参考三和参考四。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>tcpdump解析</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/tcpdump%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<h2 id="tcpdump原理"><a href="#tcpdump原理" class="headerlink" title="tcpdump原理"></a>tcpdump原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://blog.51cto.com/12814931/2336889">tcpdump原理参考</a></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816112439.png" alt="数据包传递过程"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816112501.png" alt="数据包处理流程"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816112528.png" alt="数据包处理流程"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>磁盘挂载与文件系统</title>
    <url>/IT/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html</url>
    <content><![CDATA[<h1 id="磁盘挂载与文件系统"><a href="#磁盘挂载与文件系统" class="headerlink" title="磁盘挂载与文件系统"></a>磁盘挂载与文件系统</h1><p>磁盘分区的基本单位是柱面。</p>
<p>磁盘读写的基本单位是扇区（sector），一般是512Bytes。</p>
<p>文件系统与磁盘交互以块（block，物理块）为单位，块的大小一定是sector的整数倍。块有磁盘上相邻的多个扇区组成。文件系统中可设定物理块的大小，典型的如ext2，块大小通常是4K，也就是磁盘上相邻的八个扇区。</p>
<p>逻辑块是具体文件系统操作的最小单位，一般来说与物理块大小相等。与磁盘交互时，需要将逻辑块转换为对应的物理块。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000017213655?utm_source=sf-related">参考一: 磁盘挂载、分区、扩容</a></p>
<p><a href="https://www.cnblogs.com/sammyliu/p/4521315.html">参考二: 磁盘分区与文件系统</a></p>
<p><a href="https://blog.csdn.net/weixin_30415801/article/details/98053946?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">参考三: 磁盘结构与分区</a></p>
<p><a href="https://blog.csdn.net/Apollon_krj/article/details/77853746">参考四: 磁盘结构、分区</a></p>
<p><a href="https://blog.csdn.net/gqtcgq/article/details/50811991">参考五: 磁盘、分区和文件系统</a></p>
<p><a href="https://www.linuxidc.com/Linux/2017-09/146899.htm">参考六: 磁盘分区与文件系统</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/31663014">参考七: 磁盘格式化与文件系统</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/IT/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91.html</url>
    <content><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>假设书中节点x:</p>
<ul>
<li>对于x左子树中的任一节点，key&lt;=x.key;</li>
<li>对于x右子树中的任一节点，key&gt;=x.key;</li>
</ul>
<h3 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h3><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul>
<li>是一棵二叉搜索树；</li>
<li>任一节点，左右子树的高度差不超过1；</li>
</ul>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><ul>
<li>是一棵二叉搜索树；</li>
<li>每个节点是红色或黑色的；</li>
<li>叶节点（NIL）一定是黑色的；</li>
<li>根节点是黑色的；</li>
<li>红色节点的两个子节点都是黑色的；</li>
<li>对于一个节点，从它到其所有后代子节点的简单路径上，包含相同数量的黑色节点。 </li>
</ul>
<h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>假设m阶（最小度数为t,t&gt;=2）的B树：</p>
<ul>
<li>每个叶节点高度相同；</li>
<li>每个节点中的关键字非降序排列；</li>
<li>内部节点有n个关键字，则有n+1个子树；且子树中的关键字范围被该节点上的关键字分割；</li>
<li>非根的内部节点最少t(m/2)孩子，最多2t个孩子；树非空时，根节点最少2个孩子。</li>
</ul>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><ul>
<li>有n个子树的内部节点有n个关键字（B-树是n-1）；</li>
<li>内部节点只有关键字，不存数据；</li>
<li>叶子节点有指向下一个叶节点的指针。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/wardseptember/notes/blob/master/docs/B%E6%A0%91%E5%92%8CB%2B%E6%A0%91%E8%AF%A6%E8%A7%A3.md">B树和B+树详解</a></p>
<p><a href="https://database.51cto.com/art/201911/605881.htm">终于有篇看的懂的B树文章了！（B+树减少IO次数）</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>内存对齐</title>
    <url>/IT/%E7%BC%96%E7%A8%8B/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html</url>
    <content><![CDATA[<h1 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h1><p><a href="https://zhuanlan.zhihu.com/p/30007037">参考一: 内存对齐及图示</a></p>
<p><a href="https://www.jianshu.com/p/49ddb946a226">参考二: 内存对齐</a></p>
<p><a href="https://segmentfault.com/a/1190000020034941">参考三: 栈的四字节对齐</a></p>
<p>下面代码实现栈的四字节对齐:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and $-16, %esp</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>解释：-16在内存中采用补码表示，低八位为：1111 0000</p>
<p>故-16与任意数进行and操作后，结果为16的倍数。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>面试</title>
    <url>/IT/%E7%BC%96%E7%A8%8B/%E9%9D%A2%E8%AF%95.html</url>
    <content><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>is和==区别</p>
<p>弱引用</p>
<p>await和async</p>
<p>asyncio.sleep和sleep</p>
<p> magic method</p>
<p>dummy</p>
<p>GIL:</p>
<ul>
<li>存在原因：内存管理的线程安全</li>
</ul>
<p>闭包</p>
<p>super与MRO</p>
<p>迭代器 可迭代对象  生成器</p>
<p>深拷贝与浅拷贝</p>
<p>垃圾回收</p>
<p>int long 整数长度问题</p>
<p>bytes unicode utf8</p>
<p>import 原理</p>
<p>新式类与旧式类</p>
<p>列表推导式的好处</p>
<p>内存泄漏</p>
<ul>
<li>全局的list、dict或其他容器对象，向里面插入对象没有删除</li>
<li>引用循环，且循环引用的对象定义了__del__方法</li>
</ul>
<p>可变对象的内存泄露</p>
<p>静态变量（类变量）与实例变量</p>
<ul>
<li></li>
</ul>
<p>staticmethod与classmethod</p>
<ul>
<li></li>
</ul>
<p>上下文管理器</p>
<ul>
<li>_<em>enter</em>_</li>
<li>_<em>exit</em>_</li>
</ul>
<p>字典一样访问一个类</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.a = <span class="number">123</span></span><br><span class="line">        self.b = <span class="number">56</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self, item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, item, value</span>):</span></span><br><span class="line">        <span class="built_in">setattr</span>(self, item, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">delattr</span>(self, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.a)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"></span><br><span class="line">a.c = <span class="number">78</span></span><br><span class="line"><span class="built_in">print</span>(a.__dict__)</span><br><span class="line"><span class="built_in">print</span>(a.c)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;d&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(a.__dict__)</span><br><span class="line"><span class="built_in">print</span>(a.d)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a.d</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(a))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>进程 线程 协程</p>
<p>同步 异步 阻塞  非阻塞</p>
<p>进程空间模型</p>
<p>虚拟内存</p>
<p>io多路复用</p>
<ul>
<li>select</li>
<li>poll</li>
<li>epoll</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>删除表</p>
<p>事务、隔离级别</p>
<p>默认级别</p>
<p>B+树</p>
<p>B树与B+树</p>
<p>联合索引</p>
<p>死锁</p>
<p>主键索引与唯一索引</p>
<p>覆盖索引 前缀索引</p>
<p>自增ID与UUID区别</p>
<p>索引失效</p>
<ul>
<li>不符合最左前缀原则：like或者复合索引</li>
<li>等号右边使用了函数或者隐式类型转换</li>
</ul>
<p>MyISAM和InnoDB区别：</p>
<ul>
<li>InnoDB支持事务，MyISAM不支持</li>
<li>InnoDB聚簇索引，MyISAM非聚簇</li>
<li>InnoDB不保存表的行数，MyISAM保存</li>
<li>InnoDB行锁，MyISAM表锁</li>
<li>InnoDB支持外键，MyISAM不支持</li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>GET与POST</p>
<p>Http2.0:</p>
<ul>
<li>多路复用：多个请求并行发送</li>
<li>二进制分帧</li>
<li>支持头部压缩</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>大顶堆的插入删除</p>
<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>如何保证消费的幂等性</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ul>
<li>缓存击穿：某个热点key失效，大量请求到达数据库<ul>
<li>过期时间：永不过期</li>
<li>锁：拿到锁才可以访问数据库</li>
</ul>
</li>
<li>缓存雪崩：大量key失效，大量请求到达数据库<ul>
<li>过期时间加一个随机值，防止同一时刻过期</li>
<li>防止redis宕机：主从</li>
<li>熔断、限流</li>
</ul>
</li>
<li>缓存穿透：查询一个不存在的数据，请求直接到达数据库<ul>
<li>缓存null</li>
<li>布隆过滤器</li>
</ul>
</li>
</ul>
<p>scan命令使用</p>
<p>RDB与AOF</p>
<p>大key问题以及value大小限制</p>
<ul>
<li>key对应的value过大</li>
<li>redis限制string类型不超过512m，实践建议10KB一下</li>
<li>hash、list、set、zset元素个数不要超过5000</li>
</ul>
<p>key过期发生什么</p>
<p>key过长发生什么</p>
<blockquote>
<ul>
<li>非常长的key是不推荐的。一个1024 bytes是一个非常坏的注意，不仅仅是因为内存浪费，更是因为在数据集中搜索对比的时候需要耗费更多的成本。当要处理的是匹配一个非常大的值，从内存和带宽的角度来看，使用这个值的hash值是更好的办法（比如使用SHA1）。</li>
<li>特别短的key通常也是不推荐的。在写像u100flw这样的键的时候，有一个小小的要点，我们可以用user:1000:followers代替。可读性更好，对于key对象和value对象增加的空间占用与此相比来说倒是次要的。当短的key可以很明显减少空间占用的时候，你的工作就是找到正确的平衡。</li>
<li>尝试去固定一个schema。比如object-type:id是一个好主意，-和.通常用于多个字符的域，就像comment:1234:reply.to，或者comment:1234:reply-to。</li>
<li>最大的key允许512MB。</li>
</ul>
</blockquote>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>rpc与http的区别和联系</p>
<p>rpc的使用场景</p>
<p>restful的理解</p>
<p>DNS和HTTPS过程</p>
<p>幂等</p>
<ul>
<li>GET/PUT/DELETE 幂等</li>
<li>POST/PATCH 非幂等</li>
</ul>
<p>正则表达式的实现</p>
<p>访问微博背后的过程？</p>
<p>微博赞/评论系统设计？</p>
<p>性能排查和优化思路？</p>
<p>七天阅读量排行榜设计？</p>
<p>bug的排查思路？</p>
<p>限流</p>
<h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>float的实现</p>
<h2 id="Docker与K8s"><a href="#Docker与K8s" class="headerlink" title="Docker与K8s"></a>Docker与K8s</h2><p>面向对象六原则</p>
<ul>
<li>单一职责<ul>
<li>引起类变化的因素应当尽可能少</li>
</ul>
</li>
<li>里氏替换<ul>
<li>父类出现的地方可以用子类代替</li>
<li>子类出现的地方不一定可以用父类代替</li>
</ul>
</li>
<li>依赖倒转<ul>
<li>高层模块不依赖底层模块，两者都依赖抽象（模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系）</li>
<li>抽象（接口或者抽象类）不应该依赖细节（实现类）</li>
<li>细节应该依赖于抽象</li>
</ul>
</li>
<li>接口隔离<ul>
<li>避免接口的过度臃肿</li>
</ul>
</li>
<li>迪米特（最少知识原则）<ul>
<li>一个对象对其他对象应该有最少的了解：调用者只需要知道被调用者的出参和入参定义，而无需对其内部实现做任何假设。</li>
<li>只和朋友类交流：尽可能少的引用其他类，只和成员类或者出现在参数中的类交流。</li>
</ul>
</li>
<li>开闭<ul>
<li>对扩展开放，对修改关闭。</li>
</ul>
</li>
</ul>
<p>REST的认识：</p>
<ul>
<li>客户端-服务器：组件分离，可以相对各自独立的演化</li>
<li>缓存：减少交互次数</li>
<li>分层</li>
<li>无状态：每个请求不依赖于其他请求，各请求间相互独立，每次请求由客户端将完成请求需要的全部信息传给服务端<ul>
<li>登录：token或者cookie，基本都需要预先完成登录操作，无法做到完全的无状态</li>
<li>非登录：例如，”下一页”请求，一种做法是服务端保存当前页码，请求到达的时候查看对应的下一页页码，另一种做法是客户端请求中将对应的页码带上，不需要服务端记住当前访问到了哪一页，也就是不需要服务端保存上下文。第二种做法即是无状态的。</li>
</ul>
</li>
<li>接口统一，get/post/put/delete，uri标识资源</li>
<li>超文本驱动（HATEOAS）</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://foofish.net/python-closure.html">[1] 一步一步教你认识Python闭包</a></p>
<p><a href="https://github.com/Abug0/abug0.github.io/blob/master/IT/books/REST_cn.pdf">REST论文中文版</a></p>
<p><a href="https://kricen.github.io/2018/03/05/perday/restful/">Restful架构的理解及使用场景分析</a></p>
<p><a href="https://blog.csdn.net/matthew_zhang/article/details/63410421">理论与实例，准确理解REST的无状态设计</a></p>
<p><a href="https://www.zhihu.com/question/28557115">怎样用通俗的语言解释REST，以及RESTful？</a></p>
<p><a href="http://icyfenix.cn/architecture/architect-history/">服务架构演进史</a></p>
<p><a href="http://icyfenix.cn/architect-perspective/general-architecture/api-style/rest.html">REST设计风格</a></p>
<p><a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">REST APIs must be hypertext-driven</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/58092071">面向对象设计之魂的六大原则</a></p>
<p><a href="https://segmentfault.com/a/1190000020182270">面向对象之六大设计原则</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/36173202">Python中下划线的5种含义</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1704743">索引失效原理，终于有人讲明白了</a></p>
<p><a href="https://www.jianshu.com/p/fe5ccfc5d7bd">RPC与HTTP</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/61423830">你猜一个 TCP 连接上面能发多少个 HTTP 请求</a></p>
<p><a href="https://www.cnblogs.com/loveer/p/11479249.html">彻底理解同步 异步 阻塞 非阻塞</a></p>
<p><a href="https://www.zhihu.com/question/19732473/answer/241673170">怎样理解阻塞非阻塞与同步异步的区别?</a></p>
<p><a href="https://blog.51cto.com/u_15163980/2699646">深入理解一下“同步IO和异步 IO，阻塞 IO和非阻塞IO”</a></p>
<p><a href="https://www.cnblogs.com/my_life/articles/10910375.html">socket的可读可写事件</a></p>
<p><a href="https://juejin.cn/post/6882984260672847879">彻底理解 IO 多路复用实现机制</a></p>
<p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p22_define_context_managers_the_easy_way.html">9.22 定义上下文管理器的简单方法</a></p>
<p><a href="https://juejin.cn/post/6844903795403522056">深入理解 Python 中的上下文管理器</a></p>
<p><a href="https://mp.weixin.qq.com/s/oRoBxZ2-IyuPOf_MWyKZyw">学习Python，怎能不懂点PEP呢？</a></p>
<p><a href="https://www.cnblogs.com/pythonista/p/15012794.html">Python 的上下文管理器是怎么设计的？</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/75588064">redis缓存穿透，缓存击穿，缓存雪崩原因+解决方案</a></p>
<p><a href="https://xie.infoq.cn/article/a035f12e5590385ac578778b0">缓存穿透、缓存击穿、缓存雪崩，看这篇就够了</a></p>
<p><a href="https://juejin.cn/post/6844903877054038023">为什么要设计GIL？</a></p>
<p><a href="https://www.diaosi.love/archives/%E9%81%87%E5%88%B0%E6%85%A2%E6%9F%A5%E8%AF%A2%E9%97%AE%E9%A2%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E6%80%9D%E8%80%83%E4%B8%8E%E8%A7%A3%E5%86%B3">遇到慢查询问题，可以这样思考与解决</a></p>
<p><a href="https://www.modb.pro/db/87705">Linux内核File cache机制（中篇）</a></p>
<p><a href="jianshu.com/p/64c93065473e">Kafka事务特性详解</a></p>
<p><a href="http://dengchengchao.com/?p=1386">Kafka Exactly Once和事务</a></p>
<p><a href="https://www.zhihu.com/question/311885878">Kafka事务到底是什么意思？</a></p>
<p><a href="https://python.freelycode.com/contribution/detail/1174">Python元组是不可变的，除非包含可变对象</a></p>
<p><a href="https://www.cnblogs.com/zzbj/p/13532156.html">Python之内存泄漏和内存溢出</a></p>
<p><a href="https://blog.csdn.net/longzhiwen888/article/details/46604265">Python 被导入模块多次被加载的问题（基于python的import机制）</a></p>
<p><a href="https://re-ra.xyz/Python-%E7%9A%84-import-%E7%A9%B6%E7%AB%9F%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/#reference">Python 的 import 究竟做了什么</a></p>
<p><a href="https://blog.csdn.net/joenqc/article/details/104094042">MySQL联接查询算法（NLJ、BNL、BKA、HashJoin）</a></p>
<p><a href="https://juejin.cn/post/6844903813799739399">为什么 HTTP PATCH 方法不是幂等的及其延伸</a></p>
<p><a href="https://greenbytes.de/tech/webdav/rfc7231.html#PUT">RFC7231: Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content </a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP和HTTPS</title>
    <url>/IT/%E7%BD%91%E7%BB%9C/HTTP%E5%92%8CHTTPS.html</url>
    <content><![CDATA[<h1 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP：超文本传输协议。</p>
<p>HTTP使用明文传输，安全性低。</p>
<h3 id="HTTP的问题"><a href="#HTTP的问题" class="headerlink" title="HTTP的问题"></a>HTTP的问题</h3><ul>
<li>明文传输，容易被监听</li>
<li>信息可以被篡改</li>
<li>不验证对方身份，可能遇到伪装</li>
</ul>
<h2 id="对称与非对称加密"><a href="#对称与非对称加密" class="headerlink" title="对称与非对称加密"></a>对称与非对称加密</h2><p>对称加密/私钥加密：即加解密使用同一个密钥。</p>
<p>非对称加密/公钥加密：需要一对密钥–私钥和公钥。私钥加密的内容只有公钥能解密，公钥加密的内容只有私钥能解密。私钥私有，公钥对外发布。</p>
<p>一般来说，对称加解密速度更快，但安全性稍弱，而非对称加解密速度稍慢，但安全性更高。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><p>HTTPS（Hypertext Transfer Protocol Secure，超文本传输安全协议），使用HTTP进行通信，SSL/TLS加密数据包。</p>
<p>HTTPS混合使用非对称加密与对称加密：http内容通过对称加密算法进行加密，而对称密钥的协商过程则使用非对称加密算法进行加密。</p>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>加密问题解决了，但是通过中间人攻击仍旧可以对通信内容进行监听。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210726180127.png" alt="image-20210726164436657"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210726215140.png" alt="2116505485-5e8c93c2e0584"></p>
<p>​                            （图片来自参考二）</p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><blockquote>
<p>给定一条消息M作为输入，加密散列函数的输出H称为这条消息的摘要或指纹H(M)。</p>
<p>摘要的特性：</p>
<ul>
<li>原像不可计算性：给定摘要H(M)而未知消息M的情况下，难以计算出消息M的值；</li>
<li>原像不相同性：给定消息M1的摘要，找出一条消息M2（M2!=M1）使其摘要H(M2)等于M1的摘要（H(M1)==H(M2)）是十分困难的；</li>
<li>抗碰撞性：找出一对摘要相同（H(M1)==H(M2)）而自身不同的消息（M2!=M1）是十分困难的。</li>
</ul>
</blockquote>
<h4 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h4><p>常见摘要算法有MD5、SHA-1、SHA256、SHA-2等。</p>
<p>目前，MD5已与2005年被宣告破解（两个不同的128字节的序列被证明具有相同的MD5值），而SHA-1、SHA-2也被认为具有潜在的脆弱性。<sup><a href='#ref1'>3</a></sup> </p>
<p>2017年，CWI Amsterdam 与 Google 宣布了一个成功的 SHA-1 碰撞攻击。<sup><a href='#ref4'>4</a></sup></p>
<h4 id="数字签名-1"><a href="#数字签名-1" class="headerlink" title="数字签名"></a>数字签名</h4><p>使用私钥对消息摘要进行加密后，得到的输出称为数字签名。</p>
<ul>
<li><p>签名：发送方使用私钥对消息摘要进行加密，得到签名。</p>
</li>
<li><p>验签：接收方使用公钥对签名进行解密，将得到的摘要与消息内容的摘要进行对比。</p>
</li>
<li><p>数字签名过程需要使用到私钥，所以除非私钥泄漏，其他人无法伪造。</p>
</li>
<li><p>数字签名的不可伪造性，使得它可以用来确认一个实体，类似于现实中的个人签名。</p>
</li>
</ul>
<h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><p>数字签名依赖于公钥与私钥，但是客户端与服务端交换公钥的过程仍旧可能受到攻击，比如中间人攻击，客户端可能收到伪造的服务端公钥。</p>
<p>为了解决这一问题，引入数字证书。</p>
<p>数字证书由CA机构进行颁发，内容包括所有人信息、所有人公钥、有效期、以及认证机构信息、认证机构的数字签名等。数字证书的本质是数字签名+公钥+证书认证机构（Certificate Authority）。</p>
<p>通过证书上的数字签名可以对证书内容的完整性进行验证，验证通过后，客户端可以信任证书中的公钥即为证书所有人的公钥。</p>
<h4 id="数字证书的验证"><a href="#数字证书的验证" class="headerlink" title="数字证书的验证"></a>数字证书的验证</h4><p>数字证书由可信任的CA机构颁发，通常认为如果一个CA机构可信任，则由该机构颁发的证书为可信任证书。</p>
<p>在对数字证书进行验证时，也需要对签发这个证书的CA证书进行验证，一直到根证书为止。</p>
<h4 id="根证书"><a href="#根证书" class="headerlink" title="根证书"></a>根证书</h4><p>数字证书体系是一个分层级的、中心化的认证体系。</p>
<p>根证书，又称自签名证书，是指CA机构给自己颁发的证书。根证书也是信任链的起点。</p>
<p>根证书一般由操作系统/浏览器内置。</p>
<h3 id="HTTPS解决的问题"><a href="#HTTPS解决的问题" class="headerlink" title="HTTPS解决的问题"></a>HTTPS解决的问题</h3><ul>
<li>信息窃听问题：加密传输；</li>
<li>信息完整性问题：SSL/TLS具备完整性验证能力-MAC(Message Authentication code)；</li>
<li>遭遇伪装：数字证书，可以进行服务端和客户端的验证。</li>
</ul>
<h3 id="HTTPS握手过程"><a href="#HTTPS握手过程" class="headerlink" title="HTTPS握手过程"></a>HTTPS握手过程</h3><p>依赖于client与server商定的具体加密套件，HTTPS握手可以分为两类：基于RSA的握手和基于Deffie-Hellman的握手。</p>
<p>两种握手方式主要是密钥交换和身份认证方式上的不同。</p>
<h4 id="基于Deffie-Hellman方式的握手"><a href="#基于Deffie-Hellman方式的握手" class="headerlink" title="基于Deffie Hellman方式的握手"></a>基于Deffie Hellman方式的握手</h4><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210729162324.png" alt="image-20210729162324573"></p>
<h4 id="基于RSA方式的握手"><a href="#基于RSA方式的握手" class="headerlink" title="基于RSA方式的握手"></a>基于RSA方式的握手</h4><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210729162239.png" alt="image-20210729162239422"></p>
<h4 id="密码套件的格式说明"><a href="#密码套件的格式说明" class="headerlink" title="密码套件的格式说明"></a>密码套件的格式说明</h4><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210729162702.png" alt="ssl-handshake-ciphers"></p>
<h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><ul>
<li>基于DH的握手</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210729162803.png" alt="image-20210729162803287"></p>
<ul>
<li><p>基于RSA的握手</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210729162840.png" alt="image-20210729162840465"></p>
</li>
</ul>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://github.com/Abug0/abug0.github.io/raw/master/IT/imgs/https-DH.cap.pcapng">https-DH.cap.pcapng</a></p>
<p><a href="https://github.com/Abug0/abug0.github.io/raw/master/IT/imgs/https-RSA.cap.pcapng">https-RSA.cap.pcapng</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/xdyixia/p/11610102.html">[1] HTTPS中CA证书的签发及使用过程</a></p>
<p><a href="https://segmentfault.com/a/1190000022294393">[2] Http和Https之间的区别，及原理分析</a></p>
<p><a href="">[3] TCP/IP详解 卷1：协议 18.4.8(第2版)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1584742">[4] 常用消息摘要算法简介</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1548350">[5] 使用openssl创建https证书</a></p>
<p><a href="https://www.digac.cc/2020/06/use_openssl_to_create_root_certificate_intermediate_certificate_and_server_certificate.html">[6] 在Linux下使用openssl创建根证书，中间证书和服务端证书</a></p>
<p><a href="https://blog.51cto.com/wushank/1915795">[7] der pem cer crt key pfx等概念及区别</a></p>
<p><a href="https://blog.csdn.net/HANQIAN12345/article/details/101971671">[8] 利用OpenSSL创建证书链并应用于IIS7</a></p>
<p><a href="https://blog.opensvc.net/duo-yu-ming-zheng-shu-qian-fa/">[9] 多域名证书签发</a></p>
<p><a href="https://monkeywie.cn/2019/11/15/create-ssl-cert-with-san/">[10] OpenSSL创建带SAN扩展的证书并进行CA自签</a></p>
<p><a href="https://razeencheng.com/post/ssl-handshake-detail.html">[11] HTTPS篇之SSL握手过程详解</a></p>
<p><a href="https://juejin.cn/post/6895624327896432654">[12] TLS详解握手流程</a></p>
<p><a href="https://juejin.cn/post/6844904158319869960">[13] 消息认证码与数字签名的理解</a></p>
<p><a href="https://segmentfault.com/a/1190000022012971">[15] HTTPS解决了什么问题</a></p>
<p><a href="http://wsfdl.com/algorithm/2016/02/04/%E7%90%86%E8%A7%A3Diffie-Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95.html">[16] 理解Deffie-Hellman密钥交换算法</a></p>
<p><a href="https://tls.ulfheim.net/">17 图解TLS–字节级分析</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP三次握手与四次挥手</title>
    <url>/IT/%E7%BD%91%E7%BB%9C/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.html</url>
    <content><![CDATA[<h1 id="TCP三次握手与四次挥手"><a href="#TCP三次握手与四次挥手" class="headerlink" title="TCP三次握手与四次挥手"></a>TCP三次握手与四次挥手</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="../imgs/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" alt="TCP三次握手"></p>
<h3 id="为什么需要三次握手"><a href="#为什么需要三次握手" class="headerlink" title="为什么需要三次握手"></a>为什么需要三次握手</h3><p> 引用网络搜到的原文(据说来源《计算机网络》)：</p>
<blockquote>
<p>已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>
</blockquote>
<p><strong>思考:</strong> 三次握手实际是将连接建立的控制权交给了客户端（note: 主动发起连接的一方），必须客户端确认后才会建立，避免无效的资源浪费。如果是二次握手，那么控制权在服务端，就会出现上文的情况。而四次乃至更多次的握手，本质上与二次/三次握手没有区别，反而浪费资源，没有必要。</p>
<p>​    三次握手可能会让客户端错误的处于ESTABLISHED状态，但考虑到客户端与服务端的角色，客户端的资源浪费处于可接受范围，基本不会出现大量连接都实际处于半连接状态进而导致服务不可用的情况。</p>
<p><strong>总结: 三次握手是为了确认客户端–&gt;服务端以及服务端–&gt;客户端两个方向的网络连通性</strong></p>
<h3 id="三次握手中的超时"><a href="#三次握手中的超时" class="headerlink" title="三次握手中的超时"></a>三次握手中的超时</h3><ul>
<li>客户端发送SYN后，处于SYN_SENT状态，等待SYN+ACK超时；</li>
<li>服务端收到SYN，发送SYN_ACK后，处于SYN_RCVD状态，等待ACK超时；</li>
</ul>
<p>等待超时后重传，超过最大重传次数后，终止连接创建。</p>
<h3 id="Linux下的相关参数"><a href="#Linux下的相关参数" class="headerlink" title="Linux下的相关参数"></a>Linux下的相关参数</h3><blockquote>
<ul>
<li><p>tcp_syn_retries (integer; default: 5; since Linux 2.2)</p>
<p>The maximum number of times initial SYNs for an active TCP connection attempt will be retransmitted. This value should not be higher than 255. The default value is 5, which corresponds to approximately 180 seconds.</p>
</li>
<li><p>tcp_synack_retries (integer; default: 5; since Linux 2.2)</p>
<p>The maximum number of times a SYN/ACK segment for a passive TCP connection will be retransmitted. This number should not be higher than 255.</p>
</li>
</ul>
</blockquote>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_synack_retries</span><br><span class="line">cat /proc/sys/net/ipv4/tcp_syn_retries</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="可能出现的情况"><a href="#可能出现的情况" class="headerlink" title="可能出现的情况"></a>可能出现的情况</h3><ul>
<li><p>1）客户端ESTABLISHED, 服务端SYN_RCVD</p>
<p>此时客户端发送数据包时会携带ACK，服务端收到后自动完成连接建立过程，转变为ESTABLISHED。</p>
</li>
<li><p>2）客户端ESTABLISHED, 服务端SYS_RCVD等待超时，即终止创建该连接</p>
<p>客户端在实际不存在的连接上发送报文，服务端返回RST。(未验证)</p>
</li>
</ul>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="../imgs/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.jpg" alt="TCP四次挥手"></p>
<h3 id="为什么需要四次挥手"><a href="#为什么需要四次挥手" class="headerlink" title="为什么需要四次挥手"></a>为什么需要四次挥手</h3><p>客户端（或者服务端）主动断开连接时，可能对端还在发送数据，因此此时只需要对端回馈ACK消息，然后等待数据传输完成。服务端（或者客户端）数据传输完成后，发送FIN消息给对端，表明此时可以关闭了。</p>
<p><strong>最后一次FIN发送后不能立即关闭，必须等待ACK，避免对端未收到FIN消息，造成资源浪费</strong></p>
<ul>
<li><h4 id="为什么TIME-WAIT要等待2MSL"><a href="#为什么TIME-WAIT要等待2MSL" class="headerlink" title="为什么TIME_WAIT要等待2MSL"></a>为什么TIME_WAIT要等待2MSL</h4><p>MSL为最大段生存期。等待2MSL是为了确保对端收到了ACK。</p>
<p>进入TIME_WAIT状态后，对端FIN报文的等待超时时间应当是小于MSL的。</p>
<p>引用网络原文（参考二）：</p>
<blockquote>
<p>两个理由：</p>
<ul>
<li>保证客户端发送的最后一个ACK报文段能够到达服务端。</li>
</ul>
<p>这个ACK报文段有可能丢失，使得处于LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认，服务端超时重传FIN+ACK报文段，而客户端能在2MSL时间内收到这个重传的FIN+ACK报文段，接着客户端重传一次确认，重新启动2MSL计时器，最后客户端和服务端都进入到CLOSED状态，若客户端在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到服务端重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则服务端无法正常进入到CLOSED状态。</p>
<ul>
<li>防止“已失效的连接请求报文段”出现在本连接中。</li>
</ul>
<p>客户端在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。</p>
</blockquote>
</li>
</ul>
<h3 id="四次挥手中的超时"><a href="#四次挥手中的超时" class="headerlink" title="四次挥手中的超时"></a>四次挥手中的超时</h3><ul>
<li><p>FIN_WAIT_1状态超时</p>
<p>引用网络原文（参考三）：</p>
<blockquote>
<ul>
<li><strong>如果主动断开端调用了close关掉了进程，它会进入FIN_WAIT1状态，此时如果它再也收不到ACK，无论是针对pending在发送缓冲的数据还是FIN，它都会尝试重新发送，在收到ACK前会尝试N次退避，该N由tcp_orphan_retries参数控制。</strong></li>
</ul>
</blockquote>
</li>
<li><p>FIN_WAIT_2状态超时</p>
<p>超时后放弃这条连接。linux下由tcp_fin_timeout参数控制。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_fin_timeout</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>TIME_WAIT状态超时</p>
<p>见参考四。</p>
</li>
<li><p>LAST_ACK超时</p>
<p>见参考五。</p>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.qiusuo.im/blog/2014/03/19/tcp-timeout/">参考一: TCP协议中的超时</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/86426969">参考二: TCP三次握手与四次挥手</a></p>
<p><a href="https://blog.csdn.net/dog250/article/details/81697403">参考三: TCP在FIN_WAIT1状态到底能持续多久以及TCP假连接问题</a></p>
<p><a href="http://blog.qiusuo.im/blog/2014/03/19/tcp-timeout/">参考四: TCP中的超时和Linux参数</a></p>
<p><a href="https://www.zhihu.com/question/27564314">参考五: LAST_ACK状态收不到ACK</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/146752547">参考六: 面试官：换人！他连 TCP 这几个参数都不懂</a></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="针对参考三的补充："><a href="#针对参考三的补充：" class="headerlink" title="针对参考三的补充："></a>针对参考三的补充：</h3><p>nc（netcat）安装：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nc -y</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>以及实验一中iptables命令，需替换为：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -s 1.1.1.1 --tcp-flags ACK,FIN ACK -j DROP</span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>推送单次commit</title>
    <url>/IT/Tools/git/%E6%8E%A8%E9%80%81%E5%8D%95%E6%AC%A1commit.html</url>
    <content><![CDATA[<h1 id="git推送单次commit"><a href="#git推送单次commit" class="headerlink" title="git推送单次commit"></a>git推送单次commit</h1><p>一、将某次commit</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;remote name&gt; &lt;commit <span class="built_in">hash</span>&gt;:&lt;remote branch name&gt;</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">$ git push origin 2dc2b7e393e6b712ef103eaac81050b9693395a4:master</span><br></pre></td></tr></table></figure>
    </div>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>协程解析</title>
    <url>/IT/%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91/%E5%8D%8F%E7%A8%8B%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="协程解析"><a href="#协程解析" class="headerlink" title="协程解析"></a>协程解析</h1><h2 id="eventlet解析"><a href="#eventlet解析" class="headerlink" title="eventlet解析"></a>eventlet解析</h2><p><a href="https://blog.csdn.net/q454684431/article/details/11815323">参考一: eventlet原理解析</a></p>
<p><a href="http://luckylau.tech/2017/03/06/Python%E7%9A%84eventlet%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3/">参考二: eventlet原理解析</a></p>
<p><a href="http://www.lolizeppelin.com/2017/03/10/python-eventlet/">参考三: eventlet源码解析</a></p>
<h2 id="协程库libco实现原理解析"><a href="#协程库libco实现原理解析" class="headerlink" title="协程库libco实现原理解析"></a>协程库libco实现原理解析</h2><p><a href="https://zhuanlan.zhihu.com/p/27409164">参考一: libco上下文切换解析</a></p>
<p><a href="https://blog.didiyun.com/index.php/2018/11/23/libco/">参考二: libco原理及应用</a></p>
<p><a href="https://www.infoq.cn/article/CplusStyleCorourtine-At-Wechat">参考三: libco特性介绍</a></p>
<p><a href="http://masutangu.com/2018/12/10/libco-share-stack/">参考四: 共享栈源码及其隐含错误</a></p>
<h2 id="协程实现与达夫设备"><a href="#协程实现与达夫设备" class="headerlink" title="协程实现与达夫设备"></a>协程实现与达夫设备</h2><p><a href="https://mthli.xyz/coroutines-in-c/">参考一: C语言实现协程</a></p>
<p>[参考二: 关于达夫设备](http s://blog.csdn.net/hmq252198885/article/details/46621659?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param)</p>
<p><a href="https://www.zhihu.com/question/52193579">参考三: libaco、共享栈与协程切换的数学证明</a></p>
<p><a href="http://akira.ruc.dk/~keld/research/COROUTINE/COROUTINE-1.0/DOC/COROUTINE_REPORT.pdf">参考四: 协程文档</a></p>
<p> <a href="..%5C%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%5CCOROUTINE_REPORT.pdf">参考四-2: COROUTINE_REPORT.pdf</a> </p>
<p><a href="https://github.com/hnes/libaco">参考五: libaco</a></p>
<p><a href="https://www.jianshu.com/p/837bb161793a">参考六: 协程近况</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>编程</category>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>可重入函数、可重入锁与threading.Condition</title>
    <url>/IT/%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91/%E5%8F%AF%E9%87%8D%E5%85%A5%E5%87%BD%E6%95%B0%E3%80%81%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E4%B8%8Ethreading.Condition.html</url>
    <content><![CDATA[<h1 id="可重入函数、可重入锁与threading-Condition"><a href="#可重入函数、可重入锁与threading-Condition" class="headerlink" title="可重入函数、可重入锁与threading.Condition"></a>可重入函数、可重入锁与threading.Condition</h1><h2 id="一、可重入函数与可重入锁"><a href="#一、可重入函数与可重入锁" class="headerlink" title="一、可重入函数与可重入锁"></a>一、可重入函数与可重入锁</h2><h3 id="1、可重入函数"><a href="#1、可重入函数" class="headerlink" title="1、可重入函数"></a>1、可重入函数</h3><p>可在执行的任何时刻被中断然后调度程序执行另一段代码，这段代码再次调用该子程序而不出错。</p>
<p>官方定义:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A computer program or routine is described as reentrant if it can be safely called again before its previous invocation has been completed (i.e it can be safely executed concurrently)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><strong>可重入函数的条件</strong>:</p>
<ul>
<li><p>不能使用全局变量或者引用外部地址。函数内可能修改这些变量。</p>
</li>
<li><p>可重入函数的代码应该保持一致。避免使用可重入函数的副本(???)。</p>
</li>
<li><p>不能使用非可重入锁。非可重入锁会导致阻塞(被中断的子例程可能持有该锁而未释放)。</p>
</li>
</ul>
<p><strong>可重入函数与线程安全</strong>:</p>
<p>本质区别: 可重入函数是单线程时代出现的概念，与多线程无关。</p>
<p>函数可能是线程安全但不可重入，比如，使用了互斥锁。</p>
<h3 id="2、可重入锁"><a href="#2、可重入锁" class="headerlink" title="2、可重入锁"></a>2、可重入锁</h3><p>同一线程获得锁之后，该线程内部仍能再次获得该锁。</p>
<h2 id="threading-Condition"><a href="#threading-Condition" class="headerlink" title="threading.Condition"></a>threading.Condition</h2><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pass</span><br></pre></td></tr></table></figure>
    </div>
</div>



<p><a href="https://segmentfault.com/a/1190000022571212">参考一: 可重入函数与可重入锁</a></p>
<p><a href="https://www.geeksforgeeks.org/reentrant-function/">参考二: Reentrant Function</a></p>
<p><a href="https://reishin.me/python-source-code-parse-with-rlock/">参考三: RLock源码分析</a></p>
<p><a href="http://timd.cn/python/threading/condition/">参考四: threading.Condition源码分析</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>编程</category>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-consul跨主机Overlay网络搭建</title>
    <url>/IT/%E8%99%9A%E6%8B%9F%E5%8C%96/Docker/Docker-consul%E8%B7%A8%E4%B8%BB%E6%9C%BAOverlay%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<h1 id="Docker跨主机网络搭建–consul"><a href="#Docker跨主机网络搭建–consul" class="headerlink" title="Docker跨主机网络搭建–consul"></a>Docker跨主机网络搭建–consul</h1><p><a href="https://www.cnblogs.com/viter/p/11018953.html">参考一: consul初探-从安装到运行</a></p>
<p><a href="https://sanyuesha.com/2017/11/15/what-about-consul/">参考二: consul安装和基本使用</a></p>
<h2 id="一、需要搭建consul"><a href="#一、需要搭建consul" class="headerlink" title="一、需要搭建consul"></a>一、需要搭建consul</h2><p>注意事项：搭建consul集群前需确保每台服务器的hostname不同，且关闭防火墙，不然会有问题[docker跨主机网络不通问题排查](..\docker consul跨主机网络不通.md)</p>
<h3 id="1、安装consul"><a href="#1、安装consul" class="headerlink" title="1、安装consul"></a>1、安装consul</h3><p>下载地址：<a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a> ，安装过程见参考一和二；</p>
<h3 id="2、启动consul"><a href="#2、启动consul" class="headerlink" title="2、启动consul"></a>2、启动consul</h3><p>三台服务器分别运行</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一台</span></span><br><span class="line">consul agent -server -ui -bootstrap-expect=1 -data-dir=/data/consul -node=agent-1 -client=0.0.0.0 -bind=192.168.93.128 -datacenter=dc1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">第二台</span></span><br><span class="line">consul agent -ui -data-dir=/data/consul -node=agent-2 -client=0.0.0.0 -bind=192.168.93.129 -datacenter=dc1 -join 192.168.93.128</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash">第三台</span></span><br><span class="line">consul agent -ui -data-dir=/data/consul -node=agent-2 -client=0.0.0.0 -bind=192.168.93.130 -datacenter=dc1 -join 192.168.93.128</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>此时可通过192.168.93.128(129/130):8500访问consul<img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017201429.png" alt="image-20201017201429704"></p>
<p>在三台服务器上分别执行consul members，结果如图，consul搭建成功：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017201520.png" alt="image-20201017201519980"></p>
<h2 id="二、启动docker，创建overlay网络"><a href="#二、启动docker，创建overlay网络" class="headerlink" title="二、启动docker，创建overlay网络"></a>二、启动docker，创建overlay网络</h2><p>1、执行</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建网络</span><br><span class="line">docker network create -d overlay test-overlay</span><br><span class="line"></span><br><span class="line">#查看网络</span><br><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line">#创建container实例, 分别在两台服务器上创建，此时可互相ping通</span><br><span class="line">docker run -itd --name test02 --network test-overlay centos</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017201806.png" alt="image-20201017201806645"><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20201017202009.png" alt="image-20201017202009205"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>虚拟化</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中的虚拟网络一</title>
    <url>/IT/%E8%99%9A%E6%8B%9F%E5%8C%96/%E7%BD%91%E7%BB%9C/Linux%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E4%B8%80.html</url>
    <content><![CDATA[<h1 id="Linux中的虚拟网络一：tap-tun与veth"><a href="#Linux中的虚拟网络一：tap-tun与veth" class="headerlink" title="Linux中的虚拟网络一：tap/tun与veth"></a>Linux中的虚拟网络一：tap/tun与veth</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>[TOC]</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://opengers.github.io/openstack/openstack-base-virtual-network-devices-bridge-and-vlan/">参考一: 云计算底层技术-虚拟网络设备：bridge（bridge decision过程、bridge与netfilter关系、vlan设备原理）</a></p>
<p><a href="https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/">参考二: 云计算底层技术-虚拟网络设备：tap/tun,veth（文内包含虚机的数据流向分析）</a></p>
<p><a href="https://www.jianshu.com/p/09f9375b7fa7">参考三: TUN/TAP设备解析</a></p>
<p><a href="https://blog.liu-kevin.com/2020/01/06/tun-tapshe-bei-qian-xi/">参考四: TUN/TAP设备收发包流程分析</a></p>
<p><a href="https://segmentfault.com/a/1190000009491002">参考五: veth设备与bridge通信过程分析</a> </p>
<p><a href="https://zhuanlan.zhihu.com/p/139247344">参考六: 数据包在各层间的流向分析</a></p>
<p><a href="https://opengers.github.io/openstack/openstack-base-netfilter-framework-overview/">参考七: netfilter框架（iptables、netfilter处理流程及连接跟踪表）</a></p>
<p><a href="https://github.com/ICKelin/article/issues/9">Tun/Tap设备基本原理</a></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084804.png" alt="bridge"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816163436.jpg" alt="yDTFvEohmQfiWz5"></p>
<h3 id="关于参考的补充"><a href="#关于参考的补充" class="headerlink" title="关于参考的补充"></a>关于参考的补充</h3><h5 id="针对参考的补充：tc、bridge-check、iptables与协议栈"><a href="#针对参考的补充：tc、bridge-check、iptables与协议栈" class="headerlink" title="针对参考的补充：tc、bridge check、iptables与协议栈"></a>针对参考的补充：tc、bridge check、iptables与协议栈</h5><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816175903.png" alt="netfilter"></p>
<h5 id="针对参考五的补充一：关于tcpdump抓包位置与网络协议栈"><a href="#针对参考五的补充一：关于tcpdump抓包位置与网络协议栈" class="headerlink" title="针对参考五的补充一：关于tcpdump抓包位置与网络协议栈"></a>针对参考五的补充一：关于tcpdump抓包位置与网络协议栈</h5><p>此处参考 <a href="../../%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/tcpdump%E8%A7%A3%E6%9E%90.md">tcpdump解析</a></p>
<p><img src="C:/Users/pc/Desktop/1546067532777618.png" alt="tcp生效位置与网络协议栈"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816123402.jpg" alt="iptables数据流向"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816124406.jpg" alt="数据流向分析"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816124414.jpg" alt="部分工具工作层次"></p>
<h5 id="针对参考五的补充二：关于tap-tun设备数据包上行到协议栈的补充"><a href="#针对参考五的补充二：关于tap-tun设备数据包上行到协议栈的补充" class="headerlink" title="针对参考五的补充二：关于tap/tun设备数据包上行到协议栈的补充"></a>针对参考五的补充二：关于tap/tun设备数据包上行到协议栈的补充</h5><p>实际上，用报文不进入协议栈这样的说法是不准确的，确切的说，应该是报文在到达设备对应的层次（tap是二层，tun是三层）后，报文会流向bridge,继而离开主机的协议栈，去往tap/tun或者其他命名空间。</p>
<h5 id="针对参考六的补充：ebtables过滤未生效的思考"><a href="#针对参考六的补充：ebtables过滤未生效的思考" class="headerlink" title="针对参考六的补充：ebtables过滤未生效的思考"></a>针对参考六的补充：ebtables过滤未生效的思考</h5><p>根据下图，在配有docker环境的centos8系统中，docker网络模式为bridge，做端口映射（通过nat）。</p>
<p>配置ebtables规则，前后两次实验分别是filter/forward、filter/input，动作为=drop，抓包分析来看，均未生效，容器内部皆能收到包（bridge_bf关闭与否结果一致），结论为数据包未经过ebtables filter input/forward。</p>
<p>在filter/output配置drop，包被丢弃，容器内未收到。</p>
<p>使用iptables配置规则：</p>
<ul>
<li><p>filter/forward–drop，包被丢弃，表现为容器内部收不到包；</p>
</li>
<li><p>filter/input–drop，包未被丢弃，容器内可收到；</p>
</li>
<li><p>filter-output–drop，未被丢弃，容器内可收到；</p>
<p>根据以上实验结果，可知数据包路径：</p>
<ul>
<li>INPUT PATH：bridge check后走T，进入Network Layer，直到routing decision。（走T路线的原因：外部访问时的目的IP实际为host物理网卡IP，该网卡未挂载到网桥，不属于桥设备）</li>
<li>FORWARD PATH：routing decision后，进入Link Layer；</li>
<li>OUTPUT PATH：Link Layer。</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816175903.png" alt="netfilter"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084804.png" alt="bridge"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>虚拟化</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中的虚拟网络三-OpenStack</title>
    <url>/IT/%E8%99%9A%E6%8B%9F%E5%8C%96/%E7%BD%91%E7%BB%9C/Linux%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E4%B8%89-OpenStack.html</url>
    <content><![CDATA[<h2 id="Linux中的虚拟网络三-OpenStack"><a href="#Linux中的虚拟网络三-OpenStack" class="headerlink" title="Linux中的虚拟网络三-OpenStack"></a>Linux中的虚拟网络三-OpenStack</h2><p><a href="https://www.sdnlab.com/13000.html">参考一: OpenStack Neutron网络分析</a></p>
<p><a href="http://202.196.166.180/downloads/CDN/openstack_understand_neutron.pdf">参考二: OpenStack网络组件、类型及其实现</a></p>
<p><a href="....%5C%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%5Copenstack_understand_neutron.pdf">参考二: openstack_understand_neutron.pdf</a> <img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816221835.jpg" alt="OpenStack网络模型"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200920205310.jpg" alt="6-1554090779"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>虚拟化</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中的虚拟网络二-Docker</title>
    <url>/IT/%E8%99%9A%E6%8B%9F%E5%8C%96/%E7%BD%91%E7%BB%9C/Linux%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E4%BA%8C-Docker.html</url>
    <content><![CDATA[<h2 id="Linux中的虚拟网络-docker"><a href="#Linux中的虚拟网络-docker" class="headerlink" title="Linux中的虚拟网络-docker"></a>Linux中的虚拟网络-docker</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>[toc]</p>
<h4 id="单主机网络模型"><a href="#单主机网络模型" class="headerlink" title="单主机网络模型"></a>单主机网络模型</h4><p>docker中的网络模型默认使用bridge模式，会在host上创建一个名为docker0的网桥（bridge），关于Docker网络模型的参考见：</p>
<p><a href="https://zhuanlan.zhihu.com/p/98788162">参考一: Docker网络模型</a></p>
<p><a href="https://www.jianshu.com/p/a14ebdc37386">参考二: Docker网络模型</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60172686">参考三: 关于Docker Bridge模式下iptables仅存在SNAT规则是的情况分析</a></p>
<p>下文使用bridge模式。</p>
<p>bridge模式下实际会为每个容器创建一套单独的网络命名空间，但此时执行ip netns list查看，无输出，原因：ip netns 列出的实际是/var/run/netns目录下的内容，通常只有ip netns add添加的命名空间可通过此方式获取，docker创建的命名空间文件默认是在/var/run/docker/ns目录下。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084243.png" alt="docker创建的网络命名空间"></p>
<p>将该目录下内容链接到/var/run/netns下，执行ip netns list，可看到docker创建的命名空间：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084253.png" alt="1131即为docker创建的命名空间"></p>
<p>执行docker inspect {container_id}可以查看对应的命名空间（途中标注出的id）：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084257.png" alt="docker容器信息"></p>
<p>启动容器时创建会一对veth设备，查看设备信息，可以看到设备类型（veth）以及链接到的命名空间，查看该空间内的设备，可以看到两者恰为一对（分别是if5和4）：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084301.png" alt="启动一个docker容器后,查看主机网络"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084307.png" alt="veth设备信息"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084313.png" alt="查看对端设备"></p>
<p>在host上执行bridge -d fdb查看转发表，分别为容器内发出数据包前后，可以看到第二张图多了一条，02:42:ac:11:00:02正是容器内网卡（该容器只有一张网卡）的mac地址:</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084330.png" alt="mac转发表"></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816084334.png" alt="mac转发表"></p>
<h4 id="跨主机网络模型"><a href="#跨主机网络模型" class="headerlink" title="跨主机网络模型"></a>跨主机网络模型</h4><p><a href="https://www.infoq.cn/article/9vfPPfZPrXLM4ssLlxSR">参考一: overlay跨主机实验</a> dfbvjip</p>
<p><a href="https://juejin.im/post/6844904057211994120">参考二: overlay跨主机实验</a></p>
<p><a href="https://www.jianshu.com/p/3b9389084701?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">参考三: Deep Dive into docker overlay</a></p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20200816224647.png" alt="Docker overlay网络模型"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>虚拟化</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>OVS文档</title>
    <url>/IT/%E8%99%9A%E6%8B%9F%E5%8C%96/%E7%BD%91%E7%BB%9C/OVS%E6%96%87%E6%A1%A3.html</url>
    <content><![CDATA[<h1 id="OVS相关文档"><a href="#OVS相关文档" class="headerlink" title="OVS相关文档"></a>OVS相关文档</h1><p>收集OVS相关的资料。</p>
<p><a href="http://www.openvswitch.org/support/dist-docs/ovs-vswitchd.8.txt">OpenVSwitch Manual</a></p>
<p><a href="https://chengqian90.com/Openvswitch/OVS%E6%95%B0%E6%8D%AE%E6%94%B6%E5%8F%91%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90.html">OVS接口类型及收发包过程</a></p>
<p><a href="http://ry0117.com/2016/12/25/OVS%E4%B8%AD%E7%AB%AF%E5%8F%A3%E6%95%B0%E6%8D%AE%E5%8C%85%E6%94%B6%E5%8F%91%E6%B5%81%E7%A8%8B/">OVS端口收发包流程</a></p>
<p><a href="http://blog.chinaunix.net/uid-15035748-id-5379887.html">OVS端口在内核中的收发流程: 为什么iptables和ovs端口不兼容</a></p>
<p><a href="http://aidaiz.com/openvswitch-build/">OVS安装</a></p>
<p><a href="https://zh.codepre.com/how-to-10451.html">OVS安装-CentOS8</a></p>
<p><a href="https://tonydeng.github.io/sdn-handbook/ovs/internal.html">OVS原理</a></p>
<p><a href="https://www.xiexianbin.cn/openvswitch/2015-05-23-openvswitch-complete-manual/index.html">OVS手册和案例</a></p>
<p><a href="https://www.infoq.cn/article/oaGPpdcG*A1ZqKZgBbCb">OVS安全组和防火墙</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60032628">防火墙: 有状态和无状态</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/33658624">VPC浅谈</a></p>
<p><a href="https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/how-it-works.html">Amazon VPC原理</a></p>
<p><a href="https://zhanggq.github.io/post/zgq-sdn-ovs-flow/">OVS流表分析</a></p>
<p><a href="http://aspirer.wang/?p=968">OVS OpenFlow流表规则及操作</a></p>
<p><a href="https://zhangchenchen.github.io/2017/06/20/neutron-dvr/">Neutron: 分布式虚拟路由</a></p>
<p><a href="https://www.cnblogs.com/sammyliu/p/4636091.html">Neutron: 三层网络实现</a></p>
<p><a href="https://www.cnblogs.com/sammyliu/p/4713562.html">Neutron: 分布式虚拟路由</a></p>
<p><a href="https://www.shuzhiduo.com/A/gAJGY3e0dZ/">Neutron: 分布式虚拟路由的优势</a></p>
<p><a href="https://www.opencloudblog.com/?cat=4">Open Cloud Blog</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>虚拟化</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>best_fields,most_fields与cross_fields</title>
    <url>/IT/ElasticSearch/best_fields,most_fields%E4%B8%8Ecross_fields.html</url>
    <content><![CDATA[<h1 id="Best-fields-most-fields与cross-fields"><a href="#Best-fields-most-fields与cross-fields" class="headerlink" title="Best_fields, most_fields与cross_fields"></a>Best_fields, most_fields与cross_fields</h1><p>本文使用的ES版本为6.4.0。</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210109205211.png" alt="ES信息"></p>
<p>添加测试数据：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PUT /my_index/my_type/1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;: &quot;Quick brown rabbits&quot;,</span><br><span class="line">    &quot;body&quot;:  &quot;Brown rabbits are commonly seen.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /my_index/my_type/2</span><br><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;: &quot;Keeping pets healthy&quot;,</span><br><span class="line">    &quot;body&quot;:  &quot;My quick brown fox eats rabbits on a regular basis.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>





<h2 id="一、bool"><a href="#一、bool" class="headerlink" title="一、bool"></a>一、bool</h2><p>bool查询，加入explain=true查看scoring细节：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:9200/test/t1/_search?explain=true</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;should&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;title&quot;: &quot;brown fox&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;body&quot;: &quot;brown fox&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>结果：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>: <span class="number">35</span>,</span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span>: <span class="number">0.90425634</span>,</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_shard&quot;</span>: <span class="string">&quot;[test][3]&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_node&quot;</span>: <span class="string">&quot;Pj5kK5RaSq2K6FCefYOndQ&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;t1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;Gznx5nYBq3EYBRDnWgZe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">0.90425634</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Quick brown rabbits&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;Brown rabbits are commonly seen.&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_explanation&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.90425634</span>,</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;sum of:&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.6931472</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;sum of:&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.6931472</span>,</span><br><span class="line">                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;weight(title:brown in 0) [PerFieldSimilarity], result of:&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.6931472</span>,</span><br><span class="line">                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span>,</span><br><span class="line">                                            <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.6931472</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docFreq&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">2.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docCount&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;termFreq=1.0&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter k1&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.75</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter b&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">3.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;avgFieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">3.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;fieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.21110918</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;sum of:&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.21110918</span>,</span><br><span class="line">                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;weight(body:brown in 0) [PerFieldSimilarity], result of:&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.21110918</span>,</span><br><span class="line">                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span>,</span><br><span class="line">                                            <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.18232156</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">2.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docFreq&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">2.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docCount&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">1.1578947</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;termFreq=1.0&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter k1&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.75</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter b&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">7.5</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;avgFieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">5.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;fieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_shard&quot;</span>: <span class="string">&quot;[test][3]&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_node&quot;</span>: <span class="string">&quot;Pj5kK5RaSq2K6FCefYOndQ&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;t1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;HDnx5nYBq3EYBRDnjwZW&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">0.77041245</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Keeping pets healthy&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;_explanation&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.77041245</span>,</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;sum of:&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.77041245</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;sum of:&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.16044298</span>,</span><br><span class="line">                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;weight(body:brown in 0) [PerFieldSimilarity], result of:&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.16044298</span>,</span><br><span class="line">                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span>,</span><br><span class="line">                                            <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.18232156</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">2.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docFreq&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">2.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docCount&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.88</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;termFreq=1.0&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter k1&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.75</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter b&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">7.5</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;avgFieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">10.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;fieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.6099695</span>,</span><br><span class="line">                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;weight(body:fox in 0) [PerFieldSimilarity], result of:&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.6099695</span>,</span><br><span class="line">                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span>,</span><br><span class="line">                                            <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.6931472</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docFreq&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">2.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;docCount&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                    <span class="attr">&quot;value&quot;</span>: <span class="number">0.88</span>,</span><br><span class="line">                                                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:&quot;</span>,</span><br><span class="line">                                                    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;termFreq=1.0&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">1.2</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter k1&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">0.75</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;parameter b&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">7.5</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;avgFieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;,</span><br><span class="line">                                                        &#123;</span><br><span class="line">                                                            <span class="attr">&quot;value&quot;</span>: <span class="number">10.0</span>,</span><br><span class="line">                                                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;fieldLength&quot;</span>,</span><br><span class="line">                                                            <span class="attr">&quot;details&quot;</span>: []</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    ]</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            ]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<p>分析_explaination部分可以看出，计算过程：</p>
<ul>
<li><p>1）计算match子句内部每个term的score，结果相加作为match子句（即每个field）的score；比如doc2对于match子句</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;match&quot;: &#123;</span><br><span class="line">	&quot;body&quot;: &quot;brown fox&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>的score为</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;value&quot;: 0.77041245,</span><br><span class="line">&quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">&quot;details&quot;: [</span><br><span class="line">	&#123;</span><br><span class="line">        &quot;value&quot;: 0.16044298,</span><br><span class="line">        &quot;description&quot;: &quot;weight(body:brown in 0) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">        &quot;details&quot;: [</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">	&#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;value&quot;: 0.6099695,</span><br><span class="line">        &quot;description&quot;: &quot;weight(body:fox in 0) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">        &quot;details&quot;: [</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">	&#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>2）每个match子句（即每个field）的score相加，作为doc对应于should的score，比如doc1最终的score计算为：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;value&quot;: 0.90425634,</span><br><span class="line">&quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">&quot;details&quot;: [</span><br><span class="line">	&#123;</span><br><span class="line">        &quot;value&quot;: 0.6931472,</span><br><span class="line">        &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">        &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">            &quot;value&quot;: 0.6931472,</span><br><span class="line">            &quot;description&quot;: &quot;weight(title:brown in 0) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">            &quot;details&quot;: [</span><br><span class="line">                ...</span><br><span class="line">            ]</span><br><span class="line">    &#125;，</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;value&quot;: 0.21110918,</span><br><span class="line">        &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">        &quot;details&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;value&quot;: 0.21110918,</span><br><span class="line">            &quot;description&quot;: &quot;weight(body:brown in 0) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">            &quot;details&quot;: [</span><br><span class="line">            	...</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
<li><p>3）因为该查询只有一个should子句，所以should子句的socre作为最终score返回。</p>
</li>
</ul>
<p><em><strong>PS：根据《ElasticSearch权威指南》(基于ES2.x)，步骤三的时候实际要乘以 （匹配语句的总数）/ （所有语句总数）作为最终的score。</strong></em></p>
<p><em><strong>同样的测试语句，书中给出的计算过程截图：</strong></em></p>
<p><img src="C:\Users\zhouguangwei01\AppData\Roaming\Typora\typora-user-images\image-20210109205327826.png" alt="ES权威指南给出的scoring过程"></p>
<p><em><strong>此次基于ES6.4测试，发现没有3、4两个步骤。</strong></em></p>
<h2 id="二、dis-max"><a href="#二、dis-max" class="headerlink" title="二、dis_max"></a>二、dis_max</h2><ul>
<li>问题：分析上文bool查询的计算过程，可以看出，命中的match子句越多，文档的score也就倾向于越高。所以，bool最后查到的实际是在匹配的field更多的docs。假如想查到，和某个field（title或者body）匹配度最高的docs，bool查询并不能满足需求。</li>
</ul>
<p>对此，可使用dis_max查询，不再将每个field的score相加、而是使用Max_Score(field_1, field_2…field_n)作为最终的score。</p>
<p>构造查询：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:9200/test/t1/_search?explain=true</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;should&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;title&quot;: &quot;brown fox&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;body&quot;: &quot;brown fox&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>返回结果：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">took:</span> <span class="number">17</span></span><br><span class="line"><span class="attr">timed_out:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">_shards:</span></span><br><span class="line">  <span class="attr">total:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">successful:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">skipped:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">failed:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">hits:</span></span><br><span class="line">  <span class="attr">total:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">max_score:</span> <span class="number">0.90425634</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">_shard:</span> <span class="string">&quot;[test][3]&quot;</span></span><br><span class="line">    <span class="attr">_node:</span> <span class="string">&quot;Pj5kK5RaSq2K6FCefYOndQ&quot;</span></span><br><span class="line">    <span class="attr">_index:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="attr">_type:</span> <span class="string">&quot;t1&quot;</span></span><br><span class="line">    <span class="attr">_id:</span> <span class="string">&quot;Gznx5nYBq3EYBRDnWgZe&quot;</span></span><br><span class="line">    <span class="attr">_score:</span> <span class="number">0.90425634</span></span><br><span class="line">    <span class="attr">_source:</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">&quot;Quick brown rabbits&quot;</span></span><br><span class="line">      <span class="attr">body:</span> <span class="string">&quot;Brown rabbits are commonly seen.&quot;</span></span><br><span class="line">    <span class="attr">_explanation:</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">0.90425634</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;sum of:&quot;</span></span><br><span class="line">      <span class="attr">details:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.6931472</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;sum of:&quot;</span></span><br><span class="line">        <span class="attr">details:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.6931472</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;weight(title:brown in 0) [PerFieldSimilarity], result of:&quot;</span></span><br><span class="line">          <span class="attr">details:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.6931472</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span></span><br><span class="line">            <span class="attr">details:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.6931472</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) /\</span></span><br><span class="line"><span class="string">                \ (docFreq + 0.5)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docFreq&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">2.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docCount&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.0</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1\</span></span><br><span class="line"><span class="string">                \ - b + b * fieldLength / avgFieldLength)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;termFreq=1.0&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.2</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter k1&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.75</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter b&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">3.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;avgFieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">3.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;fieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.21110918</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;sum of:&quot;</span></span><br><span class="line">        <span class="attr">details:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.21110918</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;weight(body:brown in 0) [PerFieldSimilarity], result of:&quot;</span></span><br><span class="line">          <span class="attr">details:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.21110918</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span></span><br><span class="line">            <span class="attr">details:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.18232156</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) /\</span></span><br><span class="line"><span class="string">                \ (docFreq + 0.5)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">2.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docFreq&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">2.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docCount&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.1578947</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1\</span></span><br><span class="line"><span class="string">                \ - b + b * fieldLength / avgFieldLength)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;termFreq=1.0&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.2</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter k1&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.75</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter b&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">7.5</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;avgFieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">5.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;fieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">_shard:</span> <span class="string">&quot;[test][3]&quot;</span></span><br><span class="line">    <span class="attr">_node:</span> <span class="string">&quot;Pj5kK5RaSq2K6FCefYOndQ&quot;</span></span><br><span class="line">    <span class="attr">_index:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="attr">_type:</span> <span class="string">&quot;t1&quot;</span></span><br><span class="line">    <span class="attr">_id:</span> <span class="string">&quot;HDnx5nYBq3EYBRDnjwZW&quot;</span></span><br><span class="line">    <span class="attr">_score:</span> <span class="number">0.77041245</span></span><br><span class="line">    <span class="attr">_source:</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">&quot;Keeping pets healthy&quot;</span></span><br><span class="line">      <span class="attr">body:</span> <span class="string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span></span><br><span class="line">    <span class="attr">_explanation:</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">0.77041245</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;sum of:&quot;</span></span><br><span class="line">      <span class="attr">details:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.77041245</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;sum of:&quot;</span></span><br><span class="line">        <span class="attr">details:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.16044298</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;weight(body:brown in 0) [PerFieldSimilarity], result of:&quot;</span></span><br><span class="line">          <span class="attr">details:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.16044298</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span></span><br><span class="line">            <span class="attr">details:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.18232156</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) /\</span></span><br><span class="line"><span class="string">                \ (docFreq + 0.5)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">2.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docFreq&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">2.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docCount&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.88</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1\</span></span><br><span class="line"><span class="string">                \ - b + b * fieldLength / avgFieldLength)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;termFreq=1.0&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.2</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter k1&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.75</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter b&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">7.5</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;avgFieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">10.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;fieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.6099695</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;weight(body:fox in 0) [PerFieldSimilarity], result of:&quot;</span></span><br><span class="line">          <span class="attr">details:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.6099695</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">&quot;score(doc=0,freq=1.0 = termFreq=1.0\n), product of:&quot;</span></span><br><span class="line">            <span class="attr">details:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.6931472</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;idf, computed as log(1 + (docCount - docFreq + 0.5) /\</span></span><br><span class="line"><span class="string">                \ (docFreq + 0.5)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docFreq&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">2.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;docCount&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">            <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.88</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">&quot;tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1\</span></span><br><span class="line"><span class="string">                \ - b + b * fieldLength / avgFieldLength)) from:&quot;</span></span><br><span class="line">              <span class="attr">details:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;termFreq=1.0&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">1.2</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter k1&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">0.75</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;parameter b&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">7.5</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;avgFieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line">              <span class="bullet">-</span> <span class="attr">value:</span> <span class="number">10.0</span></span><br><span class="line">                <span class="attr">description:</span> <span class="string">&quot;fieldLength&quot;</span></span><br><span class="line">                <span class="attr">details:</span> []</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>分析_explantion，可以看出计算过程：</p>
<ul>
<li><p>1）计算每个term的score，相加作为field的score；</p>
</li>
<li><p>2）选取前一步计算结果中最大的score作为doc的score返回。</p>
</li>
</ul>
<h3 id="tie-breaker"><a href="#tie-breaker" class="headerlink" title="tie_breaker"></a>tie_breaker</h3><p>加入tie_breaker后，综合考虑其他field的score。计算过程变为：</p>
<ul>
<li>1）计算每个term的score，相加作为field的score；</li>
<li>2）选取前一步计算结果中最大的score，其他field的score的总和乘以tie_breaker，与max_score相加的和作为doc的score返回。即doc_score = max_score + tie_breaker * (score_field_1 + score_field_2 + … + score_field_n)。</li>
</ul>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;dis_max&quot;: &#123;</span><br><span class="line">            &quot;queries&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;title&quot;: &quot;brown fox&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;: &#123;</span><br><span class="line">                        &quot;body&quot;: &quot;brown fox&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            &quot;tie_breaker&quot;: 0.3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="三、multi-match"><a href="#三、multi-match" class="headerlink" title="三、multi_match"></a>三、multi_match</h2><h3 id="1、best-fields"><a href="#1、best-fields" class="headerlink" title="1、best_fields"></a>1、best_fields</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:9200/test/t1/_search?explain=true</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;multi_match&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &quot;brown fox&quot;,</span><br><span class="line">            &quot;fields&quot;: [&quot;title&quot;, &quot;body&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:9200/test/t1/_search?explain=true</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;multi_match&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &quot;brown fox&quot;,</span><br><span class="line">            &quot;fields&quot;: [&quot;title&quot;, &quot;body&quot;],</span><br><span class="line">            &quot;type&quot;: &quot;best_fields&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h3 id="2、most-fields"><a href="#2、most-fields" class="headerlink" title="2、most_fields"></a>2、most_fields</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:9200/test/t1/_search?explain=true</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;multi_match&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &quot;brown fox&quot;,</span><br><span class="line">            &quot;fields&quot;: [&quot;title&quot;, &quot;body&quot;],</span><br><span class="line">            &quot;type&quot;: &quot;most_fields&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h3 id="3、cross-fields"><a href="#3、cross-fields" class="headerlink" title="3、cross_fields"></a>3、cross_fields</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:9200/test/t1/_search?explain=true</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;multi_match&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &quot;brown fox&quot;,</span><br><span class="line">            &quot;fields&quot;: [&quot;title&quot;, &quot;body&quot;],</span><br><span class="line">            &quot;type&quot;: &quot;cross_fields&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cross_fields_queries.html">参考一: ES跨字段查询</a></p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cross_fields_entity_search.html">参考二: most_fields的问题</a></p>
<p>[参考三: _validate, rewrite 输出分析.md](_validate, rewrite 输出分析.md)</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-Innodb加锁分析(二)</title>
    <url>/IT/MySQL/MySQL-Innodb%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90(%E4%BA%8C).html</url>
    <content><![CDATA[<h1 id="MySQL-Innodb加锁分析-二"><a href="#MySQL-Innodb加锁分析-二" class="headerlink" title="MySQL-Innodb加锁分析(二)"></a>MySQL-Innodb加锁分析(二)</h1><ul>
<li><p>环境：windows10，MySQL8.0.21;</p>
</li>
<li><p>建表，插入数据：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE ta (a INT NOT NULL, b INT, c INT, INDEX (b)) ENGINE = InnoDB;</span><br><span class="line">INSERT INTO ta VALUES (1,2,3),(2,2,4);</span><br></pre></td></tr></table></figure>
    </div>
</div></li>
</ul>
<h2 id="READ-UNCOMMITTED与锁"><a href="#READ-UNCOMMITTED与锁" class="headerlink" title="READ UNCOMMITTED与锁"></a>READ UNCOMMITTED与锁</h2><p>可以读到未提交的数据。写操作会加锁，加锁行为类似RC。</p>
<p><strong>select…for update和select … lock in share mode仍会加锁，行锁。</strong></p>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="select-…-for-share"><a href="#select-…-for-share" class="headerlink" title="select … for share"></a>select … for share</h4><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ta for share;</span><br><span class="line">+---+------+------+</span><br><span class="line">| a | b    | c    |</span><br><span class="line">+---+------+------+</span><br><span class="line">| 1 |    2 |    3 |</span><br><span class="line">| 2 |    2 |    4 |</span><br><span class="line">+---+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+----------------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME      | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA      |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+----------------+</span><br><span class="line">| INNODB | 1665988586848:1382:1665951760584    |       283140965297504 |        56 |       50 | ttt           | ta          | NULL           | NULL              | NULL            |         1665951760584 | TABLE     | IS            | GRANTED     | NULL           |</span><br><span class="line">| INNODB | 1665988586848:325:4:2:1665951757800 |       283140965297504 |        56 |       50 | ttt           | ta          | NULL           | NULL              | GEN_CLUST_INDEX |         1665951757800 | RECORD    | S,REC_NOT_GAP | GRANTED     | 0x000000000200 |</span><br><span class="line">| INNODB | 1665988586848:325:4:3:1665951757800 |       283140965297504 |        56 |       50 | ttt           | ta          | NULL           | NULL              | GEN_CLUST_INDEX |         1665951757800 | RECORD    | S,REC_NOT_GAP | GRANTED     | 0x000000000201 |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update ta set c=5 where b=2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 2  Changed: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME      | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA         |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">| INNODB | 1665988586848:1382:1665951760584    |                118184 |        56 |       83 | ttt           | ta          | NULL           | NULL              | NULL            |         1665951760584 | TABLE     | IX            | GRANTED     | NULL              |</span><br><span class="line">| INNODB | 1665988586848:325:5:2:1665951757800 |                118184 |        56 |       83 | ttt           | ta          | NULL           | NULL              | b               |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 2, 0x000000000200 |</span><br><span class="line">| INNODB | 1665988586848:325:5:3:1665951757800 |                118184 |        56 |       83 | ttt           | ta          | NULL           | NULL              | b               |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 2, 0x000000000201 |</span><br><span class="line">| INNODB | 1665988586848:325:4:2:1665951758144 |                118184 |        56 |       83 | ttt           | ta          | NULL           | NULL              | GEN_CLUST_INDEX |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 0x000000000200    |</span><br><span class="line">| INNODB | 1665988586848:325:4:3:1665951758144 |                118184 |        56 |       83 | ttt           | ta          | NULL           | NULL              | GEN_CLUST_INDEX |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 0x000000000201    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="READ-COMMITED与锁"><a href="#READ-COMMITED与锁" class="headerlink" title="READ COMMITED与锁"></a>READ COMMITED与锁</h2><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><ul>
<li>只对记录加锁，不再加Gap Lock（但是Gap Lock依然会用于外键约束和重复键检查）；</li>
<li>update和delete语句只对需要更新的行加锁，不满足where条件的行锁会被释放，不需要等到事务完成；</li>
<li>半一致性读：update语句，对于已经被锁住的行记录，读取(不加锁)已经提交的最新值判断是否满足where条件，如果满足条件，进行第二次读取，并对其上锁（或者开始等待锁）。<strong>半一致性读只适用于主键索引以及update语句，其他二级索引或者delete语句不适用半一致性读。</strong></li>
</ul>
<p>下面是实验验证：</p>
<h3 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h3><h4 id="锁的提前释放"><a href="#锁的提前释放" class="headerlink" title="锁的提前释放"></a>锁的提前释放</h4><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain  UPDATE ta SET b = 3 WHERE b = 2 AND c = 3\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: UPDATE</span><br><span class="line">        table: ta</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: range</span><br><span class="line">possible_keys: b</span><br><span class="line">          key: b</span><br><span class="line">      key_len: 5</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 2</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where; Using temporary</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; UPDATE ta SET b = 3 WHERE b = 2 AND c = 3;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME      | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA         |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">| INNODB | 1665988586848:1382:1665951760584    |                118209 |        56 |      135 | ttt           | ta          | NULL           | NULL              | NULL            |         1665951760584 | TABLE     | IX            | GRANTED     | NULL              |</span><br><span class="line">| INNODB | 1665988586848:325:5:2:1665951757800 |                118209 |        56 |      135 | ttt           | ta          | NULL           | NULL              | b               |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 2, 0x000000000200 |</span><br><span class="line">| INNODB | 1665988586848:325:4:2:1665951758144 |                118209 |        56 |      135 | ttt           | ta          | NULL           | NULL              | GEN_CLUST_INDEX |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 0x000000000200    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>可以看到，根据执行计划，预计加锁范围应该是索引b上的两行记录以及主键上的两行记录，但实际加锁只分别在索引b和主键上锁住了满足条件的一行记录，此处提前释放了不满足where条件的记录锁。</p>
<h4 id="半一致性读-二级索引"><a href="#半一致性读-二级索引" class="headerlink" title="半一致性读-二级索引"></a>半一致性读-二级索引</h4><table>
<thead>
<tr>
<th>session1（thread_id=56）</th>
<th>session2(thread_id=57)</th>
</tr>
</thead>
<tbody><tr>
<td>begin;<br />UPDATE ta SET b = 3 WHERE b = 2 AND c = 3;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>begin;<br />UPDATE ta SET b = 4 WHERE b = 2 AND c = 4;(阻塞)</td>
</tr>
</tbody></table>
<p>看一下锁信息：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME      | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA         |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">| INNODB | 1665988587680:1382:1665951773768    |                118216 |        57 |       78 | ttt           | ta          | NULL           | NULL              | NULL            |         1665951773768 | TABLE     | IX            | GRANTED     | NULL              |</span><br><span class="line">| INNODB | 1665988587680:325:5:2:1665951770984 |                118216 |        57 |       78 | ttt           | ta          | NULL           | NULL              | b               |         1665951770984 | RECORD    | X,REC_NOT_GAP | WAITING     | 2, 0x000000000200 |</span><br><span class="line">| INNODB | 1665988586848:1382:1665951760584    |                118211 |        56 |      141 | ttt           | ta          | NULL           | NULL              | NULL            |         1665951760584 | TABLE     | IX            | GRANTED     | NULL              |</span><br><span class="line">| INNODB | 1665988586848:325:5:2:1665951757800 |                118211 |        56 |      141 | ttt           | ta          | NULL           | NULL              | b               |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 2, 0x000000000200 |</span><br><span class="line">| INNODB | 1665988586848:325:4:2:1665951758144 |                118211 |        56 |      141 | ttt           | ta          | NULL           | NULL              | GEN_CLUST_INDEX |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 0x000000000200    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+-----------------+-----------------------+-----------+---------------+-------------+-------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h4 id="半一致性读-主键索引"><a href="#半一致性读-主键索引" class="headerlink" title="半一致性读-主键索引"></a>半一致性读-主键索引</h4><p>首先更改表结构，将a更改为主键，然后看一下语句的执行计划，结果显示使用的是主键索引，且遍历了整个索引树：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table ta add primary key(a);</span><br><span class="line"></span><br><span class="line">mysql&gt; explain update ta set b=3 where  c=3\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: UPDATE</span><br><span class="line">        table: ta</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: index</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 4</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 2</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>



<table>
<thead>
<tr>
<th>session1（thread_id=56）</th>
<th>session2(thread_id=57)</th>
</tr>
</thead>
<tbody><tr>
<td>begin;<br />UPDATE ta SET b = 3  WHERE c = 3;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>begin;<br />UPDATE ta SET b = 4 WHERE c = 4;(未阻塞)</td>
</tr>
</tbody></table>
<h4 id="半一致性读-delete"><a href="#半一致性读-delete" class="headerlink" title="半一致性读-delete"></a>半一致性读-delete</h4><table>
<thead>
<tr>
<th>session1（thread_id=56）</th>
<th>session2(thread_id=57)</th>
</tr>
</thead>
<tbody><tr>
<td>begin;<br />UPDATE ta SET b = 3  WHERE c = 3;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>begin;<br />DELETE from ta WHERE c = 4;(阻塞)</td>
</tr>
</tbody></table>
<p>查看锁信息：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988587680:1383:1665951773768    |                118266 |        57 |      102 | ttt           | ta          | NULL           | NULL              | NULL       |         1665951773768 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988587680:326:4:2:1665951771328 |                118266 |        57 |      103 | ttt           | ta          | NULL           | NULL              | PRIMARY    |         1665951771328 | RECORD    | X,REC_NOT_GAP | WAITING     | 1         |</span><br><span class="line">| INNODB | 1665988586848:1383:1665951760584    |                118259 |        56 |      178 | ttt           | ta          | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:326:4:2:1665951757800 |                118259 |        56 |      178 | ttt           | ta          | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 1         |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h4 id="半一致读-for-update-lock-in-share-mode"><a href="#半一致读-for-update-lock-in-share-mode" class="headerlink" title="半一致读-for update/lock in share mode"></a>半一致读-for update/lock in share mode</h4><table>
<thead>
<tr>
<th>session1（thread_id=56）</th>
<th>session2(thread_id=57)</th>
</tr>
</thead>
<tbody><tr>
<td>begin;<br />UPDATE ta SET b = 3  WHERE c = 3;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>begin;<br />select * from ta where c=4 lock in share mode(阻塞);<br />select * from ta where c=4 for duapte;(阻塞)</td>
</tr>
</tbody></table>
<p>查看锁信息：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1383:1665951760584    |                118259 |        56 |      178 | ttt           | ta          | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:326:4:2:1665951757800 |                118259 |        56 |      178 | ttt           | ta          | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 1         |</span><br><span class="line">| INNODB | 1665988587680:1383:1665951773768    |       283140965298336 |        57 |      112 | ttt           | ta          | NULL           | NULL              | NULL       |         1665951773768 | TABLE     | IS            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988587680:326:4:2:1665951770984 |       283140965298336 |        57 |      112 | ttt           | ta          | NULL           | NULL              | PRIMARY    |         1665951770984 | RECORD    | S,REC_NOT_GAP | WAITING     | 1         |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="desc对加锁的影响"><a href="#desc对加锁的影响" class="headerlink" title="desc对加锁的影响"></a>desc对加锁的影响</h2><h2 id="Gap-Lock的合并"><a href="#Gap-Lock的合并" class="headerlink" title="Gap Lock的合并"></a>Gap Lock的合并</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html">[1] 官网文档: innodb-transaction-isolation-levels</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>锁</title>
    <url>/IT/MySQL/%E9%94%81.html</url>
    <content><![CDATA[<h1 id="MySQL中的锁"><a href="#MySQL中的锁" class="headerlink" title="MySQL中的锁"></a>MySQL中的锁</h1><p><strong>本文实验基于win 10, MySQL8.0</strong></p>
<p><strong>代码：MySQL 8.0</strong></p>
<h2 id="一、查看锁"><a href="#一、查看锁" class="headerlink" title="一、查看锁"></a>一、查看锁</h2><p>MySQL 5.7:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.innodb_locks;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.innodb_lock_waits;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.innodb_lock_waits;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><em>note: RR级别，win10环境下测试，发现只有一条事务查询的时候，查不到锁记录，但是再启动一条事务进行查询，会发现两条锁记录，持有者分别是这两个事务，但是第二个事务会等待锁。</em></p>
<p>MySQL 8.0:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.data_locks;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> performance.data_lock_waits;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.innodb_lock_waits;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="二、库级锁"><a href="#二、库级锁" class="headerlink" title="二、库级锁"></a>二、库级锁</h2><p>FTWRL(Flush table with read lock）</p>
<h2 id="三、表级锁"><a href="#三、表级锁" class="headerlink" title="三、表级锁"></a>三、表级锁</h2><h3 id="MDL：metadata-lock"><a href="#MDL：metadata-lock" class="headerlink" title="MDL：metadata lock"></a>MDL：metadata lock</h3><p>执行DML时会加MDL读锁，执行DDL时加写锁。</p>
<p>写锁优先级高于读锁。</p>
<h3 id="表锁-lock-tables-with-lock"><a href="#表锁-lock-tables-with-lock" class="headerlink" title="表锁(lock tables with lock)"></a>表锁(lock tables with lock)</h3><h2 id="四、行级锁"><a href="#四、行级锁" class="headerlink" title="四、行级锁"></a>四、行级锁</h2><p>行锁</p>
<p>间隙锁</p>
<p>next-key lock</p>
<h3 id="加锁规则"><a href="#加锁规则" class="headerlink" title="加锁规则"></a>加锁规则</h3><ul>
<li>加锁的基本单位是next-key lock;</li>
<li>只有访问到的对象需要加锁；</li>
<li>索引上等值查询，给唯一索引退化为行锁（如果不存在满足条件的记录不会退化）；</li>
<li>索引上等值查询，向右遍历且最后一个值不满足条件时退化为间隙锁(存疑，8.0.21实测优化)；</li>
<li>唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li>
</ul>
<p><em>note: mysql 8.0测试发现，select …for update语句执行时，除了二级索引，还会锁住主键索引的对应记录（行锁，且仅在存在记录时才会加锁。）。</em></p>
<h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>间隙锁与间隙锁不冲突，间隙锁只与‘insert’操作冲突。</p>
<h3 id="Next-Key-Lock"><a href="#Next-Key-Lock" class="headerlink" title="Next-Key Lock"></a>Next-Key Lock</h3><p>Next-Key Lock加锁并非原子操作。</p>
<p>mysql 8.0实测结果：间隙锁与行锁的加锁时独立的，与数据的访问顺序有关。</p>
<h3 id="插入意向锁：INSERT-INTENTION-LOCK"><a href="#插入意向锁：INSERT-INTENTION-LOCK" class="headerlink" title="插入意向锁：INSERT INTENTION LOCK"></a>插入意向锁：INSERT INTENTION LOCK</h3><p>两个性质：</p>
<ul>
<li>1）不会阻塞其他任何锁；</li>
<li>2）只会被GAP Lock阻塞。</li>
</ul>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>win10+MySQL 8.0</p>
<p>隔离级别：RR</p>
<h4 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h4><p>先看一下表中原始数据:</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210325202931.png" alt="image-20210325202931246"></p>
<p>表结构（与下文实验一致）：主键索引id，二级索引num。</p>
<p>1、session A：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> num <span class="operator">=</span><span class="number">15</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210325202850.png" alt="image-20210325202850399"></p>
<p>session 2:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, num) <span class="keyword">values</span>(<span class="string">&#x27;ff&#x27;</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>查看加锁情况：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210325203219.png" alt="image-20210325203219619"></p>
<p>可以发现，此时多了两个锁，一个是session2的意向锁，还有一个是session 2 的插入意向锁（lock mode为X, GAP，INSERT _INTENTION）。</p>
<h4 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h4><p>调换实验一的事务的执行顺序，即：</p>
<p>session 1:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, num) <span class="keyword">values</span>(<span class="string">&#x27;ff&#x27;</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210325203554.png" alt="image-20210325203554424"></p>
<p>session 2:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> num <span class="operator">=</span><span class="number">15</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>再看加锁情况：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210325203716.png" alt="image-20210325203716622"></p>
<p>可以看到没有插入意向锁。</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>基于以上实验，分析：</p>
<ul>
<li>插入意向锁在插入时添加，插入数据后立即释放。</li>
</ul>
<h4 id="补充-实验三"><a href="#补充-实验三" class="headerlink" title="补充-实验三"></a>补充-实验三</h4><p>表内原始数据:</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210401194837.png" alt="image-20210401194836863"></p>
<p>session 1执行：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">5</span>, <span class="string">&#x27;dd&#x27;</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>此时无锁：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210401194902.png" alt="image-20210401194902461"></p>
<p>session2执行：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>发现被阻塞，查看锁情况：<br><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210401195410.png" alt="image-20210401195410777"></p>
<p><strong>此处其实是加了隐式锁，详见参考二。（其实insert对于二级索引也是隐式锁）</strong></p>
<h3 id="源码验证"><a href="#源码验证" class="headerlink" title="源码验证"></a>源码验证</h3><p>storage/innobase/lock/lock0lock.cc line 5270:</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Checks if locks of other transactions prevent an immediate insert of</span></span><br><span class="line"><span class="comment"> a record. If they do, first tests if the query thread should anyway</span></span><br><span class="line"><span class="comment"> be suspended for some reason; if not, then puts the transaction and</span></span><br><span class="line"><span class="comment"> the query thread to the lock wait state and inserts a waiting request</span></span><br><span class="line"><span class="comment"> for a gap x-lock to the lock queue.</span></span><br><span class="line"><span class="comment"> @return DB_SUCCESS, DB_LOCK_WAIT, or DB_DEADLOCK */</span></span><br><span class="line"><span class="function"><span class="keyword">dberr_t</span> <span class="title">lock_rec_insert_check_and_lock</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    ulint flags,         <span class="comment">/*!&lt; in: if BTR_NO_LOCKING_FLAG bit is</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">                         set, does nothing */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> <span class="keyword">rec_t</span> *rec,    <span class="comment">/*!&lt; in: record after which to insert */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">buf_block_t</span> *block,  <span class="comment">/*!&lt; in/out: buffer block of rec */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">dict_index_t</span> *index, <span class="comment">/*!&lt; in: index */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">que_thr_t</span> *thr,      <span class="comment">/*!&lt; in: query thread */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">mtr_t</span> *mtr,          <span class="comment">/*!&lt; in/out: mini-transaction */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ibool *inherit)</span>      <span class="comment">/*!&lt; out: set to true if the new</span></span></span><br><span class="line"><span class="comment"><span class="function">                         inserted record maybe should inherit</span></span></span><br><span class="line"><span class="comment"><span class="function">                         LOCK_GAP type locks from the successor</span></span></span><br><span class="line"><span class="comment"><span class="function">                         record */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">ut_ad</span>(block-&gt;frame == <span class="built_in">page_align</span>(rec));</span><br><span class="line">  <span class="built_in">ut_ad</span>(!<span class="built_in">dict_index_is_online_ddl</span>(index) || index-&gt;<span class="built_in">is_clustered</span>() ||</span><br><span class="line">        (flags &amp; BTR_CREATE_FLAG));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (flags &amp; BTR_NO_LOCKING_FLAG) &#123;</span><br><span class="line">    <span class="keyword">return</span> (DB_SUCCESS);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ut_ad</span>(!index-&gt;table-&gt;<span class="built_in">is_temporary</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">dberr_t</span> err = DB_SUCCESS;</span><br><span class="line">  <span class="keyword">lock_t</span> *lock;</span><br><span class="line">  ibool inherit_in = *inherit;</span><br><span class="line">  <span class="keyword">trx_t</span> *trx = <span class="built_in">thr_get_trx</span>(thr);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">rec_t</span> *next_rec = <span class="built_in">page_rec_get_next_const</span>(rec);</span><br><span class="line">  ulint heap_no = <span class="built_in">page_rec_get_heap_no</span>(next_rec);</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    locksys::Shard_latch_guard guard&#123;block-&gt;<span class="built_in">get_page_id</span>()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* When inserting a record into an index, the table must be at</span></span><br><span class="line"><span class="comment">    least IX-locked. When we are building an index, we would pass</span></span><br><span class="line"><span class="comment">    BTR_NO_LOCKING_FLAG and skip the locking altogether. */</span></span><br><span class="line">    <span class="built_in">ut_ad</span>(<span class="built_in">lock_table_has</span>(trx, index-&gt;table, LOCK_IX));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Spatial index does not use GAP lock protection. It uses</span></span><br><span class="line"><span class="comment">    &quot;predicate lock&quot; to protect the &quot;range&quot; */</span></span><br><span class="line">    <span class="built_in">ut_ad</span>(!<span class="built_in">dict_index_is_spatial</span>(index));</span><br><span class="line"></span><br><span class="line">    lock = <span class="built_in">lock_rec_get_first</span>(lock_sys-&gt;rec_hash, block, heap_no);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lock == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      *inherit = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      *inherit = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* If another transaction has an explicit lock request which locks</span></span><br><span class="line"><span class="comment">      the gap, waiting or granted, on the successor, the insert has to wait.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      An exception is the case where the lock by the another transaction</span></span><br><span class="line"><span class="comment">      is a gap type lock which it placed to wait for its turn to insert. We</span></span><br><span class="line"><span class="comment">      do not consider that kind of a lock conflicting with our insert. This</span></span><br><span class="line"><span class="comment">      eliminates an unnecessary deadlock which resulted when 2 transactions</span></span><br><span class="line"><span class="comment">      had to wait for their insert. Both had waiting gap type lock requests</span></span><br><span class="line"><span class="comment">      on the successor, which produced an unnecessary deadlock. */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> ulint type_mode = LOCK_X | LOCK_GAP | LOCK_INSERT_INTENTION;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">lock_t</span> *wait_for =</span><br><span class="line">          <span class="built_in">lock_rec_other_has_conflicting</span>(type_mode, block, heap_no, trx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (wait_for != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="function">RecLock <span class="title">rec_lock</span><span class="params">(thr, index, block, heap_no, type_mode)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">trx_mutex_enter</span>(trx);</span><br><span class="line"></span><br><span class="line">        err = rec_lock.<span class="built_in">add_to_waitq</span>(wait_for);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">trx_mutex_exit</span>(trx);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">/* Shard_latch_guard */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span> (err) &#123;</span><br><span class="line">    <span class="keyword">case</span> DB_SUCCESS_LOCKED_REC:</span><br><span class="line">      err = DB_SUCCESS;</span><br><span class="line">      <span class="comment">/* fall through */</span></span><br><span class="line">    <span class="keyword">case</span> DB_SUCCESS:</span><br><span class="line">      <span class="keyword">if</span> (!inherit_in || index-&gt;<span class="built_in">is_clustered</span>()) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Update the page max trx id field */</span></span><br><span class="line">      <span class="built_in">page_update_max_trx_id</span>(block, <span class="built_in">buf_block_get_page_zip</span>(block), trx-&gt;id,</span><br><span class="line">                             mtr);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">/* We only care about the two return values. */</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ut_d</span>(locksys::<span class="built_in">rec_queue_latch_and_validate</span>(block, next_rec, index));</span><br><span class="line">  <span class="built_in">ut_ad</span>(err == DB_SUCCESS || err == DB_LOCK_WAIT || err == DB_DEADLOCK);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>上文调用lock_rec_other_has_conflicting检查是否存在锁冲突。如果存在锁冲突，会进入if分支，加锁（RecLock）并将之挂到等待队列。</p>
<p>跟踪一下lock_rec_has_to_wait，发现会在此处检查是否存在锁冲突：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Checks if a lock request for a new lock has to wait for request lock2.</span></span><br><span class="line"><span class="comment"> @return true if new lock has to wait for lock2 to be removed */</span></span><br><span class="line"><span class="function">UNIV_INLINE</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">lock_rec_has_to_wait</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> <span class="keyword">trx_t</span> *trx,    <span class="comment">/*!&lt; in: trx of new lock */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ulint type_mode,     <span class="comment">/*!&lt; in: precise mode of the new lock</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">                       to set: LOCK_S or LOCK_X, possibly</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">                       ORed to LOCK_GAP or LOCK_REC_NOT_GAP,</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">                       LOCK_INSERT_INTENTION */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> <span class="keyword">lock_t</span> *lock2, <span class="comment">/*!&lt; in: another record lock; NOTE that</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">                         it is assumed that this has a lock bit</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">                         set on the same record as in the new</span></span></span></span><br><span class="line"><span class="comment"><span class="params"><span class="function">                         lock we are setting */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">bool</span> lock_is_on_supremum)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*!&lt; in: true if we are setting the</span></span></span><br><span class="line"><span class="comment"><span class="function">lock on the &#x27;supremum&#x27; record of an</span></span></span><br><span class="line"><span class="comment"><span class="function">index page: we know then that the lock</span></span></span><br><span class="line"><span class="comment"><span class="function">request is really for a &#x27;gap&#x27; type lock */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">ut_ad</span>(trx &amp;&amp; lock2);</span><br><span class="line">  <span class="built_in">ut_ad</span>(<span class="built_in">lock_get_type_low</span>(lock2) == LOCK_REC);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">bool</span> is_hp = <span class="built_in">trx_is_high_priority</span>(trx);</span><br><span class="line">  <span class="keyword">if</span> (trx != lock2-&gt;trx &amp;&amp;</span><br><span class="line">      !<span class="built_in">lock_mode_compatible</span>(<span class="keyword">static_cast</span>&lt;lock_mode&gt;(LOCK_MODE_MASK &amp; type_mode),</span><br><span class="line">                            <span class="built_in">lock_get_mode</span>(lock2))) &#123;</span><br><span class="line">    <span class="comment">/* If our trx is High Priority and the existing lock is WAITING and not</span></span><br><span class="line"><span class="comment">        high priority, then we can ignore it. */</span></span><br><span class="line">    <span class="keyword">if</span> (is_hp &amp;&amp; lock2-&gt;<span class="built_in">is_waiting</span>() &amp;&amp; !<span class="built_in">trx_is_high_priority</span>(lock2-&gt;trx)) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We have somewhat complex rules when gap type record locks</span></span><br><span class="line"><span class="comment">    cause waits */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((lock_is_on_supremum || (type_mode &amp; LOCK_GAP)) &amp;&amp;</span><br><span class="line">        !(type_mode &amp; LOCK_INSERT_INTENTION)) &#123;</span><br><span class="line">      <span class="comment">/* Gap type locks without LOCK_INSERT_INTENTION flag</span></span><br><span class="line"><span class="comment">      do not need to wait for anything. This is because</span></span><br><span class="line"><span class="comment">      different users can have conflicting lock types</span></span><br><span class="line"><span class="comment">      on gaps. */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(type_mode &amp; LOCK_INSERT_INTENTION) &amp;&amp; <span class="built_in">lock_rec_get_gap</span>(lock2)) &#123;</span><br><span class="line">      <span class="comment">/* Record lock (LOCK_ORDINARY or LOCK_REC_NOT_GAP</span></span><br><span class="line"><span class="comment">      does not need to wait for a gap type lock */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((type_mode &amp; LOCK_GAP) &amp;&amp; <span class="built_in">lock_rec_get_rec_not_gap</span>(lock2)) &#123;</span><br><span class="line">      <span class="comment">/* Lock on gap does not need to wait for</span></span><br><span class="line"><span class="comment">      a LOCK_REC_NOT_GAP type lock */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">lock_rec_get_insert_intention</span>(lock2)) &#123;</span><br><span class="line">      <span class="comment">/* No lock request needs to wait for an insert</span></span><br><span class="line"><span class="comment">      intention lock to be removed. This is ok since our</span></span><br><span class="line"><span class="comment">      rules allow conflicting locks on gaps. This eliminates</span></span><br><span class="line"><span class="comment">      a spurious deadlock caused by a next-key lock waiting</span></span><br><span class="line"><span class="comment">      for an insert intention lock; when the insert</span></span><br><span class="line"><span class="comment">      intention lock was granted, the insert deadlocked on</span></span><br><span class="line"><span class="comment">      the waiting next-key lock.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Also, insert intention locks do not disturb each</span></span><br><span class="line"><span class="comment">      other. */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>综合实验和源码，得出结论：</p>
<ul>
<li>在插入记录时，会使用GAP Lock|Insert_intention检查是否存在锁冲突；</li>
<li>如果存在冲突，则对记录加锁，否则不会加锁。</li>
</ul>
<h3 id="插入意向锁的意义"><a href="#插入意向锁的意义" class="headerlink" title="插入意向锁的意义"></a>插入意向锁的意义</h3><p>为了保证并发性能，GAP Lock之间不能互相阻塞。</p>
<p>又因为GAP Lock之间不会阻塞，所以需要新的方法检查是否可以执行插入。</p>
<ul>
<li>用来检查GAP Lock是否存在，确认插入是否可执行；</li>
</ul>
<h2 id="四、两阶段锁协议"><a href="#四、两阶段锁协议" class="headerlink" title="四、两阶段锁协议"></a>四、两阶段锁协议</h2><p>查询时加锁，直到事务提交时才会释放锁。</p>
<h2 id="五、加锁"><a href="#五、加锁" class="headerlink" title="五、加锁"></a>五、加锁</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">num <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> index(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, num) <span class="keyword">values</span> </span><br><span class="line">	(<span class="string">&#x27;aa&#x27;</span>, <span class="number">10</span>),</span><br><span class="line">	(<span class="string">&#x27;bb&#x27;</span>, <span class="number">15</span>),</span><br><span class="line">	(<span class="string">&#x27;cc&#x27;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h3 id="加锁情况"><a href="#加锁情况" class="headerlink" title="加锁情况"></a>加锁情况</h3><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> num<span class="operator">=</span><span class="number">15</span> <span class="keyword">for</span> update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> num<span class="operator">=</span><span class="number">15</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>锁情况：</p>
<p>语句1的锁：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210324200238.png" alt="语句1的锁"></p>
<p>语句2的锁：                </p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210324200203.png" alt="image-20210324200203265"></p>
<p>明显发现二者区别，加读锁时没有在主键加锁，加写锁时却要去主键加锁；</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>1）要更新行时，一定需要更新聚簇索引，所以加写锁时要为聚簇索引加锁，防止在本事务更新过程中数据被其他事物修改，导致更新丢失。</p>
<p>2）读的时候只为访问到的数据加锁。</p>
<h3 id="change-buffer与锁"><a href="#change-buffer与锁" class="headerlink" title="change buffer与锁"></a>change buffer与锁</h3><p>对于普通索引，有change buffer作为优化：即如果数据不在内存，则将二级索引页的更新记录到change buffer，等到访问对应的索引页时再读入内存并应用change buffer内容，完成更新。</p>
<p>于是问题引申：如果二级索引应用了change buffer，也就是说索引页没被加载进内存，那么如何在二级索引加锁呢？又要不要在二级索引加锁呢？</p>
<p>于是设计实验（表中记录都和建表时一致）</p>
<h4 id="实验一-1"><a href="#实验一-1" class="headerlink" title="实验一"></a>实验一</h4><p>执行语句</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> num<span class="operator">=</span><span class="number">12</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>加锁情况：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210324202516.png" alt="image-20210324202516534"></p>
<p>也就是说此时只在主键加锁。</p>
<p>结合前文，如果根据二级索引定位记录执行更新语句，需要在主键加锁，那么此语句即使不在二级索引加锁，其他事务如果要根据二级索引更新记录，也会被主键上的锁阻塞。</p>
<h4 id="实验二-1"><a href="#实验二-1" class="headerlink" title="实验二"></a>实验二</h4><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;dd&#x27;</span> <span class="keyword">where</span> num<span class="operator">=</span><span class="number">15</span>;</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>加锁情况：</p>
<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210324203419.png" alt="image-20210324203419744"></p>
<p>根据二级索引更新记录时，势必要先将索引页读入内存，所以此时加锁可以不考虑change buffer。</p>
<h4 id="加锁顺序"><a href="#加锁顺序" class="headerlink" title="加锁顺序"></a>加锁顺序</h4><p>对比两个实验，查看锁数据，可以发现，锁时按照数据访问顺序加的，访问到数据的时候才会加锁。</p>
<h2 id="六、隐式锁"><a href="#六、隐式锁" class="headerlink" title="六、隐式锁"></a>六、隐式锁</h2><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>隐式锁主要用在插入场景中。</p>
<p>隐式锁即insert过程不加锁。</p>
<p>在特殊情况下，隐式锁转换为显式锁，转换动作是由另一个与insert线程存在行冲突的线程来做的。</p>
<p>例如，事务1插入记录但未提交，此时事务2尝试对该记录加锁，就会检查该记录上是否存在隐式锁，如果存在，则转为显式锁，并进入锁等待状态。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>隐式锁的实现依赖于行记录中的隐藏列trx_id字段。</p>
<p>具体说，对于聚簇索引，查询时，检查trx_id是否是当前活跃的事务id，如果是，则存在隐式锁，将其转换为显式锁。</p>
<p>对于二级索引，首先查看索引页的max_trx_id，如果无法根据max_trx_id过滤，则需要回表查询聚簇索引的隐藏列trx_id字段。</p>
<h2 id="七、Latch"><a href="#七、Latch" class="headerlink" title="七、Latch"></a>七、Latch</h2><p>latch实际上类似于我们平常理解的mutex这种锁，是innodb内部对内存的数据结构进行保护的锁，用来保护对临界资源的访问。</p>
<h4 id="Fix-rules"><a href="#Fix-rules" class="headerlink" title="Fix rules"></a>Fix rules</h4><ul>
<li>修改一个页需要获得该页的X-Latch</li>
<li>访问一个页需获得该页的X-Latch或S-Latch</li>
<li>持有一个Latch知道对该页的访问操作完成</li>
</ul>
<p>详见参考七和八。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://mysql.taobao.org/monthly/2018/05/04/">参考一: 数据库内核月报: MySQL · 引擎分析 · InnoDB行锁分析</a></p>
<p><a href="https://www.aneasystone.com/archives/2018/06/insert-locks-via-mysql-source-code.html">参考二: 读MySQL源码看insert加锁流程</a></p>
<p><a href="http://mysql.taobao.org/monthly/2017/10/03/">参考三: 数据库内核月报: MySQL · 引擎特性 · InnoDB mini transation</a></p>
<p><a href="https://www.bookstack.cn/read/aliyun-rds-core/28fbd2277714101f.md">参考四: 数据库内核月报: MySQL · 引擎特性 · Latch 持有分析</a></p>
<p><a href="https://www.bookstack.cn/read/aliyun-rds-core/bec36ab745a61976.md">参考五: 数据库内核月报: Database · 理论基础 · 高性能B-tree索引(提到页的Latch锁)</a></p>
<p><a href="https://www.bookstack.cn/read/aliyun-rds-core/418d3dff73feb4ee.md">参考六: 数据库内核月报: MySQL · 引擎特性 · InnoDB隐式锁功能解析(提及唯一索引判重过程)</a></p>
<p><a href="https://www.bookstack.cn/read/aliyun-rds-core/a14a83ac1645c7e7.md">参考七: 数据库内核月报: MySQL · 引擎特性 · InnoDB index lock前世今生</a></p>
<p><a href="https://www.bookstack.cn/read/aliyun-rds-core/e22d073aa25dd34d.md">参考八: 数据库内核月报: Database · 理论基础 · ARIES/IM (一)(提及latch coupling逻辑)</a></p>
<p><a href="http://mysql.taobao.org/monthly/2015/06/02/">参考九: 数据库内核月报: MySQL · 捉虫动态 · 唯一键约束失效</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>socket中backlog的含义及影响</title>
    <url>/IT/%E7%BD%91%E7%BB%9C/socket%E4%B8%ADbacklog%E7%9A%84%E5%90%AB%E4%B9%89%E5%8F%8A%E5%BD%B1%E5%93%8D.html</url>
    <content><![CDATA[<h1 id="socket中backlog的含义及影响"><a href="#socket中backlog的含义及影响" class="headerlink" title="socket中backlog的含义及影响"></a>socket中backlog的含义及影响</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>先执行man listen看一下listen的原型：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">       listen - listen for connections on a socket</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       #include &lt;sys/types.h&gt;          /* See NOTES */</span><br><span class="line">       #include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">       int listen(int sockfd, int backlog);</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       listen() marks the socket referred to by sockfd as a passive socket, that is, as a socket that will be used to accept incoming connection requests using accept(2).</span><br><span class="line"></span><br><span class="line">       The sockfd argument is a file descriptor that refers to a socket of type SOCK_STREAM or SOCK_SEQPACKET.</span><br><span class="line"></span><br><span class="line">       The backlog argument defines the maximum length to which the queue of pending connections for sockfd may grow.  If a connection request arrives when the queue is full, the client may receive an error with an indication of ECON‐</span><br><span class="line">       NREFUSED or, if the underlying protocol supports retransmission, the request may be ignored so that a later reattempt at connection succeeds.</span><br><span class="line"></span><br><span class="line">RETURN VALUE</span><br><span class="line">       On success, zero is returned.  On error, -1 is returned, and errno is set appropriately.</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>根据描述，backlog指定了该套接字上最大等待队列的长度。如果队列长度已满的话，会返回一个错误，或者是忽略连接请求（当下层协议支持重传的时候）。本文仅讨论Linux系统下、下层协议为TCP时的backlog含义。</p>
<p><strong>根据《Unix 网络编程：套接字联网API》（4.5 listen函数）（P84）章节的讨论，不同系统对于backlog有不同的解释。</strong></p>
<h2 id="半连接队列和全连接队列"><a href="#半连接队列和全连接队列" class="headerlink" title="半连接队列和全连接队列"></a>半连接队列和全连接队列</h2><p>对应于TCP，Linux内核为每个监听套接字维护了两个队列：</p>
<ul>
<li>半连接队列（SYN队列）：等待三次握手完成，处于SYN_RCVD状态的套接字；</li>
<li>全连接队列（Accept队列）：已完成三次握手，等待accept函数取出的套接字，处于Established状态。</li>
</ul>
<h2 id="backlog参数"><a href="#backlog参数" class="headerlink" title="backlog参数"></a>backlog参数</h2><p>对于backlog参数的疑问主要是：</p>
<ul>
<li><p>1、backlog指定的是哪个队列的长度，半连接队列？全连接队列？还是两个队列长度之和？</p>
</li>
<li><p>2、backlog与队列最大长度（假设为m）的关系？</p>
</li>
<li><p>3、队列长度达到backlog指定的最大长度时如何处理新请求？</p>
</li>
</ul>
<p>继续查看listen相关的手册，可以看到：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The  behavior of the backlog argument on TCP sockets changed with Linux 2.2.  Now it specifies the queue length for completely established sockets waiting to be accepted, instead of the number of incomplete connection requests.</span><br><span class="line">       The maximum length of the queue for incomplete sockets can be set using /proc/sys/net/ipv4/tcp_max_syn_backlog.  When syncookies are enabled there is no logical maximum length and this setting is ignored.  See tcp(7)  for  more</span><br><span class="line">       information.</span><br><span class="line"></span><br><span class="line">       If  the  backlog  argument  is  greater  than the value in /proc/sys/net/core/somaxconn, then it is silently truncated to that value; the default value in this file is 128.  In kernels before 2.4.25, this limit was a hard coded</span><br><span class="line">       value, SOMAXCONN, with the value 128.</span><br></pre></td></tr></table></figure>
    </div>
</div>

<p>所以，对于以上三个问题的答案：</p>
<ul>
<li><p>1、Linux 2.2版本之后，backlog指的是全连接队列的长度；</p>
</li>
<li><p>2、全连接队列最大长度是min(backlog, /proc/sys/net/core/somaxconn)，默认值是128。半连接队列最大长度则受/proc/sys/net/ipv4/tcp_max_syn_backlog和syncookies的控制；</p>
<p><strong>测试后发现实际全连接队列最大长度是backlog+1</strong></p>
<p>关于为什么是backlog+1的分析：</p>
<blockquote>
<p>从代码看，在将套接字转移到全连接队列前判断队列是否已满，而判断方法是sk-&gt;sk_ack_backlog &gt; sk-&gt;sk_max_ack_backlog，所以队列长度达到backlog的时候判断会认为还没满，所以仍然可以添加新套接字到全连接队列里，直到队列长度达到backlog+1的时候才认为已满，不再建立新的连接。（需要进一步分析源码进行确认。参考[2]中也有人提出这个疑问。）</p>
</blockquote>
</li>
<li><p>3、队列满的时候有两种处理方式：返回ECON‐</p>
<pre><code>   NREFUSED，拒绝本次连接，或者忽略本次请求（需要下层协议支持重传）。所以对于TCP协议，处理方法应该是丢弃此次请求。另外会受到/proc/sys/net/ipv4/tcp_abort_on_overflow的控制：
</code></pre>
<blockquote>
<p>如果值为<code>0</code>, 服务端丢掉握手第三个ack包, 等同于认为客户端并没有回复 ack, 服务端重传 syn+ack 包. 如果值为<code>1</code>, 服务端直接回复 rst 包, 关闭连接.</p>
</blockquote>
</li>
</ul>
<h2 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h2><h3 id="backlog与队列长度-队列满的时候丢弃请求"><a href="#backlog与队列长度-队列满的时候丢弃请求" class="headerlink" title="backlog与队列长度/队列满的时候丢弃请求"></a>backlog与队列长度/队列满的时候丢弃请求</h3><h4 id="一、启动服务器程序，如图（参数表示的是backlog），backlog设置为1："><a href="#一、启动服务器程序，如图（参数表示的是backlog），backlog设置为1：" class="headerlink" title="一、启动服务器程序，如图（参数表示的是backlog），backlog设置为1："></a>一、启动服务器程序，如图（参数表示的是backlog），backlog设置为1：</h4><p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20211224153431.png" alt="image-20211224153424545"></p>
<p>根据前文的描述，全连接队列里应该最多只有一个套接字，多余的连接请求应该会一直停在半连接队列里（半连接队列未满的情况下），直到全连接队列长度小于backlog。</p>
<h4 id="二、在另一个session使用ab发请求，设置并发量为4："><a href="#二、在另一个session使用ab发请求，设置并发量为4：" class="headerlink" title="二、在另一个session使用ab发请求，设置并发量为4："></a>二、在另一个session使用ab发请求，设置并发量为4：</h4><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-8-centos ~]# ab -n 4 -c 4 localhost:8088/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        NBS/1.0</span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">Server Port:            8088</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        13 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      4</span><br><span class="line">Time taken for tests:   40.001 seconds</span><br><span class="line">Complete requests:      4</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      520 bytes</span><br><span class="line">HTML transferred:       52 bytes</span><br><span class="line">Requests per second:    0.10 [#/sec] (mean)</span><br><span class="line">Time per request:       40000.901 [ms] (mean)</span><br><span class="line">Time per request:       10000.225 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          0.01 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.0      0       0</span><br><span class="line">Processing: 10000 25000 12910.1  30000   40001</span><br><span class="line">Waiting:        0 15000 12910.1  20000   30000</span><br><span class="line">Total:      10000 25000 12910.1  30001   40001</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">  30001</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">  30001</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">  40001</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">  40001</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">  40001</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">  40001</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">  40001</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">  40001</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">  40001 (longest request)</span></span><br></pre></td></tr></table></figure>
    </div>
</div>

<h4 id="三、查看套接字："><a href="#三、查看套接字：" class="headerlink" title="三、查看套接字："></a>三、查看套接字：</h4><p>套接字情况如下（由于ab和服务器进程test在同一机器上，所以这里显示了两端的情况。分析时只需要关注第四列端口为8088的连接即可）。</p>
<p>可以看到一开始有三个连接状态为ESTABLISHED，另一个为SYN_RECV状态，一段时间后，才变为ESTABLISHED（实际是全连接队列中的套接字被accept处理了，所以这个套接字三次握手才成功建立，具体可参考服务端代码进行分析）。</p>
<p>这里可以看到，一开始ESTABLISHED状态的连接有三个，此时这三个连接中的情况为：</p>
<ul>
<li>1）被服务进程（test）调用accept后处理中（最后一列显示有test），该套接字已从全连接队列中移除；</li>
<li>2）三次握手完成，在全连接队列中等待被accept取出处理（最后一列显示为-）；</li>
</ul>
<p>显然，这里可以看出全连接队列最大长度是2，即backlog+1。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-8-centos ~]# netstat -ntp|grep 8088</span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59836         SYN_RECV    -                   </span><br><span class="line">tcp        0      0 127.0.0.1:59834         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0     82 127.0.0.1:59836         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59830         ESTABLISHED 5925/./test         </span><br><span class="line">tcp        0      0 127.0.0.1:59830         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0      0 127.0.0.1:59832         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp       82      0 127.0.0.1:8088          127.0.0.1:59834         ESTABLISHED -                   </span><br><span class="line">tcp       82      0 127.0.0.1:8088          127.0.0.1:59832         ESTABLISHED -                   </span><br><span class="line">[root@VM-24-8-centos ~]# netstat -ntp|grep 8088</span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59836         SYN_RECV    -                   </span><br><span class="line">tcp        0      0 127.0.0.1:59834         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0     82 127.0.0.1:59836         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59830         ESTABLISHED 5925/./test         </span><br><span class="line">tcp        0      0 127.0.0.1:59830         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0      0 127.0.0.1:59832         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp       82      0 127.0.0.1:8088          127.0.0.1:59834         ESTABLISHED -                   </span><br><span class="line">tcp       82      0 127.0.0.1:8088          127.0.0.1:59832         ESTABLISHED -                   </span><br><span class="line">[root@VM-24-8-centos ~]# netstat -ntp|grep 8088</span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59836         SYN_RECV    -                   </span><br><span class="line">tcp        0      0 127.0.0.1:59834         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0     82 127.0.0.1:59836         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59830         ESTABLISHED 5925/./test         </span><br><span class="line">tcp        0      0 127.0.0.1:59830         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0      0 127.0.0.1:59832         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp       82      0 127.0.0.1:8088          127.0.0.1:59834         ESTABLISHED -                   </span><br><span class="line">tcp       82      0 127.0.0.1:8088          127.0.0.1:59832         ESTABLISHED -                   </span><br><span class="line">[root@VM-24-8-centos ~]# netstat -ntp|grep 8088</span><br><span class="line">tcp        0      0 127.0.0.1:59836         127.0.0.1:8088          ESTABLISHED 6806/ab             </span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59836         ESTABLISHED 5925/./test         </span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59830         TIME_WAIT   -                   </span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59834         TIME_WAIT   -                   </span><br><span class="line">tcp        0      0 127.0.0.1:8088          127.0.0.1:59832         TIME_WAIT   -</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h4 id="四、看一下抓包结果，并分析："><a href="#四、看一下抓包结果，并分析：" class="headerlink" title="四、看一下抓包结果，并分析："></a>四、看一下抓包结果，并分析：</h4><p>抓包结果如下。</p>
<p>在第三步查看套接字情况的时候可以看出，ab本次测试用的端口分别是59830、59832、59834、59836，与抓包结果相符合。进一步分析报文内容可以发现，对于前三个端口（59830、59832、59834），三次握手正常建立，这也基本与前一步看到的连接状况相符。唯独对于端口59836，服务器一直在重发SYN+ACK报文，从下文看，显然59836已经回复ACK，但是服务器进程并未处理这个ACK报文，反而一直在重发SYN+ACK报文，直到某一刻（基本是59830这个连接结束的时候，从服务端源码看，也正是accept从全连接队列中取出一个套接字的时候）。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-8-centos ~]# tcpdump -nni any port 8088</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</span><br><span class="line"></span><br><span class="line">20:50:51.727618 IP6 ::1.47368 &gt; ::1.8088: Flags [S], seq 3876113499, win 43690, options [mss 65476,sackOK,TS val 2630303458 ecr 0,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727626 IP6 ::1.8088 &gt; ::1.47368: Flags [R.], seq 0, ack 3876113500, win 0, length 0</span><br><span class="line">20:50:51.727670 IP 127.0.0.1.59830 &gt; 127.0.0.1.8088: Flags [S], seq 3925820849, win 43690, options [mss 65495,sackOK,TS val 2630303458 ecr 0,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727678 IP 127.0.0.1.8088 &gt; 127.0.0.1.59830: Flags [S.], seq 3911357083, ack 3925820850, win 43690, options [mss 65495,sackOK,TS val 2630303458 ecr 2630303458,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727687 IP 127.0.0.1.59830 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727704 IP 127.0.0.1.59830 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 82</span><br><span class="line">20:50:51.727708 IP 127.0.0.1.8088 &gt; 127.0.0.1.59830: Flags [.], ack 83, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727785 IP 127.0.0.1.8088 &gt; 127.0.0.1.59830: Flags [P.], seq 1:118, ack 83, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 117</span><br><span class="line">20:50:51.727789 IP 127.0.0.1.59830 &gt; 127.0.0.1.8088: Flags [.], ack 118, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727795 IP 127.0.0.1.8088 &gt; 127.0.0.1.59830: Flags [P.], seq 118:131, ack 83, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 13</span><br><span class="line">20:50:51.727798 IP 127.0.0.1.59830 &gt; 127.0.0.1.8088: Flags [.], ack 131, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727842 IP 127.0.0.1.59832 &gt; 127.0.0.1.8088: Flags [S], seq 288093760, win 43690, options [mss 65495,sackOK,TS val 2630303458 ecr 0,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727849 IP 127.0.0.1.8088 &gt; 127.0.0.1.59832: Flags [S.], seq 1293060381, ack 288093761, win 43690, options [mss 65495,sackOK,TS val 2630303458 ecr 2630303458,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727855 IP 127.0.0.1.59832 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727876 IP 127.0.0.1.59834 &gt; 127.0.0.1.8088: Flags [S], seq 3380601055, win 43690, options [mss 65495,sackOK,TS val 2630303458 ecr 0,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727881 IP 127.0.0.1.8088 &gt; 127.0.0.1.59834: Flags [S.], seq 1317065744, ack 3380601056, win 43690, options [mss 65495,sackOK,TS val 2630303458 ecr 2630303458,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727885 IP 127.0.0.1.59834 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727900 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [S], seq 86886059, win 43690, options [mss 65495,sackOK,TS val 2630303458 ecr 0,nop,wscale 7], length 0</span><br><span class="line">20:50:51.727922 IP 127.0.0.1.8088 &gt; 127.0.0.1.59832: Flags [.], ack 83, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727939 IP 127.0.0.1.8088 &gt; 127.0.0.1.59834: Flags [.], ack 83, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 0</span><br><span class="line">20:50:51.727946 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 86886060:86886142, ack 2883444459, win 342, options [nop,nop,TS val 2630303458 ecr 2630303458], length 82</span><br><span class="line">20:50:51.927164 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 0:82, ack 1, win 342, options [nop,nop,TS val 2630303658 ecr 2630303458], length 82</span><br><span class="line">20:50:52.127164 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 0:82, ack 1, win 342, options [nop,nop,TS val 2630303858 ecr 2630303458], length 82</span><br><span class="line">20:50:52.528166 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 0:82, ack 1, win 342, options [nop,nop,TS val 2630304259 ecr 2630303458], length 82</span><br><span class="line">20:50:52.929164 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [S.], seq 2883444458, ack 86886060, win 43690, options [mss 65495,sackOK,TS val 2630304660 ecr 2630304259,nop,wscale 7], length 0</span><br><span class="line">20:50:52.929175 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2630304660 ecr 2630303458], length 0</span><br><span class="line">20:50:53.329163 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2630305060 ecr 2630303458], length 82</span><br><span class="line">20:50:54.933162 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2630306664 ecr 2630303458], length 82</span><br><span class="line">20:50:55.129167 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [S.], seq 2883444458, ack 86886060, win 43690, options [mss 65495,sackOK,TS val 2630306860 ecr 2630306664,nop,wscale 7], length 0</span><br><span class="line">20:50:55.129178 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2630306860 ecr 2630303458], length 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">20:50:58.141161 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2630309872 ecr 2630303458], length 82</span><br><span class="line">20:50:59.329164 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [S.], seq 2883444458, ack 86886060, win 43690, options [mss 65495,sackOK,TS val 2630311060 ecr 2630309872,nop,wscale 7], length 0</span><br><span class="line">20:50:59.329176 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2630311060 ecr 2630303458], length 0</span><br><span class="line">20:51:01.727911 IP 127.0.0.1.8088 &gt; 127.0.0.1.59830: Flags [F.], seq 131, ack 83, win 342, options [nop,nop,TS val 2630313458 ecr 2630303458], length 0</span><br><span class="line">20:51:01.727973 IP 127.0.0.1.8088 &gt; 127.0.0.1.59832: Flags [P.], seq 1:118, ack 83, win 342, options [nop,nop,TS val 2630313458 ecr 2630303458], length 117</span><br><span class="line">20:51:01.727979 IP 127.0.0.1.59832 &gt; 127.0.0.1.8088: Flags [.], ack 118, win 342, options [nop,nop,TS val 2630313458 ecr 2630313458], length 0</span><br><span class="line">20:51:01.727986 IP 127.0.0.1.8088 &gt; 127.0.0.1.59832: Flags [P.], seq 118:131, ack 83, win 342, options [nop,nop,TS val 2630313458 ecr 2630313458], length 13</span><br><span class="line">20:51:01.727990 IP 127.0.0.1.59832 &gt; 127.0.0.1.8088: Flags [.], ack 131, win 342, options [nop,nop,TS val 2630313458 ecr 2630313458], length 0</span><br><span class="line">20:51:01.728022 IP 127.0.0.1.59830 &gt; 127.0.0.1.8088: Flags [F.], seq 83, ack 132, win 342, options [nop,nop,TS val 2630313458 ecr 2630313458], length 0</span><br><span class="line">20:51:01.728029 IP 127.0.0.1.8088 &gt; 127.0.0.1.59830: Flags [.], ack 84, win 342, options [nop,nop,TS val 2630313458 ecr 2630313458], length 0</span><br><span class="line">20:51:04.557166 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2630316288 ecr 2630303458], length 82</span><br><span class="line">20:51:04.557185 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [.], ack 83, win 342, options [nop,nop,TS val 2630316288 ecr 2630316288], length 0</span><br><span class="line">20:51:11.728090 IP 127.0.0.1.8088 &gt; 127.0.0.1.59832: Flags [F.], seq 131, ack 83, win 342, options [nop,nop,TS val 2630323458 ecr 2630313458], length 0</span><br><span class="line">20:51:11.728172 IP 127.0.0.1.8088 &gt; 127.0.0.1.59834: Flags [P.], seq 1:118, ack 83, win 342, options [nop,nop,TS val 2630323459 ecr 2630303458], length 117</span><br><span class="line">20:51:11.728179 IP 127.0.0.1.59834 &gt; 127.0.0.1.8088: Flags [.], ack 118, win 342, options [nop,nop,TS val 2630323459 ecr 2630323459], length 0</span><br><span class="line">20:51:11.728186 IP 127.0.0.1.8088 &gt; 127.0.0.1.59834: Flags [P.], seq 118:131, ack 83, win 342, options [nop,nop,TS val 2630323459 ecr 2630323459], length 13</span><br><span class="line">20:51:11.728189 IP 127.0.0.1.59834 &gt; 127.0.0.1.8088: Flags [.], ack 131, win 342, options [nop,nop,TS val 2630323459 ecr 2630323459], length 0</span><br><span class="line">20:51:11.728218 IP 127.0.0.1.59832 &gt; 127.0.0.1.8088: Flags [F.], seq 83, ack 132, win 342, options [nop,nop,TS val 2630323459 ecr 2630323458], length 0</span><br><span class="line">20:51:11.728225 IP 127.0.0.1.8088 &gt; 127.0.0.1.59832: Flags [.], ack 84, win 342, options [nop,nop,TS val 2630323459 ecr 2630323459], length 0</span><br><span class="line">20:51:21.728295 IP 127.0.0.1.8088 &gt; 127.0.0.1.59834: Flags [F.], seq 131, ack 83, win 342, options [nop,nop,TS val 2630333459 ecr 2630323459], length 0</span><br><span class="line">20:51:21.728360 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [P.], seq 1:118, ack 83, win 342, options [nop,nop,TS val 2630333459 ecr 2630316288], length 117</span><br><span class="line">20:51:21.728369 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [.], ack 118, win 342, options [nop,nop,TS val 2630333459 ecr 2630333459], length 0</span><br><span class="line">20:51:21.728377 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [P.], seq 118:131, ack 83, win 342, options [nop,nop,TS val 2630333459 ecr 2630333459], length 13</span><br><span class="line">20:51:21.728381 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [.], ack 131, win 342, options [nop,nop,TS val 2630333459 ecr 2630333459], length 0</span><br><span class="line">20:51:21.728407 IP 127.0.0.1.59834 &gt; 127.0.0.1.8088: Flags [F.], seq 83, ack 132, win 342, options [nop,nop,TS val 2630333459 ecr 2630333459], length 0</span><br><span class="line">20:51:21.728413 IP 127.0.0.1.8088 &gt; 127.0.0.1.59834: Flags [.], ack 84, win 342, options [nop,nop,TS val 2630333459 ecr 2630333459], length 0</span><br><span class="line">20:51:31.728440 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [F.], seq 131, ack 83, win 342, options [nop,nop,TS val 2630343459 ecr 2630333459], length 0</span><br><span class="line">20:51:31.728503 IP 127.0.0.1.59836 &gt; 127.0.0.1.8088: Flags [F.], seq 83, ack 132, win 342, options [nop,nop,TS val 2630343459 ecr 2630343459], length 0</span><br><span class="line">20:51:31.728512 IP 127.0.0.1.8088 &gt; 127.0.0.1.59836: Flags [.], ack 84, win 342, options [nop,nop,TS val 2630343459 ecr 2630343459], length 0</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h4 id="五、-proc-sys-net-ipv4-tcp-abort-on-overflow设置为1，观察抓包结果："><a href="#五、-proc-sys-net-ipv4-tcp-abort-on-overflow设置为1，观察抓包结果：" class="headerlink" title="五、/proc/sys/net/ipv4/tcp_abort_on_overflow设置为1，观察抓包结果："></a>五、/proc/sys/net/ipv4/tcp_abort_on_overflow设置为1，观察抓包结果：</h4><p>显然这次使用的是33536、33538、33540、33542四个端口，看一下抓包结果，明显对于端口33542，在三次握手的报文之后，服务器进程直接发送了一个RST报文。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-8-centos ~]# ab -n 4 -c 4 localhost:8088/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)...apr_socket_recv: Connection reset by peer (104)</span><br><span class="line">[root@VM-24-8-centos ~]# ^C</span><br><span class="line">[root@VM-24-8-centos ~]# ab -n 4 -c 4 localhost:8088/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)...apr_socket_recv: Connection reset by peer (104)</span><br></pre></td></tr></table></figure>
    </div>
</div>



<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-8-centos ~]# netstat -ntp|grep 8088</span><br><span class="line">tcp        0      0 127.0.0.1:33538         127.0.0.1:8088          FIN_WAIT2   -                   </span><br><span class="line">tcp        0      0 127.0.0.1:33540         127.0.0.1:8088          FIN_WAIT2   -                   </span><br><span class="line">tcp       83      0 127.0.0.1:8088          127.0.0.1:33538         CLOSE_WAIT  -                   </span><br><span class="line">tcp        0      0 127.0.0.1:33536         127.0.0.1:8088          FIN_WAIT2   -                   </span><br><span class="line">tcp        1      0 127.0.0.1:8088          127.0.0.1:33536         CLOSE_WAIT  14918/./test        </span><br><span class="line">tcp       83      0 127.0.0.1:8088          127.0.0.1:33540         CLOSE_WAIT  -</span><br></pre></td></tr></table></figure>
    </div>
</div>



<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-8-centos ~]# tcpdump -nni any port 8088</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">21:24:51.241971 IP6 ::1.49306 &gt; ::1.8088: Flags [S], seq 537212558, win 43690, options [mss 65476,sackOK,TS val 2632342972 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:24:51.241979 IP6 ::1.8088 &gt; ::1.49306: Flags [R.], seq 0, ack 537212559, win 0, length 0</span><br><span class="line">21:24:51.242023 IP 127.0.0.1.33536 &gt; 127.0.0.1.8088: Flags [S], seq 2771398844, win 43690, options [mss 65495,sackOK,TS val 2632342972 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242031 IP 127.0.0.1.8088 &gt; 127.0.0.1.33536: Flags [S.], seq 214599834, ack 2771398845, win 43690, options [mss 65495,sackOK,TS val 2632342972 ecr 2632342972,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242038 IP 127.0.0.1.33536 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2632342972 ecr 2632342972], length 0</span><br><span class="line">21:24:51.242054 IP 127.0.0.1.33536 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2632342972 ecr 2632342972], length 82</span><br><span class="line">21:24:51.242058 IP 127.0.0.1.8088 &gt; 127.0.0.1.33536: Flags [.], ack 83, win 342, options [nop,nop,TS val 2632342972 ecr 2632342972], length 0</span><br><span class="line">21:24:51.242169 IP 127.0.0.1.8088 &gt; 127.0.0.1.33536: Flags [P.], seq 1:118, ack 83, win 342, options [nop,nop,TS val 2632342973 ecr 2632342972], length 117</span><br><span class="line">21:24:51.242173 IP 127.0.0.1.33536 &gt; 127.0.0.1.8088: Flags [.], ack 118, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242179 IP 127.0.0.1.8088 &gt; 127.0.0.1.33536: Flags [P.], seq 118:131, ack 83, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 13</span><br><span class="line">21:24:51.242182 IP 127.0.0.1.33536 &gt; 127.0.0.1.8088: Flags [.], ack 131, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242214 IP 127.0.0.1.33538 &gt; 127.0.0.1.8088: Flags [S], seq 2527639607, win 43690, options [mss 65495,sackOK,TS val 2632342973 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242218 IP 127.0.0.1.8088 &gt; 127.0.0.1.33538: Flags [S.], seq 3509174586, ack 2527639608, win 43690, options [mss 65495,sackOK,TS val 2632342973 ecr 2632342973,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242224 IP 127.0.0.1.33538 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242247 IP 127.0.0.1.33540 &gt; 127.0.0.1.8088: Flags [S], seq 3237997584, win 43690, options [mss 65495,sackOK,TS val 2632342973 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242254 IP 127.0.0.1.8088 &gt; 127.0.0.1.33540: Flags [S.], seq 3084261840, ack 3237997585, win 43690, options [mss 65495,sackOK,TS val 2632342973 ecr 2632342973,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242261 IP 127.0.0.1.33540 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242281 IP 127.0.0.1.33542 &gt; 127.0.0.1.8088: Flags [S], seq 3051525301, win 43690, options [mss 65495,sackOK,TS val 2632342973 ecr 0,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242286 IP 127.0.0.1.8088 &gt; 127.0.0.1.33542: Flags [S.], seq 2696146235, ack 3051525302, win 43690, options [mss 65495,sackOK,TS val 2632342973 ecr 2632342973,nop,wscale 7], length 0</span><br><span class="line">21:24:51.242290 IP 127.0.0.1.33542 &gt; 127.0.0.1.8088: Flags [.], ack 1, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242295 IP 127.0.0.1.8088 &gt; 127.0.0.1.33542: Flags [R], seq 2696146236, win 0, length 0</span><br><span class="line">21:24:51.242309 IP 127.0.0.1.33538 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 82</span><br><span class="line">21:24:51.242311 IP 127.0.0.1.8088 &gt; 127.0.0.1.33538: Flags [.], ack 83, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242318 IP 127.0.0.1.33540 &gt; 127.0.0.1.8088: Flags [P.], seq 1:83, ack 1, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 82</span><br><span class="line">21:24:51.242321 IP 127.0.0.1.8088 &gt; 127.0.0.1.33540: Flags [.], ack 83, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242346 IP 127.0.0.1.33540 &gt; 127.0.0.1.8088: Flags [F.], seq 83, ack 1, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242352 IP 127.0.0.1.33538 &gt; 127.0.0.1.8088: Flags [F.], seq 83, ack 1, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.242357 IP 127.0.0.1.33536 &gt; 127.0.0.1.8088: Flags [F.], seq 83, ack 131, win 342, options [nop,nop,TS val 2632342973 ecr 2632342973], length 0</span><br><span class="line">21:24:51.282157 IP 127.0.0.1.8088 &gt; 127.0.0.1.33536: Flags [.], ack 84, win 342, options [nop,nop,TS val 2632343013 ecr 2632342973], length 0</span><br><span class="line">21:24:51.282160 IP 127.0.0.1.8088 &gt; 127.0.0.1.33538: Flags [.], ack 84, win 342, options [nop,nop,TS val 2632343013 ecr 2632342973], length 0</span><br><span class="line">21:24:51.282161 IP 127.0.0.1.8088 &gt; 127.0.0.1.33540: Flags [.], ack 84, win 342, options [nop,nop,TS val 2632343013 ecr 2632342973], length 0</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h2 id="测试服务器源码"><a href="#测试服务器源码" class="headerlink" title="测试服务器源码"></a>测试服务器源码</h2><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请求头信息 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> uri[<span class="number">256</span>];			<span class="comment">//uri</span></span><br><span class="line">	<span class="keyword">char</span> method[<span class="number">16</span>];		<span class="comment">//请求方法</span></span><br><span class="line">	<span class="keyword">char</span> version[<span class="number">16</span>];		<span class="comment">//版本</span></span><br><span class="line">	<span class="keyword">char</span> filename[<span class="number">256</span>];		<span class="comment">//文件名(包含完整路径)</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">256</span>];			<span class="comment">//文件名(不包含完整路径)</span></span><br><span class="line">	<span class="keyword">char</span> queryArgs[<span class="number">256</span>];	<span class="comment">//查询参数</span></span><br><span class="line">	<span class="keyword">char</span> contentType[<span class="number">256</span>];		<span class="comment">//请求体类型</span></span><br><span class="line">	<span class="keyword">char</span> contentLen[<span class="number">16</span>];	<span class="comment">//请求体长度</span></span><br><span class="line">&#125;<span class="keyword">http_header_t</span>, <span class="keyword">hhr_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 响应头信息 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> version[<span class="number">16</span>];</span><br><span class="line">	<span class="keyword">int</span> statusCode;</span><br><span class="line">	<span class="keyword">char</span> msg[<span class="number">16</span>];</span><br><span class="line">	<span class="keyword">char</span> server[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">char</span> acceptRange[<span class="number">16</span>];</span><br><span class="line">	<span class="keyword">char</span> connection[<span class="number">16</span>];</span><br><span class="line">	<span class="keyword">char</span> contentType[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">int</span> contentLen;</span><br><span class="line">&#125;<span class="keyword">response_header_t</span>, <span class="keyword">rhr_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 创建SOCKET</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_socket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> socket_server = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (socket_server &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Socket Create Error!&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> socket_server;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 绑定地址和端口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind_address</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> server_port = <span class="number">8088</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">	server_addr.sin_family = AF_INET;</span><br><span class="line">	server_addr.sin_port = htons(server_port);</span><br><span class="line">	server_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>( bind(sockfd, &amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Bind Error!&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 启动服务器，绑定监听地址和端口，开始监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">start_server</span><span class="params">(<span class="keyword">int</span> backlog)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> socket_server = create_socket();</span><br><span class="line">	bind_address(socket_server);</span><br><span class="line">	listen(socket_server, backlog);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> socket_server;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 等待客户请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wait_request</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Waitting connect...\n&quot;</span>);</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">	<span class="keyword">int</span> addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> socket_client = accept(sockfd, &amp;client_addr, &amp;addr_len);</span><br><span class="line">	<span class="keyword">if</span>(socket_client == <span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Client address:%s, port: %d.\n&quot;</span>, inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));</span><br><span class="line">	<span class="keyword">return</span> socket_client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 读取一行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param const SOCKET socketClient </span></span><br><span class="line"><span class="comment"> * @param char *buf </span></span><br><span class="line"><span class="comment"> * @param int maxLine 每行的最大字符数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return int 读取进buf中的字符数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_line</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> socketClient, <span class="keyword">char</span> *buf, <span class="keyword">int</span> maxLine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> ((recv(socketClient, buf+i, <span class="number">1</span>, <span class="number">0</span>) &gt; <span class="number">0</span>) &amp;&amp; (i &lt; maxLine))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*(buf+i) == <span class="number">10</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			*(buf+i<span class="number">-1</span>) = <span class="number">0</span>; <span class="comment">//清除读到的&#x27;\r\n&#x27;字符</span></span><br><span class="line">			i = i - <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;%s\n&quot;, requestLine);</span></span><br><span class="line">	<span class="keyword">return</span> i; <span class="comment">//读取到的&#x27;\r\n&#x27;被丢弃,所以-2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 读取请求行 */</span></span><br><span class="line">    <span class="keyword">char</span> *requestLine = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(<span class="number">300</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    read_line(sockfd, requestLine, <span class="number">300</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, requestLine);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(requestLine);</span><br><span class="line">    requestLine = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取出全部数据 */</span></span><br><span class="line">    <span class="keyword">char</span> *requestHead = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(<span class="number">300</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( (n=recv(sockfd, requestHead, <span class="number">300</span>, MSG_DONTWAIT)) &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, requestHead);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(requestHead);</span><br><span class="line">    requestHead = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *buf = <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">rhr_t</span> *rhr = (<span class="keyword">rhr_t</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">rhr_t</span>));</span><br><span class="line">    <span class="comment">/* 响应头信息 */</span></span><br><span class="line">	<span class="built_in">strcpy</span>(rhr-&gt;version, <span class="string">&quot;HTTP/1.1&quot;</span>);</span><br><span class="line">	rhr-&gt;statusCode = <span class="number">200</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(rhr-&gt;msg, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(rhr-&gt;server, <span class="string">&quot;TBS/1.0&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(rhr-&gt;acceptRange, <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(rhr-&gt;connection, <span class="string">&quot;close&quot;</span>);</span><br><span class="line">    rhr-&gt;contentLen = <span class="built_in">strlen</span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *responseHead = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(<span class="number">1024</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(responseHead, <span class="string">&quot;%s %d %s\r\n&quot;</span>, rhr-&gt;version, rhr-&gt;statusCode, rhr-&gt;msg); <span class="comment">//&quot;HTTP/1.0 200 OK\r\n&quot;);</span></span><br><span class="line">    <span class="built_in">sprintf</span>(responseHead, <span class="string">&quot;%sServer: %s\r\n&quot;</span>, responseHead, rhr-&gt;server);</span><br><span class="line">	<span class="built_in">sprintf</span>(responseHead, <span class="string">&quot;%sAccept-range: %s\r\n&quot;</span>, responseHead, rhr-&gt;acceptRange);</span><br><span class="line">    <span class="built_in">sprintf</span>(responseHead, <span class="string">&quot;%sConnection: %s\r\n&quot;</span>, responseHead, rhr-&gt;connection);</span><br><span class="line">	<span class="built_in">sprintf</span>(responseHead, <span class="string">&quot;%sContent-type: %s\r\n&quot;</span>, responseHead, rhr-&gt;contentType);</span><br><span class="line">	<span class="built_in">sprintf</span>(responseHead, <span class="string">&quot;%sContent-length: %d\r\n&quot;</span>, responseHead, rhr-&gt;contentLen);	</span><br><span class="line">	<span class="built_in">sprintf</span>(responseHead, <span class="string">&quot;%s\r\n&quot;</span>, responseHead);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(responseHead));</span><br><span class="line">    write(sockfd, responseHead, <span class="built_in">strlen</span>(responseHead));</span><br><span class="line">    write(sockfd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(rhr);</span><br><span class="line">    <span class="built_in">free</span>(responseHead);</span><br><span class="line">    rhr = <span class="literal">NULL</span>;</span><br><span class="line">    responseHead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 启动服务器，绑定监听地址和端口 */</span></span><br><span class="line">    <span class="keyword">int</span> backlog = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">int</span> socket_server = start_server(backlog);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;START SERVER AT 127.0.0.1:%d, backlog: %d.\n&quot;</span>, <span class="number">8088</span>, backlog);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//struct linger so_linger;</span></span><br><span class="line">    <span class="comment">//so_linger.l_onoff = 1;</span></span><br><span class="line">    <span class="comment">//so_linger.l_linger = 0;</span></span><br><span class="line">    <span class="comment">//setsockopt(socket_server, SOL_SOCKET, SO_LINGER, &amp;so_linger, sizeof so_linger);</span></span><br><span class="line">        </span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//printf(&quot;---------------------------------------------\n&quot;);</span></span><br><span class="line">		<span class="keyword">int</span> socket_client = wait_request(socket_server);</span><br><span class="line">		<span class="keyword">if</span>(socket_client == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//printf(&quot;Connect Error!&quot;);</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/* 处理客户端请求 */</span></span><br><span class="line">		server(socket_client);</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;关闭本连接...\n&quot;</span>);</span><br><span class="line">        close(socket_client);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 关闭服务器 */</span></span><br><span class="line">	close(socket_server);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.isayme.org/posts/issues-47/">[1] TCP 半连接队列和全连接队列</a></p>
<p><a href="https://blog.csdn.net/u010039418/article/details/78369343">[2] TCP 的backlog详解及半连接队列和全连接队列</a></p>
<p><a href="https://blog.csdn.net/u010039418/article/details/78369343">[3] Unix 网络编程 卷1：套接字联网API</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-Innodb加锁分析</title>
    <url>/IT/MySQL/MySQL-Innodb%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<hr>
<hr>
<h1 id="MySQL-Innodb加锁分析"><a href="#MySQL-Innodb加锁分析" class="headerlink" title="MySQL-Innodb加锁分析"></a>MySQL-Innodb加锁分析</h1><p>Innodb锁机制是通过在索引加锁实现的。</p>
<h2 id="环境和数据准备"><a href="#环境和数据准备" class="headerlink" title="环境和数据准备"></a>环境和数据准备</h2><ul>
<li><p>环境：windows10，MySQL8.0.21;</p>
</li>
<li><p>隔离级别：RR；</p>
</li>
<li><p>建表，插入数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> CREATE TABLE `ttt` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(10) DEFAULT NULL,</span><br><span class="line">  `num` int DEFAULT NULL,</span><br><span class="line">  `descript` varchar(30) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `idx_t2` (`name`),</span><br><span class="line">  UNIQUE KEY `idx_t3` (`num`),</span><br><span class="line">  KEY `idx_t1` (`name`,`num`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into ttt(id, name, num) values(1, &#x27;aa&#x27;, 1), (5, &#x27;dd&#x27;, 5), (10, &#x27;gg&#x27;, 10), (15, &#x27;ll&#x27;, 15);</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="加锁规则"><a href="#加锁规则" class="headerlink" title="加锁规则"></a>加锁规则</h2><p>极客时间林晓斌《MySQL实战45讲》中对MySQL加锁规则的总结及补充：</p>
<ul>
<li><p>查找过程中访问到的数据才会加锁；</p>
</li>
<li><p>加锁的基本单位是Next-Key Lock;</p>
</li>
<li><p>唯一索引上的等值查询，命中记录时退化为行锁：主键索引会退化为行锁，二级唯一索引没有退化为行锁；</p>
</li>
<li><p>索引上的等值查询，向右遍历且最后一个值不满足等值条件时，退化为Gap Lock：主键索引上向右遍历且最后一个值不满足条件时，即使是范围查询也会退化为Gap Lock;</p>
</li>
<li><p>唯一索引上的范围查询，会查询到不满足条件的第一个值为止：二级唯一索引存在此问题，但是主键索引优化了此问题：访问到当前的最大值时，会对下一个记录（supremum）加锁，其他情况下则不会。</p>
</li>
</ul>
<p>另外补充一条：</p>
<ul>
<li>RR级别下，不满足where条件的记录不会提前释放锁：如果使用了二级索引，那么主键索引上只会对需要回表访问的记录加锁（考虑ICP）。</li>
</ul>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="访问到的数据才会加锁"><a href="#访问到的数据才会加锁" class="headerlink" title="访问到的数据才会加锁"></a>访问到的数据才会加锁</h4><p>Innodb加锁都是在索引上加的。</p>
<h4 id="加锁单位Next-Key-Lock"><a href="#加锁单位Next-Key-Lock" class="headerlink" title="加锁单位Next-Key Lock"></a>加锁单位Next-Key Lock</h4><h4 id="唯一索引等值查询的退化"><a href="#唯一索引等值查询的退化" class="headerlink" title="唯一索引等值查询的退化"></a>唯一索引等值查询的退化</h4><h4 id="等值查询与范围查询"><a href="#等值查询与范围查询" class="headerlink" title="等值查询与范围查询"></a>等值查询与范围查询</h4><p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">select * from ttt where num&gt;=5 and num&lt;=10;</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>该语句的执行方式：首先用num=5在索引中进行定位，所以这是一个等值查询，而后向右遍历检查num是否满足num&lt;=10的条件，这一步是范围查询。</p>
<h2 id="读锁-主键索引"><a href="#读锁-主键索引" class="headerlink" title="读锁-主键索引"></a>读锁-主键索引</h2><h3 id="等值查询（命中记录）：行锁"><a href="#等值查询（命中记录）：行锁" class="headerlink" title="等值查询（命中记录）：行锁"></a>等值查询（命中记录）：行锁</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; select * from ttt where id=5 lock in share mode;</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">| id | name | num  | descript |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">|  5 | dd   |    5 | NULL     |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:1381:1665951760584</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 43</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: NULL</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951760584</span><br><span class="line">            LOCK_TYPE: TABLE</span><br><span class="line">            LOCK_MODE: IS</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:324:4:3:1665951757800</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 43</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: PRIMARY</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951757800</span><br><span class="line">            LOCK_TYPE: RECORD</span><br><span class="line">            LOCK_MODE: S,REC_NOT_GAP</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: 5</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Abug0/Typora-Pics/master/pics/Typora20210808191903.png" alt="image-20210808191902997"></p>
<p>可以看到上了两把锁，一把在表上的意向共享锁，另一把是主键上的行锁，锁住的的是id=2这一行。</p>
<h3 id="等值查询（未命中记录）：间隙锁"><a href="#等值查询（未命中记录）：间隙锁" class="headerlink" title="等值查询（未命中记录）：间隙锁"></a>等值查询（未命中记录）：间隙锁</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ttt where id=2 lock in share mode;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:1381:1665951760584</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 39</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: NULL</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951760584</span><br><span class="line">            LOCK_TYPE: TABLE</span><br><span class="line">            LOCK_MODE: IS</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:324:4:3:1665951757800</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 39</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: PRIMARY</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951757800</span><br><span class="line">            LOCK_TYPE: RECORD</span><br><span class="line">            LOCK_MODE: S,GAP</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: 5</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>依旧是两把锁，不过第二把锁由行锁变成了Gap Lock，锁住得得是（1， 5）这个间隙。</p>
<h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><h4 id="命中记录"><a href="#命中记录" class="headerlink" title="命中记录"></a>命中记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ttt where id&gt;=5 and id&lt;=10 lock in share mode;</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">| id | name | num  | descript |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">|  5 | dd   |    5 | NULL     |</span><br><span class="line">| 10 | gg   |   10 | NULL     |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:1381:1665951760584</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 88</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: NULL</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951760584</span><br><span class="line">            LOCK_TYPE: TABLE</span><br><span class="line">            LOCK_MODE: IS</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:324:4:3:1665951757800</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 88</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: PRIMARY</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951757800</span><br><span class="line">            LOCK_TYPE: RECORD</span><br><span class="line">            LOCK_MODE: S,REC_NOT_GAP</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: 5</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:324:4:4:1665951758144</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 88</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: PRIMARY</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951758144</span><br><span class="line">            LOCK_TYPE: RECORD</span><br><span class="line">            LOCK_MODE: S</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: 10</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<h4 id="未命中记录"><a href="#未命中记录" class="headerlink" title="未命中记录"></a>未命中记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ttt where id&gt;5 and id&lt;10 lock in share mode;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:1381:1665951760584</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 96</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: NULL</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951760584</span><br><span class="line">            LOCK_TYPE: TABLE</span><br><span class="line">            LOCK_MODE: IS</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:324:4:4:1665951757800</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 96</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: PRIMARY</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951757800</span><br><span class="line">            LOCK_TYPE: RECORD</span><br><span class="line">            LOCK_MODE: S,GAP</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: 10</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>对比命中记录和未命中记录的加锁情况，可以看到：</p>
<ul>
<li>where条件里的等值查询加锁情况与前一节相同；</li>
<li>向右遍历且最后一个值不满足条件时只加了Gap Lock，而非Next-Key Lock。<strong>此处与优化2有出入</strong></li>
<li>范围查询，向右遍历时，第一个不满足条件的记录并未上锁，此处与规则所述有出入（此处实际有更复杂的情况，参考下一节[范围查询（唯一索引bug）]）；</li>
</ul>
<h3 id="范围查询（唯一索引bug）"><a href="#范围查询（唯一索引bug）" class="headerlink" title="范围查询（唯一索引bug）"></a>范围查询（唯一索引bug）</h3><h4 id="四种情况"><a href="#四种情况" class="headerlink" title="四种情况"></a>四种情况</h4><ul>
<li><p>where右值（&lt;）为表中记录最大值：</p>
<ul>
<li>&lt;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from ttt where id&gt;10 and id&lt;15 lock in share mode;</span><br><span class="line">  Empty set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      207 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">  | INNODB | 1665988586848:324:4:5:1665951757800 |       283140965297504 |        53 |      207 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | S,GAP     | GRANTED     | 15        |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  2 rows in set (0.00 sec)</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>&lt;=</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from ttt where id&gt;5 and id&lt;=15 lock in share mode;</span><br><span class="line">  +----+------+------+----------+</span><br><span class="line">  | id | name | num  | descript |</span><br><span class="line">  +----+------+------+----------+</span><br><span class="line">  | 10 | gg   |   10 | NULL     |</span><br><span class="line">  | 15 | ll   |   15 | NULL     |</span><br><span class="line">  +----+------+------+----------+</span><br><span class="line">  2 rows in set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+------------------------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA              |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+------------------------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      221 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL                   |</span><br><span class="line">  | INNODB | 1665988586848:324:4:1:1665951757800 |       283140965297504 |        53 |      221 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | S         | GRANTED     | supremum pseudo-record |</span><br><span class="line">  | INNODB | 1665988586848:324:4:4:1665951757800 |       283140965297504 |        53 |      221 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | S         | GRANTED     | 10                     |</span><br><span class="line">  | INNODB | 1665988586848:324:4:5:1665951757800 |       283140965297504 |        53 |      221 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | S         | GRANTED     | 15                     |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+------------------------+</span><br><span class="line">  4 rows in set (0.00 sec)</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>where右值（&lt;）不是最大值：</p>
<ul>
<li>&lt;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from ttt where id&gt;5 and id&lt;10 lock in share mode;</span><br><span class="line">  Empty set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      212 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">  | INNODB | 1665988586848:324:4:4:1665951757800 |       283140965297504 |        53 |      212 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | S,GAP     | GRANTED     | 10        |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>&lt;=</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from ttt where id&gt;5 and id&lt;=10 lock in share mode;</span><br><span class="line">  +----+------+------+----------+</span><br><span class="line">  | id | name | num  | descript |</span><br><span class="line">  +----+------+------+----------+</span><br><span class="line">  | 10 | gg   |   10 | NULL     |</span><br><span class="line">  +----+------+------+----------+</span><br><span class="line">  1 row in set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      216 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">  | INNODB | 1665988586848:324:4:4:1665951757800 |       283140965297504 |        53 |      216 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | S         | GRANTED     | 10        |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  2 rows in set (0.00 sec)</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li>可以看到对于where右值操作符为&lt;的情况，加锁规则一致，但是对于&lt;=，如果操作数为最大值，那么会对supremum 加上Next-Key Lock。</li>
<li>对于本文开头的加锁规则，”唯一索引上的范围查询，会查询到不满足条件的第一个值为止“，这一点在本版本基本已优化（忽略supremum）。</li>
<li>只有对于supremum的加锁，暂未找到原因。</li>
</ul>
<h2 id="读锁-非主键唯一索引"><a href="#读锁-非主键唯一索引" class="headerlink" title="读锁-非主键唯一索引"></a>读锁-非主键唯一索引</h2><h3 id="等值查询-命中记录-行锁"><a href="#等值查询-命中记录-行锁" class="headerlink" title="等值查询(命中记录): 行锁"></a>等值查询(命中记录): 行锁</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=5 lock in share mode;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    5 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:1381:1665951760584</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 248</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: NULL</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951760584</span><br><span class="line">            LOCK_TYPE: TABLE</span><br><span class="line">            LOCK_MODE: IS</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:324:6:3:1665951757800</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 248</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: idx_t3</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951757800</span><br><span class="line">            LOCK_TYPE: RECORD</span><br><span class="line">            LOCK_MODE: S,REC_NOT_GAP</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: 5, 5</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="等值查询-未命中记录-：间隙锁"><a href="#等值查询-未命中记录-：间隙锁" class="headerlink" title="等值查询(未命中记录)：间隙锁"></a>等值查询(未命中记录)：间隙锁</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=6 lock in share mode;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:1381:1665951760584</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 252</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: NULL</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951760584</span><br><span class="line">            LOCK_TYPE: TABLE</span><br><span class="line">            LOCK_MODE: IS</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">               ENGINE: INNODB</span><br><span class="line">       ENGINE_LOCK_ID: 1665988586848:324:6:4:1665951757800</span><br><span class="line">ENGINE_TRANSACTION_ID: 283140965297504</span><br><span class="line">            THREAD_ID: 53</span><br><span class="line">             EVENT_ID: 252</span><br><span class="line">        OBJECT_SCHEMA: ttt</span><br><span class="line">          OBJECT_NAME: ttt</span><br><span class="line">       PARTITION_NAME: NULL</span><br><span class="line">    SUBPARTITION_NAME: NULL</span><br><span class="line">           INDEX_NAME: idx_t3</span><br><span class="line">OBJECT_INSTANCE_BEGIN: 1665951757800</span><br><span class="line">            LOCK_TYPE: RECORD</span><br><span class="line">            LOCK_MODE: S,GAP</span><br><span class="line">          LOCK_STATUS: GRANTED</span><br><span class="line">            LOCK_DATA: 10, 10</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="范围查询-1"><a href="#范围查询-1" class="headerlink" title="范围查询"></a>范围查询</h3><h4 id="命中记录-1"><a href="#命中记录-1" class="headerlink" title="命中记录"></a>命中记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;=5 and num&lt;=10 lock in share mode;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    5 |</span><br><span class="line">|   10 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      272 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:3:1665951757800 |       283140965297504 |        53 |      272 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 5, 5      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      272 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10    |</span><br><span class="line">| INNODB | 1665988586848:324:6:5:1665951757800 |       283140965297504 |        53 |      272 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 15, 15    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h4 id="未命中记录-1"><a href="#未命中记录-1" class="headerlink" title="未命中记录"></a>未命中记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;5 and num&lt;10 lock in share mode;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      268 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      268 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>where里的左值(&lt;=)应该是一个等值查询，但命中时并未退化为行锁，此处与主键索引以及加锁规则所述有出入；</p>
</li>
<li><p>向右遍历且右值不满足条件时未退化为Gap Lock，此处与规则相匹配（因为右值实际时范围查询，而非等值查询），这是与主键索引有区别的一点；</p>
</li>
<li><p>向右遍历，依然需要访问到不满足条件的第一个值，此处与规则匹配，但与主键访问时的情况不同。</p>
</li>
</ul>
<h3 id="范围查询（唯一索引bug）-1"><a href="#范围查询（唯一索引bug）-1" class="headerlink" title="范围查询（唯一索引bug）"></a>范围查询（唯一索引bug）</h3><h4 id="四种情况-1"><a href="#四种情况-1" class="headerlink" title="四种情况"></a>四种情况</h4><ul>
<li><p>where右值为最大值：</p>
<ul>
<li>&lt;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select num from ttt where num&gt;5 and num&lt;15 lock in share mode;</span><br><span class="line">  +------+</span><br><span class="line">  | num  |</span><br><span class="line">  +------+</span><br><span class="line">  |   10 |</span><br><span class="line">  +------+</span><br><span class="line">  1 row in set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      277 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">  | INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      277 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10    |</span><br><span class="line">  | INNODB | 1665988586848:324:6:5:1665951757800 |       283140965297504 |        53 |      277 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 15, 15    |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  3 rows in set (0.00 sec)</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>&lt;=</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select num from ttt where num&gt;5 and num&lt;=15 lock in share mode;</span><br><span class="line">  +------+</span><br><span class="line">  | num  |</span><br><span class="line">  +------+</span><br><span class="line">  |   10 |</span><br><span class="line">  |   15 |</span><br><span class="line">  +------+</span><br><span class="line">  2 rows in set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+------------------------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA              |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+------------------------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      281 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL                   |</span><br><span class="line">  | INNODB | 1665988586848:324:6:1:1665951757800 |       283140965297504 |        53 |      281 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | supremum pseudo-record |</span><br><span class="line">  | INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      281 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10                 |</span><br><span class="line">  | INNODB | 1665988586848:324:6:5:1665951757800 |       283140965297504 |        53 |      281 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 15, 15                 |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+------------------------+</span><br><span class="line">  4 rows in set (0.00 sec)</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>where右值不是最大值：</p>
<ul>
<li>&lt;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select num from ttt where num&gt;5 and num&lt;10 lock in share mode;</span><br><span class="line">  Empty set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      287 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">  | INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      287 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10    |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  2 rows in set (0.00 sec)</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>&lt;=</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">  mysql&gt; begin;</span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select num from ttt where num&gt;5 and num&lt;=10 lock in share mode;</span><br><span class="line">  +------+</span><br><span class="line">  | num  |</span><br><span class="line">  +------+</span><br><span class="line">  |   10 |</span><br><span class="line">  +------+</span><br><span class="line">  1 row in set (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  | INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      293 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">  | INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      293 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10    |</span><br><span class="line">  | INNODB | 1665988586848:324:6:5:1665951757800 |       283140965297504 |        53 |      293 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 15, 15    |</span><br><span class="line">  +--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">  3 rows in set (0.00 sec)</span><br><span class="line">  &#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><ul>
<li>基本与主键索引表现一致；</li>
<li>非最大值时主键索引不会对不满足条件的第一个记录加锁，但是非主键唯一索引会加锁，这是区别。</li>
</ul>
<h2 id="读锁-非主键非唯一索引"><a href="#读锁-非主键非唯一索引" class="headerlink" title="读锁-非主键非唯一索引"></a>读锁-非主键非唯一索引</h2><p>修改表索引，将num上的索引改为非唯一索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">alter table ttt drop index idx_t3;</span><br><span class="line"></span><br><span class="line">alter table ttt add index idx_t3(num);</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="等值查询-命中记录-：Next-Key-Lock-Gap-Lock"><a href="#等值查询-命中记录-：Next-Key-Lock-Gap-Lock" class="headerlink" title="等值查询(命中记录)：Next-Key Lock+Gap Lock"></a>等值查询(命中记录)：Next-Key Lock+Gap Lock</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=5 lock in share mode;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    5 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      308 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:3:1665951757800 |       283140965297504 |        53 |      308 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 5, 5      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951758144 |       283140965297504 |        53 |      308 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951758144 | RECORD    | S,GAP     | GRANTED     | 10, 10    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="等值查询（未命中记录）：-间隙锁"><a href="#等值查询（未命中记录）：-间隙锁" class="headerlink" title="等值查询（未命中记录）： 间隙锁"></a>等值查询（未命中记录）： 间隙锁</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=6 lock in share mode;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      312 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      312 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S,GAP     | GRANTED     | 10, 10    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="范围查询-2"><a href="#范围查询-2" class="headerlink" title="范围查询"></a>范围查询</h3><h4 id="命中记录-2"><a href="#命中记录-2" class="headerlink" title="命中记录"></a>命中记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;=5 and num&lt;=10 lock in share mode;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    5 |</span><br><span class="line">|   10 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      320 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:3:1665951757800 |       283140965297504 |        53 |      320 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 5, 5      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      320 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10    |</span><br><span class="line">| INNODB | 1665988586848:324:6:5:1665951757800 |       283140965297504 |        53 |      320 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 15, 15    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h4 id="未命中记录-2"><a href="#未命中记录-2" class="headerlink" title="未命中记录"></a>未命中记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;5 and num&lt;10 lock in share mode;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |       283140965297504 |        53 |      316 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IS        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |       283140965297504 |        53 |      316 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | S         | GRANTED     | 10, 10    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h2 id="写锁-主键索引"><a href="#写锁-主键索引" class="headerlink" title="写锁-主键索引"></a>写锁-主键索引</h2><h3 id="等值查询-命中记录"><a href="#等值查询-命中记录" class="headerlink" title="等值查询(命中记录)"></a>等值查询(命中记录)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ttt where id=5 for update;</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">| id | name | num  | descript |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">|  5 | dd   |    5 | NULL     |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118109 |        53 |      336 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:4:3:1665951757800 |                118109 |        53 |      336 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 5         |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="等值查询（未命中记录）"><a href="#等值查询（未命中记录）" class="headerlink" title="等值查询（未命中记录）"></a>等值查询（未命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ttt where id=6 for update;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118110 |        53 |      340 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951757800 |                118110 |        53 |      340 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | X,GAP     | GRANTED     | 10        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="范围查询-命中记录"><a href="#范围查询-命中记录" class="headerlink" title="范围查询(命中记录)"></a>范围查询(命中记录)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ttt where id&gt;5 and id&lt;10 for update;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118111 |        53 |      344 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951757800 |                118111 |        53 |      344 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | X,GAP     | GRANTED     | 10        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="范围查询（未命中记录）"><a href="#范围查询（未命中记录）" class="headerlink" title="范围查询（未命中记录）"></a>范围查询（未命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ttt where id&gt;=5 and id&lt;=10 for update;</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">| id | name | num  | descript |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">|  5 | dd   |    5 | NULL     |</span><br><span class="line">| 10 | gg   |   10 | NULL     |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118112 |        53 |      348 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:4:3:1665951757800 |                118112 |        53 |      348 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 5         |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951758144 |                118112 |        53 |      348 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X             | GRANTED     | 10        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h2 id="写锁-非主键唯一索引"><a href="#写锁-非主键唯一索引" class="headerlink" title="写锁-非主键唯一索引"></a>写锁-非主键唯一索引</h2><h3 id="等值查询（命中记录）"><a href="#等值查询（命中记录）" class="headerlink" title="等值查询（命中记录）"></a>等值查询（命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=5 for update;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    5 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118134 |        53 |      386 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:3:1665951757800 |                118134 |        53 |      386 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X,REC_NOT_GAP | GRANTED     | 5, 5      |</span><br><span class="line">| INNODB | 1665988586848:324:4:3:1665951758144 |                118134 |        53 |      386 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 5         |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="等值查询（未命中记录）-1"><a href="#等值查询（未命中记录）-1" class="headerlink" title="等值查询（未命中记录）"></a>等值查询（未命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=6 for update;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118135 |        53 |      390 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |                118135 |        53 |      390 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X,GAP     | GRANTED     | 10, 10    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="范围查询（命中记录）"><a href="#范围查询（命中记录）" class="headerlink" title="范围查询（命中记录）"></a>范围查询（命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;=5 and num&lt;=10 for update;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    5 |</span><br><span class="line">|   10 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118137 |        53 |      398 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:3:1665951757800 |                118137 |        53 |      398 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 5, 5      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |                118137 |        53 |      398 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 10, 10    |</span><br><span class="line">| INNODB | 1665988586848:324:6:5:1665951757800 |                118137 |        53 |      398 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 15, 15    |</span><br><span class="line">| INNODB | 1665988586848:324:4:3:1665951758144 |                118137 |        53 |      398 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 5         |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951758144 |                118137 |        53 |      398 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 10        |</span><br><span class="line">| INNODB | 1665988586848:324:4:5:1665951758144 |                118137 |        53 |      398 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 15        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="范围查询（未命中记录）-1"><a href="#范围查询（未命中记录）-1" class="headerlink" title="范围查询（未命中记录）"></a>范围查询（未命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;5 and num&lt;15 for update;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118136 |        53 |      394 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |                118136 |        53 |      394 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 10, 10    |</span><br><span class="line">| INNODB | 1665988586848:324:6:5:1665951757800 |                118136 |        53 |      394 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 15, 15    |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951758144 |                118136 |        53 |      394 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 10        |</span><br><span class="line">| INNODB | 1665988586848:324:4:5:1665951758144 |                118136 |        53 |      394 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 15        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h2 id="写锁-非主键非唯一索引"><a href="#写锁-非主键非唯一索引" class="headerlink" title="写锁-非主键非唯一索引"></a>写锁-非主键非唯一索引</h2><h3 id="等值查询（命中记录）-1"><a href="#等值查询（命中记录）-1" class="headerlink" title="等值查询（命中记录）"></a>等值查询（命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=5 for update;</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">| id | name | num  | descript |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">|  5 | dd   |    5 | NULL     |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118113 |        53 |      352 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:3:1665951757800 |                118113 |        53 |      352 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 5, 5      |</span><br><span class="line">| INNODB | 1665988586848:324:4:3:1665951758144 |                118113 |        53 |      352 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 5         |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951758488 |                118113 |        53 |      352 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951758488 | RECORD    | X,GAP         | GRANTED     | 10, 10    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="等值查询（未命中记录）-2"><a href="#等值查询（未命中记录）-2" class="headerlink" title="等值查询（未命中记录）"></a>等值查询（未命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num=6 for update;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118115 |        53 |      360 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX        | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |                118115 |        53 |      360 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X,GAP     | GRANTED     | 10, 10    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+-----------+-------------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="范围查询（命中记录）-1"><a href="#范围查询（命中记录）-1" class="headerlink" title="范围查询（命中记录）"></a>范围查询（命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;=5 and num&lt;=10 for update;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    5 |</span><br><span class="line">|   10 |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118116 |        53 |      367 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:3:1665951757800 |                118116 |        53 |      367 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 5, 5      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |                118116 |        53 |      367 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 10, 10    |</span><br><span class="line">| INNODB | 1665988586848:324:6:5:1665951757800 |                118116 |        53 |      367 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 15, 15    |</span><br><span class="line">| INNODB | 1665988586848:324:4:3:1665951758144 |                118116 |        53 |      367 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 5         |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951758144 |                118116 |        53 |      367 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 10        |</span><br><span class="line">| INNODB | 1665988586848:324:4:5:1665951758144 |                118116 |        53 |      367 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 15        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>



<h3 id="范围查询（未命中记录）-2"><a href="#范围查询（未命中记录）-2" class="headerlink" title="范围查询（未命中记录）"></a>范围查询（未命中记录）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;5 and num&lt;15 for update;</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|   10 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118118 |        53 |      375 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |                118118 |        53 |      375 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 10, 10    |</span><br><span class="line">| INNODB | 1665988586848:324:6:5:1665951757800 |                118118 |        53 |      375 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 15, 15    |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951758144 |                118118 |        53 |      375 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 10        |</span><br><span class="line">| INNODB | 1665988586848:324:4:5:1665951758144 |                118118 |        53 |      375 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 15        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>note: 此处主键上id=15这一行也被锁住了</strong></em></p>
<h2 id="写锁-ICP"><a href="#写锁-ICP" class="headerlink" title="写锁-ICP"></a>写锁-ICP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; select * from ttt force index(idx_t1) where name&gt;&#x27;aa&#x27; and name&lt;&#x27;ll&#x27; and num=10 for update;</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">| id | name | num  | descript |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">| 10 | gg   |   10 | NULL     |</span><br><span class="line">+----+------+------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+--------------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA    |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+--------------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118146 |        53 |      444 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL         |</span><br><span class="line">| INNODB | 1665988586848:324:7:3:1665951757800 |                118146 |        53 |      444 | ttt           | ttt         | NULL           | NULL              | idx_t1     |         1665951757800 | RECORD    | X             | GRANTED     | &#x27;dd&#x27;, 5, 5   |</span><br><span class="line">| INNODB | 1665988586848:324:7:4:1665951757800 |                118146 |        53 |      444 | ttt           | ttt         | NULL           | NULL              | idx_t1     |         1665951757800 | RECORD    | X             | GRANTED     | &#x27;gg&#x27;, 10, 10 |</span><br><span class="line">| INNODB | 1665988586848:324:7:5:1665951757800 |                118146 |        53 |      444 | ttt           | ttt         | NULL           | NULL              | idx_t1     |         1665951757800 | RECORD    | X             | GRANTED     | &#x27;ll&#x27;, 15, 15 |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951758144 |                118146 |        53 |      444 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 10           |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+--------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p><strong>索引下推时注意主键索引上的锁，通过索引已经过滤掉的记录并未在主键上加锁。</strong></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>补充一个测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select num from ttt where num&gt;5 and num&lt;15 and id!=10 for update;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from performance_schema.data_locks;</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| ENGINE | ENGINE_LOCK_ID                      | ENGINE_TRANSACTION_ID | THREAD_ID | EVENT_ID | OBJECT_SCHEMA | OBJECT_NAME | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | OBJECT_INSTANCE_BEGIN | LOCK_TYPE | LOCK_MODE     | LOCK_STATUS | LOCK_DATA |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">| INNODB | 1665988586848:1381:1665951760584    |                118140 |        53 |      416 | ttt           | ttt         | NULL           | NULL              | NULL       |         1665951760584 | TABLE     | IX            | GRANTED     | NULL      |</span><br><span class="line">| INNODB | 1665988586848:324:6:4:1665951757800 |                118140 |        53 |      416 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 10, 10    |</span><br><span class="line">| INNODB | 1665988586848:324:6:5:1665951757800 |                118140 |        53 |      416 | ttt           | ttt         | NULL           | NULL              | idx_t3     |         1665951757800 | RECORD    | X             | GRANTED     | 15, 15    |</span><br><span class="line">| INNODB | 1665988586848:324:4:4:1665951758144 |                118140 |        53 |      416 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 10        |</span><br><span class="line">| INNODB | 1665988586848:324:4:5:1665951758144 |                118140 |        53 |      416 | ttt           | ttt         | NULL           | NULL              | PRIMARY    |         1665951758144 | RECORD    | X,REC_NOT_GAP | GRANTED     | 15        |</span><br><span class="line">+--------+-------------------------------------+-----------------------+-----------+----------+---------------+-------------+----------------+-------------------+------------+-----------------------+-----------+---------------+-------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">&#123;%spoiler 示例代码%&#125;</span><br></pre></td></tr></table></figure>

<p>关于这句的执行计划：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%endspoiler%&#125;mysql</span><br><span class="line">mysql&gt; explain  select num from ttt where num&gt;5 and num&lt;15 and id!=10 for update;</span><br><span class="line">+----+-------------+-------+------------+-------+-----------------------+--------+---------+------+------+----------+--------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys         | key    | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+----+-------------+-------+------------+-------+-----------------------+--------+---------+------+------+----------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | ttt   | NULL       | range | PRIMARY,idx_t3,idx_t1 | idx_t3 | 5       | NULL |    1 |    75.00 | Using where; Using index |</span><br><span class="line">+----+-------------+-------+------------+-------+-----------------------+--------+---------+------+------+----------+--------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>这个地方id=10这一行并不符合条件，但是主键上依然锁住了id=10。</strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://learnku.com/articles/40624">[1] 超全面 MySQL 语句加锁分析</a></p>
<p><a href="https://helloworlde.github.io/blog/blog/MySQL/MySQL-%E4%B8%AD%E5%85%B3%E4%BA%8Egap-lock-next-key-lock-%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98.html">[2] MySQL 中关于gap lock / next-key lock 的一个问题</a></p>
<p><a href="https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/">[3] Mysql锁：灵魂七拷问</a></p>
<p><a href="https://www.huaweicloud.com/articles/f571bafcbe55475cd94d1f2f65e729a9.html">[4] MySQL 加锁处理分析（MVVC、快照读、当前读、GAP锁（间隙锁））</a></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html">[5] MySQL官网: 15.7.3 Locks Set by Different SQL Statements in InnoDB</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>IT</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
